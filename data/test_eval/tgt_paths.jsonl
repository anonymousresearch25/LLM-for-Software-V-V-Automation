{"task_num": 4, "task_title": "Median of Two Sorted Arrays", "sampled_paths": [["LOOP #1: Entered while loop at line 21-37\n", "BRANCH #6: Covered else branch at line 35-36\n", "LOOP #1: Entered while loop at line 21-37\n", "BRANCH #2: Covered if branch at line 28-32\n", "BRANCH #4: Covered else branch at line 31-32\n"], ["LOOP #1: Entered while loop at line 21-37\n", "BRANCH #6: Covered else branch at line 35-36\n", "LOOP #1: Entered while loop at line 21-37\n", "BRANCH #2: Covered if branch at line 28-32\n", "BRANCH #3: Covered if branch at line 29-30\n"]], "sampled_condition_paths": [["Line 21: (l <= r)", "Line 28: NOT (maxLeft1 <= minRight2 and maxLeft2 <= minRight1)", "Line 33: NOT (maxLeft1 > minRight2)", "Line 35: ", "Line 21: (l <= r)", "Line 28: (maxLeft1 <= minRight2 and maxLeft2 <= minRight1)", "Line 29: NOT ((n1 + n2) % 2 == 0)", "Line 31: "], ["Line 21: (l <= r)", "Line 28: NOT (maxLeft1 <= minRight2 and maxLeft2 <= minRight1)", "Line 33: NOT (maxLeft1 > minRight2)", "Line 35: ", "Line 21: (l <= r)", "Line 28: (maxLeft1 <= minRight2 and maxLeft2 <= minRight1)", "Line 29: ((n1 + n2) % 2 == 0)"]]}
{"task_num": 10, "task_title": "Regular Expression Matching", "sampled_paths": [["LOOP #3: Entered for loop at line 26-33\n", "BRANCH #3: Covered elif branch at line 31-32\n", "LOOP #3: Entered for loop at line 26-33\n", "BRANCH #2: Covered if branch at line 27-30\n", "LOOP #2: Entered for loop at line 25-33\n"], ["LOOP #2: Entered for loop at line 25-33\n", "LOOP #3: Entered for loop at line 26-33\n", "BRANCH #3: Covered elif branch at line 31-32\n", "LOOP #3: Entered for loop at line 26-33\n", "BRANCH #2: Covered if branch at line 27-30\n"], ["LOOP #2: Entered for loop at line 25-33\n", "LOOP #3: Entered for loop at line 26-33\n", "BRANCH #3: Covered elif branch at line 31-32\n", "LOOP #2: Entered for loop at line 25-33\n", "LOOP #3: Entered for loop at line 26-33\n"], ["LOOP #3: Entered for loop at line 26-33\n", "BRANCH #3: Covered elif branch at line 31-32\n", "LOOP #2: Entered for loop at line 25-33\n", "LOOP #3: Entered for loop at line 26-33\n", "BRANCH #3: Covered elif branch at line 31-32\n"]], "sampled_condition_paths": [["Line 26: (j in range(n))", "Line 27: NOT (p[j] == '*')", "Line 31: (isMatch(i, j))", "Line 26: (j in range(n))", "Line 27: (p[j] == '*')", "Line 25: (i in range(m))"], ["Line 25: (i in range(m))", "Line 26: (j in range(n))", "Line 27: NOT (p[j] == '*')", "Line 31: (isMatch(i, j))", "Line 26: (j in range(n))", "Line 27: (p[j] == '*')"], ["Line 25: (i in range(m))", "Line 26: (j in range(n))", "Line 27: NOT (p[j] == '*')", "Line 31: (isMatch(i, j))", "Line 25: (i in range(m))", "Line 26: (j in range(n))"], ["Line 26: (j in range(n))", "Line 27: NOT (p[j] == '*')", "Line 31: (isMatch(i, j))", "Line 25: (i in range(m))", "Line 26: (j in range(n))", "Line 27: NOT (p[j] == '*')", "Line 31: (isMatch(i, j))"]]}
{"task_num": 15, "task_title": "3Sum", "sampled_paths": [["LOOP #2: Entered while loop at line 26-40\n", "BRANCH #3: Covered if branch at line 28-35\n", "LOOP #1: Entered for loop at line 20-40\n", "BRANCH #2: Covered if branch at line 21-22\n", "LOOP #1: Entered for loop at line 20-40\n"], ["LOOP #1: Entered for loop at line 20-40\n", "LOOP #2: Entered while loop at line 26-40\n", "BRANCH #5: Covered else branch at line 38-39\n"], ["LOOP #1: Entered for loop at line 20-40\n", "LOOP #2: Entered while loop at line 26-40\n", "BRANCH #3: Covered if branch at line 28-35\n"], ["BRANCH #4: Covered elif branch at line 36-37\n", "LOOP #2: Entered while loop at line 26-40\n", "BRANCH #4: Covered elif branch at line 36-37\n", "LOOP #2: Entered while loop at line 26-40\n", "BRANCH #4: Covered elif branch at line 36-37\n"]], "sampled_condition_paths": [["Line 26: (l < r)", "Line 28: (summ == 0)", "Line 20: (i in range(len(nums) - 2))", "Line 21: (i > 0 and nums[i] == nums[i - 1])", "Line 20: (i in range(len(nums) - 2))"], ["Line 20: (i in range(len(nums) - 2))", "Line 26: (l < r)", "Line 28: NOT (summ == 0)", "Line 36: NOT (summ < 0)", "Line 38: "], ["Line 20: (i in range(len(nums) - 2))", "Line 26: (l < r)", "Line 28: (summ == 0)"], ["Line 28: NOT (summ == 0)", "Line 36: (summ < 0)", "Line 26: (l < r)", "Line 28: NOT (summ == 0)", "Line 36: (summ < 0)", "Line 26: (l < r)", "Line 28: NOT (summ == 0)", "Line 36: (summ < 0)"]]}
{"task_num": 44, "task_title": "Wildcard Matching", "sampled_paths": [["LOOP #1: Entered for loop at line 21-24\n", "LOOP #2: Entered for loop at line 25-33\n", "LOOP #3: Entered for loop at line 26-33\n", "BRANCH #3: Covered elif branch at line 31-32\n", "LOOP #3: Entered for loop at line 26-33\n"], ["LOOP #3: Entered for loop at line 26-33\n", "BRANCH #3: Covered elif branch at line 31-32\n", "LOOP #2: Entered for loop at line 25-33\n", "LOOP #3: Entered for loop at line 26-33\n", "BRANCH #3: Covered elif branch at line 31-32\n"], ["LOOP #2: Entered for loop at line 25-33\n", "LOOP #3: Entered for loop at line 26-33\n", "BRANCH #3: Covered elif branch at line 31-32\n", "LOOP #2: Entered for loop at line 25-33\n", "LOOP #3: Entered for loop at line 26-33\n"], ["BRANCH #1: Covered if branch at line 22-23\n", "LOOP #2: Entered for loop at line 25-33\n", "LOOP #3: Entered for loop at line 26-33\n", "BRANCH #2: Covered if branch at line 27-30\n", "LOOP #2: Entered for loop at line 25-33\n"]], "sampled_condition_paths": [["Line 21: (j, c in enumerate(p))", "Line 25: (i in range(m))", "Line 26: (j in range(n))", "Line 27: NOT (p[j] == '*')", "Line 31: (isMatch(i, j))", "Line 26: (j in range(n))"], ["Line 26: (j in range(n))", "Line 27: NOT (p[j] == '*')", "Line 31: (isMatch(i, j))", "Line 25: (i in range(m))", "Line 26: (j in range(n))", "Line 27: NOT (p[j] == '*')", "Line 31: (isMatch(i, j))"], ["Line 25: (i in range(m))", "Line 26: (j in range(n))", "Line 27: NOT (p[j] == '*')", "Line 31: (isMatch(i, j))", "Line 25: (i in range(m))", "Line 26: (j in range(n))"], ["Line 22: (c == '*')", "Line 25: (i in range(m))", "Line 26: (j in range(n))", "Line 27: (p[j] == '*')", "Line 25: (i in range(m))"]]}
{"task_num": 54, "task_title": "Spiral Matrix", "sampled_paths": [["LOOP #2: Entered while loop at line 26-28\n", "LOOP #2: Entered while loop at line 26-28\n", "LOOP #2: Entered while loop at line 26-28\n", "LOOP #3: Entered while loop at line 30-32\n", "LOOP #4: Entered while loop at line 34-36\n"], ["LOOP #4: Entered while loop at line 34-36\n", "LOOP #5: Entered while loop at line 38-40\n", "LOOP #1: Entered while loop at line 24-45\n", "LOOP #2: Entered while loop at line 26-28\n", "LOOP #2: Entered while loop at line 26-28\n"], ["LOOP #2: Entered while loop at line 26-28\n", "LOOP #3: Entered while loop at line 30-32\n", "LOOP #4: Entered while loop at line 34-36\n", "LOOP #4: Entered while loop at line 34-36\n", "LOOP #4: Entered while loop at line 34-36\n"], ["LOOP #4: Entered while loop at line 34-36\n", "LOOP #4: Entered while loop at line 34-36\n", "LOOP #4: Entered while loop at line 34-36\n", "LOOP #5: Entered while loop at line 38-40\n", "LOOP #1: Entered while loop at line 24-45\n"]], "sampled_condition_paths": [["Line 26: (j <= c2 and len(ans) < m * n)", "Line 26: (j <= c2 and len(ans) < m * n)", "Line 26: (j <= c2 and len(ans) < m * n)", "Line 30: (i <= r2 - 1 and len(ans) < m * n)", "Line 34: (j >= c1 and len(ans) < m * n)"], ["Line 34: (j >= c1 and len(ans) < m * n)", "Line 38: (i >= r1 + 1 and len(ans) < m * n)", "Line 24: (len(ans) < m * n)", "Line 26: (j <= c2 and len(ans) < m * n)", "Line 26: (j <= c2 and len(ans) < m * n)"], ["Line 26: (j <= c2 and len(ans) < m * n)", "Line 30: (i <= r2 - 1 and len(ans) < m * n)", "Line 34: (j >= c1 and len(ans) < m * n)", "Line 34: (j >= c1 and len(ans) < m * n)", "Line 34: (j >= c1 and len(ans) < m * n)"], ["Line 34: (j >= c1 and len(ans) < m * n)", "Line 34: (j >= c1 and len(ans) < m * n)", "Line 34: (j >= c1 and len(ans) < m * n)", "Line 38: (i >= r1 + 1 and len(ans) < m * n)", "Line 24: (len(ans) < m * n)"]]}
{"task_num": 65, "task_title": "Valid Number", "sampled_paths": [["LOOP #1: Entered for loop at line 21-39\n", "BRANCH #8: Covered else branch at line 35-38\n"], ["LOOP #1: Entered for loop at line 21-39\n", "BRANCH #4: Covered elif branch at line 26-30\n", "BRANCH #5: Covered if branch at line 27-28\n"], ["LOOP #1: Entered for loop at line 21-39\n", "BRANCH #2: Covered if branch at line 22-25\n"]], "sampled_condition_paths": [["Line 21: (i, c in enumerate(s))", "Line 22: NOT (c == '.')", "Line 26: NOT (c == 'e' or c == 'E')", "Line 31: NOT (c in '+-')", "Line 35: "], ["Line 21: (i, c in enumerate(s))", "Line 22: NOT (c == '.')", "Line 26: (c == 'e' or c == 'E')", "Line 27: (seenE or not seenNum)"], ["Line 21: (i, c in enumerate(s))", "Line 22: (c == '.')"]]}
{"task_num": 73, "task_title": "Set Matrix Zeroes", "sampled_paths": [["BRANCH #3: Covered if branch at line 29-30\n", "BRANCH #4: Covered if branch at line 32-34\n", "LOOP #5: Entered for loop at line 33-35\n", "LOOP #5: Entered for loop at line 33-35\n", "LOOP #5: Entered for loop at line 33-35\n"], ["LOOP #1: Entered for loop at line 18-23\n", "LOOP #2: Entered for loop at line 19-23\n", "LOOP #2: Entered for loop at line 19-23\n", "LOOP #3: Entered for loop at line 24-28\n", "LOOP #4: Entered for loop at line 25-28\n"], ["BRANCH #2: Covered if branch at line 26-27\n", "LOOP #4: Entered for loop at line 25-28\n", "BRANCH #2: Covered if branch at line 26-27\n", "LOOP #3: Entered for loop at line 24-28\n", "LOOP #4: Entered for loop at line 25-28\n"], ["LOOP #4: Entered for loop at line 25-28\n", "LOOP #4: Entered for loop at line 25-28\n", "LOOP #4: Entered for loop at line 25-28\n", "BRANCH #2: Covered if branch at line 26-27\n", "BRANCH #3: Covered if branch at line 29-30\n"]], "sampled_condition_paths": [["Line 29: (shouldFillFirstRow)", "Line 32: (shouldFillFirstCol)", "Line 33: (row in matrix)", "Line 33: (row in matrix)", "Line 33: (row in matrix)"], ["Line 18: (i in range(1, m))", "Line 19: (j in range(1, n))", "Line 19: (j in range(1, n))", "Line 24: (i in range(1, m))", "Line 25: (j in range(1, n))"], ["Line 26: (matrix[i][0] == 0 or matrix[0][j] == 0)", "Line 25: (j in range(1, n))", "Line 26: (matrix[i][0] == 0 or matrix[0][j] == 0)", "Line 24: (i in range(1, m))", "Line 25: (j in range(1, n))"], ["Line 25: (j in range(1, n))", "Line 25: (j in range(1, n))", "Line 25: (j in range(1, n))", "Line 26: (matrix[i][0] == 0 or matrix[0][j] == 0)", "Line 29: (shouldFillFirstRow)"]]}
{"task_num": 97, "task_title": "Interleaving String", "sampled_paths": [["LOOP #5: Entered for loop at line 30-32\n", "LOOP #5: Entered for loop at line 30-32\n", "LOOP #5: Entered for loop at line 30-32\n", "LOOP #5: Entered for loop at line 30-32\n", "LOOP #5: Entered for loop at line 30-32\n"], ["LOOP #1: Entered for loop at line 19-20\n"], ["LOOP #3: Entered for loop at line 26-28\n", "LOOP #4: Entered for loop at line 29-32\n", "LOOP #5: Entered for loop at line 30-32\n", "LOOP #5: Entered for loop at line 30-32\n", "LOOP #5: Entered for loop at line 30-32\n"]], "sampled_condition_paths": [["Line 30: (j in range(1, n + 1))", "Line 30: (j in range(1, n + 1))", "Line 30: (j in range(1, n + 1))", "Line 30: (j in range(1, n + 1))", "Line 30: (j in range(1, n + 1))"], ["Line 19: (_ in range(m + 1))"], ["Line 26: (j in range(1, n + 1))", "Line 29: (i in range(1, m + 1))", "Line 30: (j in range(1, n + 1))", "Line 30: (j in range(1, n + 1))", "Line 30: (j in range(1, n + 1))"]]}
{"task_num": 126, "task_title": "Word Ladder II", "sampled_paths": [["BRANCH #4: Covered if branch at line 38-39\n", "LOOP #4: Entered for loop at line 35-44\n", "LOOP #1: Entered for loop at line 16-18\n", "BRANCH #1: Covered if branch at line 17-18\n", "LOOP #1: Entered for loop at line 16-18\n"], ["LOOP #1: Entered for loop at line 16-18\n", "BRANCH #10: Covered if branch at line 60-63\n", "LOOP #5: Entered for loop at line 59-64\n", "LOOP #1: Entered for loop at line 16-18\n", "LOOP #1: Entered for loop at line 16-18\n"], ["BRANCH #2: Covered if branch at line 21-22\n"]], "sampled_condition_paths": [["Line 38: (not connected(word, item))", "Line 35: (item in wordList)", "Line 16: (i in range(len(a)))", "Line 17: (a[i] != b[i])", "Line 16: (i in range(len(a)))"], ["Line 16: (i in range(len(a)))", "Line 60: (connected(item, word))", "Line 59: (item in nodes[level])", "Line 16: (i in range(len(a)))", "Line 16: (i in range(len(a)))"], ["Line 21: (endWord not in wordList)"]]}
{"task_num": 130, "task_title": "Surrounded Regions", "sampled_paths": [["LOOP #2: Entered for loop at line 22-27\n", "BRANCH #2: Covered if branch at line 23-26\n", "LOOP #1: Entered for loop at line 21-27\n", "LOOP #2: Entered for loop at line 22-27\n", "BRANCH #2: Covered if branch at line 23-26\n"], ["LOOP #2: Entered for loop at line 22-27\n", "BRANCH #2: Covered if branch at line 23-26\n", "LOOP #5: Entered for loop at line 40-46\n", "LOOP #6: Entered for loop at line 41-46\n", "BRANCH #7: Covered else branch at line 44-45\n"], ["LOOP #2: Entered for loop at line 22-27\n", "BRANCH #2: Covered if branch at line 23-26\n", "LOOP #2: Entered for loop at line 22-27\n", "BRANCH #2: Covered if branch at line 23-26\n", "LOOP #2: Entered for loop at line 22-27\n"]], "sampled_condition_paths": [["Line 22: (j in range(n))", "Line 23: (i * j == 0 or i == m - 1 or j == n - 1)", "Line 21: (i in range(m))", "Line 22: (j in range(n))", "Line 23: (i * j == 0 or i == m - 1 or j == n - 1)"], ["Line 22: (j in range(n))", "Line 23: (i * j == 0 or i == m - 1 or j == n - 1)", "Line 40: (row in board)", "Line 41: (i, c in enumerate(row))", "Line 42: NOT (c == '*')", "Line 44: "], ["Line 22: (j in range(n))", "Line 23: (i * j == 0 or i == m - 1 or j == n - 1)", "Line 22: (j in range(n))", "Line 23: (i * j == 0 or i == m - 1 or j == n - 1)", "Line 22: (j in range(n))"]]}
{"task_num": 132, "task_title": "Palindrome Partitioning II", "sampled_paths": [["LOOP #3: Entered for loop at line 21-24\n", "LOOP #3: Entered for loop at line 21-24\n", "LOOP #2: Entered for loop at line 19-24\n", "LOOP #3: Entered for loop at line 21-24\n", "LOOP #4: Entered for loop at line 25-33\n"], ["LOOP #3: Entered for loop at line 21-24\n", "LOOP #4: Entered for loop at line 25-33\n", "BRANCH #1: Covered if branch at line 26-28\n", "LOOP #4: Entered for loop at line 25-33\n", "LOOP #5: Entered for loop at line 30-33\n"], ["LOOP #2: Entered for loop at line 19-24\n", "LOOP #3: Entered for loop at line 21-24\n", "LOOP #4: Entered for loop at line 25-33\n", "BRANCH #1: Covered if branch at line 26-28\n", "LOOP #4: Entered for loop at line 25-33\n"], ["LOOP #1: Entered for loop at line 15-16\n", "LOOP #4: Entered for loop at line 25-33\n", "BRANCH #1: Covered if branch at line 26-28\n"]], "sampled_condition_paths": [["Line 21: (j in range(l - 1, n))", "Line 21: (j in range(l - 1, n))", "Line 19: (l in range(2, n + 1))", "Line 21: (j in range(l - 1, n))", "Line 25: (i in range(n))"], ["Line 21: (j in range(l - 1, n))", "Line 25: (i in range(n))", "Line 26: (isPalindrome[0][i])", "Line 25: (i in range(n))", "Line 30: (j in range(i))"], ["Line 19: (l in range(2, n + 1))", "Line 21: (j in range(l - 1, n))", "Line 25: (i in range(n))", "Line 26: (isPalindrome[0][i])", "Line 25: (i in range(n))"], ["Line 15: (_ in range(n))", "Line 25: (i in range(n))", "Line 26: (isPalindrome[0][i])"]]}
{"task_num": 218, "task_title": "The Skyline Problem", "sampled_paths": [["BRANCH #2: Covered if branch at line 16-18\n", "LOOP #1: Entered while loop at line 31-40\n", "BRANCH #3: Covered if branch at line 32-35\n", "LOOP #1: Entered while loop at line 31-40\n", "BRANCH #4: Covered else branch at line 36-39\n"], ["LOOP #1: Entered while loop at line 31-40\n", "BRANCH #4: Covered else branch at line 36-39\n", "BRANCH #6: Covered if branch at line 55-56\n", "LOOP #1: Entered while loop at line 31-40\n", "BRANCH #3: Covered if branch at line 32-35\n"], ["LOOP #1: Entered while loop at line 31-40\n", "BRANCH #4: Covered else branch at line 36-39\n", "LOOP #2: Entered while loop at line 41-44\n", "BRANCH #2: Covered if branch at line 16-18\n", "BRANCH #2: Covered if branch at line 16-18\n"], ["BRANCH #4: Covered else branch at line 36-39\n", "LOOP #2: Entered while loop at line 41-44\n", "BRANCH #2: Covered if branch at line 16-18\n", "BRANCH #2: Covered if branch at line 16-18\n", "BRANCH #2: Covered if branch at line 16-18\n"]], "sampled_condition_paths": [["Line 16: (n == 1)", "Line 31: (i < len(left) and j < len(right))", "Line 32: (left[i][0] < right[j][0])", "Line 31: (i < len(left) and j < len(right))", "Line 32: NOT (left[i][0] < right[j][0])", "Line 36: "], ["Line 31: (i < len(left) and j < len(right))", "Line 32: NOT (left[i][0] < right[j][0])", "Line 36: ", "Line 55: (ans and ans[-1][1] == y)", "Line 31: (i < len(left) and j < len(right))", "Line 32: (left[i][0] < right[j][0])"], ["Line 31: (i < len(left) and j < len(right))", "Line 32: NOT (left[i][0] < right[j][0])", "Line 36: ", "Line 41: (i < len(left))", "Line 16: (n == 1)", "Line 16: (n == 1)"], ["Line 32: NOT (left[i][0] < right[j][0])", "Line 36: ", "Line 41: (i < len(left))", "Line 16: (n == 1)", "Line 16: (n == 1)", "Line 16: (n == 1)"]]}
{"task_num": 227, "task_title": "Basic Calculator II", "sampled_paths": [["LOOP #1: Entered for loop at line 18-34\n", "BRANCH #1: Covered if branch at line 19-20\n", "LOOP #1: Entered for loop at line 18-34\n", "LOOP #1: Entered for loop at line 18-34\n", "BRANCH #2: Covered if branch at line 21-33\n"], ["BRANCH #1: Covered if branch at line 19-20\n", "LOOP #1: Entered for loop at line 18-34\n", "BRANCH #2: Covered if branch at line 21-33\n", "BRANCH #3: Covered if branch at line 22-24\n", "LOOP #1: Entered for loop at line 18-34\n"], ["BRANCH #1: Covered if branch at line 19-20\n", "LOOP #1: Entered for loop at line 18-34\n", "BRANCH #2: Covered if branch at line 21-33\n", "BRANCH #5: Covered elif branch at line 27-31\n", "BRANCH #7: Covered else branch at line 30-31\n"], ["LOOP #1: Entered for loop at line 18-34\n", "BRANCH #1: Covered if branch at line 19-20\n", "LOOP #1: Entered for loop at line 18-34\n", "BRANCH #2: Covered if branch at line 21-33\n", "BRANCH #3: Covered if branch at line 22-24\n"]], "sampled_condition_paths": [["Line 18: (i, c in enumerate(s))", "Line 19: (c.isdigit())", "Line 18: (i, c in enumerate(s))", "Line 18: (i, c in enumerate(s))", "Line 21: (not c.isdigit() and c != ' ' or i == len(s) - 1)"], ["Line 19: (c.isdigit())", "Line 18: (i, c in enumerate(s))", "Line 21: (not c.isdigit() and c != ' ' or i == len(s) - 1)", "Line 22: (op == '+' or op == '-')", "Line 18: (i, c in enumerate(s))"], ["Line 19: (c.isdigit())", "Line 18: (i, c in enumerate(s))", "Line 21: (not c.isdigit() and c != ' ' or i == len(s) - 1)", "Line 22: NOT (op == '+' or op == '-')", "Line 25: NOT (op == '*')", "Line 27: (op == '/')", "Line 28: NOT (prevNum < 0)", "Line 30: "], ["Line 18: (i, c in enumerate(s))", "Line 19: (c.isdigit())", "Line 18: (i, c in enumerate(s))", "Line 21: (not c.isdigit() and c != ' ' or i == len(s) - 1)", "Line 22: (op == '+' or op == '-')"]]}
{"task_num": 289, "task_title": "Game of Life", "sampled_paths": [["LOOP #3: Entered for loop at line 19-22\n", "LOOP #4: Entered for loop at line 20-22\n", "LOOP #4: Entered for loop at line 20-22\n", "LOOP #5: Entered for loop at line 29-32\n", "LOOP #6: Entered for loop at line 30-32\n"], ["LOOP #4: Entered for loop at line 20-22\n", "LOOP #4: Entered for loop at line 20-22\n", "BRANCH #1: Covered if branch at line 23-24\n", "LOOP #2: Entered for loop at line 17-28\n", "LOOP #3: Entered for loop at line 19-22\n"], ["LOOP #3: Entered for loop at line 19-22\n", "LOOP #4: Entered for loop at line 20-22\n", "LOOP #4: Entered for loop at line 20-22\n", "BRANCH #2: Covered if branch at line 26-27\n", "LOOP #2: Entered for loop at line 17-28\n"], ["BRANCH #1: Covered if branch at line 23-24\n", "LOOP #2: Entered for loop at line 17-28\n", "LOOP #3: Entered for loop at line 19-22\n", "LOOP #4: Entered for loop at line 20-22\n", "LOOP #4: Entered for loop at line 20-22\n"]], "sampled_condition_paths": [["Line 19: (x in range(max(0, i - 1), min(m, i + 2)))", "Line 20: (y in range(max(0, j - 1), min(n, j + 2)))", "Line 20: (y in range(max(0, j - 1), min(n, j + 2)))", "Line 29: (i in range(m))", "Line 30: (j in range(n))"], ["Line 20: (y in range(max(0, j - 1), min(n, j + 2)))", "Line 20: (y in range(max(0, j - 1), min(n, j + 2)))", "Line 23: (board[i][j] == 1 and (ones == 3 or ones == 4))", "Line 17: (j in range(n))", "Line 19: (x in range(max(0, i - 1), min(m, i + 2)))"], ["Line 19: (x in range(max(0, i - 1), min(m, i + 2)))", "Line 20: (y in range(max(0, j - 1), min(n, j + 2)))", "Line 20: (y in range(max(0, j - 1), min(n, j + 2)))", "Line 26: (board[i][j] == 0 and ones == 3)", "Line 17: (j in range(n))"], ["Line 23: (board[i][j] == 1 and (ones == 3 or ones == 4))", "Line 17: (j in range(n))", "Line 19: (x in range(max(0, i - 1), min(m, i + 2)))", "Line 20: (y in range(max(0, j - 1), min(n, j + 2)))", "Line 20: (y in range(max(0, j - 1), min(n, j + 2)))"]]}
{"task_num": 310, "task_title": "Minimum Height Trees", "sampled_paths": [["LOOP #3: Entered while loop at line 27-36\n", "LOOP #4: Entered for loop at line 30-34\n", "LOOP #4: Entered for loop at line 30-34\n", "BRANCH #3: Covered if branch at line 33-34\n", "LOOP #4: Entered for loop at line 30-34\n"], ["LOOP #2: Entered for loop at line 23-26\n", "BRANCH #2: Covered if branch at line 24-25\n", "LOOP #2: Entered for loop at line 23-26\n", "BRANCH #2: Covered if branch at line 24-25\n", "LOOP #2: Entered for loop at line 23-26\n"], ["LOOP #2: Entered for loop at line 23-26\n", "BRANCH #2: Covered if branch at line 24-25\n", "LOOP #2: Entered for loop at line 23-26\n", "LOOP #2: Entered for loop at line 23-26\n", "BRANCH #2: Covered if branch at line 24-25\n"], ["LOOP #2: Entered for loop at line 23-26\n", "LOOP #2: Entered for loop at line 23-26\n", "BRANCH #2: Covered if branch at line 24-25\n", "LOOP #3: Entered while loop at line 27-36\n", "LOOP #4: Entered for loop at line 30-34\n"]], "sampled_condition_paths": [["Line 27: (n > 2)", "Line 30: (leaf in ans)", "Line 30: (leaf in ans)", "Line 33: (len(graph[u]) == 1)", "Line 30: (leaf in ans)"], ["Line 23: (label, children in graph.items())", "Line 24: (len(children) == 1)", "Line 23: (label, children in graph.items())", "Line 24: (len(children) == 1)", "Line 23: (label, children in graph.items())"], ["Line 23: (label, children in graph.items())", "Line 24: (len(children) == 1)", "Line 23: (label, children in graph.items())", "Line 23: (label, children in graph.items())", "Line 24: (len(children) == 1)"], ["Line 23: (label, children in graph.items())", "Line 23: (label, children in graph.items())", "Line 24: (len(children) == 1)", "Line 27: (n > 2)", "Line 30: (leaf in ans)"]]}
{"task_num": 327, "task_title": "Count of Range Sum", "sampled_paths": [["LOOP #3: Entered while loop at line 36-37\n", "LOOP #4: Entered while loop at line 45-54\n", "BRANCH #3: Covered else branch at line 50-53\n", "LOOP #5: Entered while loop at line 55-59\n", "LOOP #1: Entered for loop at line 33-39\n"], ["BRANCH #1: Covered if branch at line 21-22\n", "LOOP #1: Entered for loop at line 33-39\n", "LOOP #3: Entered while loop at line 36-37\n", "LOOP #4: Entered while loop at line 45-54\n", "BRANCH #3: Covered else branch at line 50-53\n"]], "sampled_condition_paths": [["Line 36: (hi <= r and prefix[hi] - prefix[i] <= upper)", "Line 45: (i <= m and j <= r)", "Line 46: NOT (prefix[i] < prefix[j])", "Line 50: ", "Line 55: (i <= m)", "Line 33: (i in range(l, m + 1))"], ["Line 21: (l >= r)", "Line 33: (i in range(l, m + 1))", "Line 36: (hi <= r and prefix[hi] - prefix[i] <= upper)", "Line 45: (i <= m and j <= r)", "Line 46: NOT (prefix[i] < prefix[j])", "Line 50: "]]}
{"task_num": 335, "task_title": "Self Crossing", "sampled_paths": [["LOOP #1: Entered for loop at line 16-23\n", "BRANCH #2: Covered if branch at line 17-18\n"], ["LOOP #1: Entered for loop at line 16-23\n"]], "sampled_condition_paths": [["Line 16: (i in range(3, len(x)))", "Line 17: (x[i - 2] <= x[i] and x[i - 1] <= x[i - 3])"], ["Line 16: (i in range(3, len(x)))"]]}
{"task_num": 336, "task_title": "Palindrome Pairs", "sampled_paths": [["LOOP #2: Entered for loop at line 20-27\n", "LOOP #2: Entered for loop at line 20-27\n", "BRANCH #2: Covered if branch at line 23-24\n", "LOOP #1: Entered for loop at line 16-27\n", "LOOP #2: Entered for loop at line 20-27\n"], ["LOOP #2: Entered for loop at line 20-27\n", "LOOP #2: Entered for loop at line 20-27\n", "LOOP #2: Entered for loop at line 20-27\n", "BRANCH #2: Covered if branch at line 23-24\n", "LOOP #1: Entered for loop at line 16-27\n"], ["LOOP #1: Entered for loop at line 16-27\n", "BRANCH #1: Covered if branch at line 17-18\n", "LOOP #2: Entered for loop at line 20-27\n", "BRANCH #3: Covered if branch at line 25-26\n", "LOOP #1: Entered for loop at line 16-27\n"]], "sampled_condition_paths": [["Line 20: (j in range(1, len(word) + 1))", "Line 20: (j in range(1, len(word) + 1))", "Line 23: (l in dict and dict[l] != i and r == r[::-1])", "Line 16: (i, word in enumerate(words))", "Line 20: (j in range(1, len(word) + 1))"], ["Line 20: (j in range(1, len(word) + 1))", "Line 20: (j in range(1, len(word) + 1))", "Line 20: (j in range(1, len(word) + 1))", "Line 23: (l in dict and dict[l] != i and r == r[::-1])", "Line 16: (i, word in enumerate(words))"], ["Line 16: (i, word in enumerate(words))", "Line 17: (\"\" in dict and dict[\"\"] != i and word == word[::-1])", "Line 20: (j in range(1, len(word) + 1))", "Line 25: (r in dict and dict[r] != i and l == l[::-1])", "Line 16: (i, word in enumerate(words))"]]}
{"task_num": 391, "task_title": "Perfect Rectangle", "sampled_paths": [["LOOP #2: Entered for loop at line 27-32\n", "BRANCH #2: Covered else branch at line 30-31\n", "LOOP #2: Entered for loop at line 27-32\n", "BRANCH #2: Covered else branch at line 30-31\n", "LOOP #1: Entered for loop at line 20-32\n"], ["BRANCH #2: Covered else branch at line 30-31\n", "LOOP #2: Entered for loop at line 27-32\n", "BRANCH #2: Covered else branch at line 30-31\n", "LOOP #1: Entered for loop at line 20-32\n", "LOOP #2: Entered for loop at line 27-32\n"], ["LOOP #1: Entered for loop at line 20-32\n", "LOOP #2: Entered for loop at line 27-32\n", "BRANCH #1: Covered if branch at line 28-29\n", "LOOP #2: Entered for loop at line 27-32\n", "BRANCH #2: Covered else branch at line 30-31\n"], ["BRANCH #1: Covered if branch at line 28-29\n", "LOOP #2: Entered for loop at line 27-32\n", "BRANCH #2: Covered else branch at line 30-31\n", "LOOP #2: Entered for loop at line 27-32\n", "BRANCH #1: Covered if branch at line 28-29\n"], ["LOOP #2: Entered for loop at line 27-32\n", "BRANCH #2: Covered else branch at line 30-31\n", "LOOP #2: Entered for loop at line 27-32\n", "BRANCH #2: Covered else branch at line 30-31\n", "LOOP #2: Entered for loop at line 27-32\n"]], "sampled_condition_paths": [["Line 27: (point in [(x, y), (x, b), (a, y), (a, b)])", "Line 28: NOT (point in corners)", "Line 30: ", "Line 27: (point in [(x, y), (x, b), (a, y), (a, b)])", "Line 28: NOT (point in corners)", "Line 30: ", "Line 20: (x, y, a, b in rectangles)"], ["Line 28: NOT (point in corners)", "Line 30: ", "Line 27: (point in [(x, y), (x, b), (a, y), (a, b)])", "Line 28: NOT (point in corners)", "Line 30: ", "Line 20: (x, y, a, b in rectangles)", "Line 27: (point in [(x, y), (x, b), (a, y), (a, b)])"], ["Line 20: (x, y, a, b in rectangles)", "Line 27: (point in [(x, y), (x, b), (a, y), (a, b)])", "Line 28: (point in corners)", "Line 27: (point in [(x, y), (x, b), (a, y), (a, b)])", "Line 28: NOT (point in corners)", "Line 30: "], ["Line 28: (point in corners)", "Line 27: (point in [(x, y), (x, b), (a, y), (a, b)])", "Line 28: NOT (point in corners)", "Line 30: ", "Line 27: (point in [(x, y), (x, b), (a, y), (a, b)])", "Line 28: (point in corners)"], ["Line 27: (point in [(x, y), (x, b), (a, y), (a, b)])", "Line 28: NOT (point in corners)", "Line 30: ", "Line 27: (point in [(x, y), (x, b), (a, y), (a, b)])", "Line 28: NOT (point in corners)", "Line 30: ", "Line 27: (point in [(x, y), (x, b), (a, y), (a, b)])"]]}
{"task_num": 402, "task_title": "Remove K Digits", "sampled_paths": [["LOOP #4: Entered for loop at line 28-32\n", "BRANCH #2: Covered if branch at line 29-30\n", "LOOP #4: Entered for loop at line 28-32\n", "LOOP #4: Entered for loop at line 28-32\n", "LOOP #4: Entered for loop at line 28-32\n"], ["LOOP #1: Entered for loop at line 19-24\n", "LOOP #2: Entered while loop at line 20-22\n", "LOOP #1: Entered for loop at line 19-24\n", "LOOP #1: Entered for loop at line 19-24\n", "LOOP #2: Entered while loop at line 20-22\n"], ["BRANCH #1: Covered if branch at line 13-14\n"], ["LOOP #2: Entered while loop at line 20-22\n", "LOOP #1: Entered for loop at line 19-24\n", "LOOP #1: Entered for loop at line 19-24\n", "LOOP #2: Entered while loop at line 20-22\n", "LOOP #1: Entered for loop at line 19-24\n"]], "sampled_condition_paths": [["Line 28: (c in stack)", "Line 29: (c == '0' and not ans)", "Line 28: (c in stack)", "Line 28: (c in stack)", "Line 28: (c in stack)"], ["Line 19: (i, digit in enumerate(num))", "Line 20: (k > 0 and stack and stack[-1] > digit)", "Line 19: (i, digit in enumerate(num))", "Line 19: (i, digit in enumerate(num))", "Line 20: (k > 0 and stack and stack[-1] > digit)"], ["Line 13: (len(num) == k)"], ["Line 20: (k > 0 and stack and stack[-1] > digit)", "Line 19: (i, digit in enumerate(num))", "Line 19: (i, digit in enumerate(num))", "Line 20: (k > 0 and stack and stack[-1] > digit)", "Line 19: (i, digit in enumerate(num))"]]}
{"task_num": 407, "task_title": "Trapping Rain Water II", "sampled_paths": [["LOOP #4: Entered for loop at line 34-47\n", "BRANCH #4: Covered else branch at line 44-45\n", "LOOP #4: Entered for loop at line 34-47\n", "BRANCH #2: Covered if branch at line 39-40\n", "LOOP #4: Entered for loop at line 34-47\n"], ["LOOP #4: Entered for loop at line 34-47\n", "BRANCH #2: Covered if branch at line 39-40\n", "LOOP #4: Entered for loop at line 34-47\n", "BRANCH #1: Covered if branch at line 37-38\n", "LOOP #3: Entered while loop at line 32-47\n"], ["BRANCH #2: Covered if branch at line 39-40\n", "LOOP #4: Entered for loop at line 34-47\n", "BRANCH #2: Covered if branch at line 39-40\n", "LOOP #4: Entered for loop at line 34-47\n", "BRANCH #2: Covered if branch at line 39-40\n"], ["LOOP #3: Entered while loop at line 32-47\n", "LOOP #4: Entered for loop at line 34-47\n", "BRANCH #1: Covered if branch at line 37-38\n", "LOOP #4: Entered for loop at line 34-47\n", "BRANCH #2: Covered if branch at line 39-40\n"]], "sampled_condition_paths": [["Line 34: (dx, dy in dirs)", "Line 41: NOT (heightMap[x][y] < h)", "Line 44: ", "Line 34: (dx, dy in dirs)", "Line 39: ((x, y) in seen)", "Line 34: (dx, dy in dirs)"], ["Line 34: (dx, dy in dirs)", "Line 39: ((x, y) in seen)", "Line 34: (dx, dy in dirs)", "Line 37: (x < 0 or x == m or y < 0 or y == n)", "Line 32: (minHeap)"], ["Line 39: ((x, y) in seen)", "Line 34: (dx, dy in dirs)", "Line 39: ((x, y) in seen)", "Line 34: (dx, dy in dirs)", "Line 39: ((x, y) in seen)"], ["Line 32: (minHeap)", "Line 34: (dx, dy in dirs)", "Line 37: (x < 0 or x == m or y < 0 or y == n)", "Line 34: (dx, dy in dirs)", "Line 39: ((x, y) in seen)"]]}
{"task_num": 417, "task_title": "Pacific Atlantic Water Flow", "sampled_paths": [["BRANCH #1: Covered if branch at line 40-41\n", "LOOP #4: Entered for loop at line 37-46\n", "BRANCH #1: Covered if branch at line 40-41\n", "LOOP #5: Entered for loop at line 51-54\n", "LOOP #6: Entered for loop at line 52-54\n"], ["LOOP #4: Entered for loop at line 37-46\n", "BRANCH #1: Covered if branch at line 40-41\n", "LOOP #3: Entered while loop at line 34-46\n", "LOOP #4: Entered for loop at line 37-46\n", "BRANCH #1: Covered if branch at line 40-41\n"], ["BRANCH #2: Covered if branch at line 42-43\n", "LOOP #4: Entered for loop at line 37-46\n", "BRANCH #2: Covered if branch at line 42-43\n", "LOOP #3: Entered while loop at line 34-46\n", "LOOP #4: Entered for loop at line 37-46\n"], ["LOOP #4: Entered for loop at line 37-46\n", "BRANCH #1: Covered if branch at line 40-41\n", "LOOP #4: Entered for loop at line 37-46\n", "BRANCH #1: Covered if branch at line 40-41\n", "LOOP #3: Entered while loop at line 34-46\n"]], "sampled_condition_paths": [["Line 40: (x < 0 or x == m or y < 0 or y == n)", "Line 37: (dx, dy in dirs)", "Line 40: (x < 0 or x == m or y < 0 or y == n)", "Line 51: (i in range(m))", "Line 52: (j in range(n))"], ["Line 37: (dx, dy in dirs)", "Line 40: (x < 0 or x == m or y < 0 or y == n)", "Line 34: (q)", "Line 37: (dx, dy in dirs)", "Line 40: (x < 0 or x == m or y < 0 or y == n)"], ["Line 42: (seen[x][y] or heights[x][y] < h)", "Line 37: (dx, dy in dirs)", "Line 42: (seen[x][y] or heights[x][y] < h)", "Line 34: (q)", "Line 37: (dx, dy in dirs)"], ["Line 37: (dx, dy in dirs)", "Line 40: (x < 0 or x == m or y < 0 or y == n)", "Line 37: (dx, dy in dirs)", "Line 40: (x < 0 or x == m or y < 0 or y == n)", "Line 34: (q)"]]}
{"task_num": 420, "task_title": "Strong Password Checker", "sampled_paths": [["BRANCH #5: Covered if branch at line 34-35\n"], ["BRANCH #4: Covered else branch at line 31-32\n", "LOOP #1: Entered while loop at line 20-33\n", "BRANCH #4: Covered else branch at line 31-32\n", "LOOP #1: Entered while loop at line 20-33\n", "BRANCH #4: Covered else branch at line 31-32\n"], ["LOOP #1: Entered while loop at line 20-33\n", "BRANCH #4: Covered else branch at line 31-32\n", "BRANCH #5: Covered if branch at line 34-35\n"]], "sampled_condition_paths": [["Line 34: (n < 6)"], ["Line 21: NOT (password[i] == password[i - 1] and password[i - 1] == password[i - 2])", "Line 31: ", "Line 20: (i < n)", "Line 21: NOT (password[i] == password[i - 1] and password[i - 1] == password[i - 2])", "Line 31: ", "Line 20: (i < n)", "Line 21: NOT (password[i] == password[i - 1] and password[i - 1] == password[i - 2])", "Line 31: "], ["Line 20: (i < n)", "Line 21: NOT (password[i] == password[i - 1] and password[i - 1] == password[i - 2])", "Line 31: ", "Line 34: (n < 6)"]]}
{"task_num": 423, "task_title": "Reconstruct Original Digits from English", "sampled_paths": [["LOOP #1: Entered for loop at line 15-36\n", "BRANCH #6: Covered if branch at line 26-27\n", "LOOP #1: Entered for loop at line 15-36\n", "BRANCH #5: Covered if branch at line 24-25\n", "LOOP #1: Entered for loop at line 15-36\n"], ["LOOP #1: Entered for loop at line 15-36\n", "BRANCH #2: Covered if branch at line 18-19\n", "LOOP #1: Entered for loop at line 15-36\n", "BRANCH #1: Covered if branch at line 16-17\n", "LOOP #1: Entered for loop at line 15-36\n"], ["BRANCH #10: Covered if branch at line 34-35\n", "LOOP #1: Entered for loop at line 15-36\n", "LOOP #1: Entered for loop at line 15-36\n", "BRANCH #6: Covered if branch at line 26-27\n", "LOOP #1: Entered for loop at line 15-36\n"], ["BRANCH #2: Covered if branch at line 18-19\n", "LOOP #1: Entered for loop at line 15-36\n", "BRANCH #3: Covered if branch at line 20-21\n", "LOOP #1: Entered for loop at line 15-36\n", "BRANCH #2: Covered if branch at line 18-19\n"]], "sampled_condition_paths": [["Line 15: (c in s)", "Line 26: (c == 'f')", "Line 15: (c in s)", "Line 24: (c == 'u')", "Line 15: (c in s)"], ["Line 15: (c in s)", "Line 18: (c == 'o')", "Line 15: (c in s)", "Line 16: (c == 'z')", "Line 15: (c in s)"], ["Line 34: (c == 'i')", "Line 15: (c in s)", "Line 15: (c in s)", "Line 26: (c == 'f')", "Line 15: (c in s)"], ["Line 18: (c == 'o')", "Line 15: (c in s)", "Line 20: (c == 'w')", "Line 15: (c in s)", "Line 18: (c == 'o')"]]}
{"task_num": 457, "task_title": "Circular Array Loop", "sampled_paths": [["BRANCH #3: Covered if branch at line 26-29\n", "BRANCH #4: Covered if branch at line 27-28\n", "LOOP #3: Entered while loop at line 35-39\n", "LOOP #1: Entered for loop at line 19-39\n", "LOOP #2: Entered while loop at line 25-32\n"], ["LOOP #3: Entered while loop at line 35-39\n", "LOOP #1: Entered for loop at line 19-39\n", "LOOP #3: Entered while loop at line 35-39\n", "LOOP #1: Entered for loop at line 19-39\n", "LOOP #2: Entered while loop at line 25-32\n"], ["LOOP #1: Entered for loop at line 19-39\n", "LOOP #2: Entered while loop at line 25-32\n", "LOOP #2: Entered while loop at line 25-32\n", "LOOP #2: Entered while loop at line 25-32\n", "BRANCH #3: Covered if branch at line 26-29\n"], ["LOOP #3: Entered while loop at line 35-39\n", "LOOP #1: Entered for loop at line 19-39\n", "LOOP #3: Entered while loop at line 35-39\n", "LOOP #1: Entered for loop at line 19-39\n", "LOOP #3: Entered while loop at line 35-39\n"]], "sampled_condition_paths": [["Line 26: (slow == fast)", "Line 27: (slow == advance(slow))", "Line 35: (sign * nums[slow] > 0)", "Line 19: (i, num in enumerate(nums))", "Line 25: (num * nums[fast] > 0 and num * nums[advance(fast)] > 0)"], ["Line 35: (sign * nums[slow] > 0)", "Line 19: (i, num in enumerate(nums))", "Line 35: (sign * nums[slow] > 0)", "Line 19: (i, num in enumerate(nums))", "Line 25: (num * nums[fast] > 0 and num * nums[advance(fast)] > 0)"], ["Line 19: (i, num in enumerate(nums))", "Line 25: (num * nums[fast] > 0 and num * nums[advance(fast)] > 0)", "Line 25: (num * nums[fast] > 0 and num * nums[advance(fast)] > 0)", "Line 25: (num * nums[fast] > 0 and num * nums[advance(fast)] > 0)", "Line 26: (slow == fast)"], ["Line 35: (sign * nums[slow] > 0)", "Line 19: (i, num in enumerate(nums))", "Line 35: (sign * nums[slow] > 0)", "Line 19: (i, num in enumerate(nums))", "Line 35: (sign * nums[slow] > 0)"]]}
{"task_num": 524, "task_title": "Longest Word in Dictionary through Deleting", "sampled_paths": [["LOOP #2: Entered for loop at line 17-19\n", "LOOP #2: Entered for loop at line 17-19\n", "LOOP #2: Entered for loop at line 17-19\n", "LOOP #2: Entered for loop at line 17-19\n", "LOOP #2: Entered for loop at line 17-19\n"], ["LOOP #2: Entered for loop at line 17-19\n", "LOOP #2: Entered for loop at line 17-19\n", "LOOP #1: Entered for loop at line 15-23\n", "LOOP #2: Entered for loop at line 17-19\n", "LOOP #2: Entered for loop at line 17-19\n"], ["LOOP #2: Entered for loop at line 17-19\n", "LOOP #2: Entered for loop at line 17-19\n", "LOOP #2: Entered for loop at line 17-19\n", "BRANCH #2: Covered if branch at line 20-22\n", "BRANCH #3: Covered if branch at line 21-22\n"], ["LOOP #2: Entered for loop at line 17-19\n", "BRANCH #1: Covered if branch at line 18-19\n", "LOOP #2: Entered for loop at line 17-19\n", "BRANCH #1: Covered if branch at line 18-19\n", "LOOP #2: Entered for loop at line 17-19\n"]], "sampled_condition_paths": [["Line 17: (c in s)", "Line 17: (c in s)", "Line 17: (c in s)", "Line 17: (c in s)", "Line 17: (c in s)"], ["Line 17: (c in s)", "Line 17: (c in s)", "Line 15: (word in d)", "Line 17: (c in s)", "Line 17: (c in s)"], ["Line 17: (c in s)", "Line 17: (c in s)", "Line 17: (c in s)", "Line 20: (i == len(word))", "Line 21: (len(word) > len(ans) or len(word) == len(ans) and word < ans)"], ["Line 17: (c in s)", "Line 18: (i < len(word) and c == word[i])", "Line 17: (c in s)", "Line 18: (i < len(word) and c == word[i])", "Line 17: (c in s)"]]}
{"task_num": 542, "task_title": "01 Matrix", "sampled_paths": [["BRANCH #3: Covered if branch at line 32-33\n", "LOOP #3: Entered while loop at line 25-37\n", "LOOP #4: Entered for loop at line 27-37\n", "BRANCH #3: Covered if branch at line 32-33\n", "LOOP #4: Entered for loop at line 27-37\n"], ["BRANCH #2: Covered if branch at line 30-31\n", "LOOP #3: Entered while loop at line 25-37\n", "LOOP #4: Entered for loop at line 27-37\n", "BRANCH #3: Covered if branch at line 32-33\n", "LOOP #4: Entered for loop at line 27-37\n"], ["BRANCH #3: Covered if branch at line 32-33\n", "LOOP #4: Entered for loop at line 27-37\n", "BRANCH #3: Covered if branch at line 32-33\n", "LOOP #4: Entered for loop at line 27-37\n", "BRANCH #2: Covered if branch at line 30-31\n"], ["BRANCH #3: Covered if branch at line 32-33\n", "LOOP #4: Entered for loop at line 27-37\n", "BRANCH #3: Covered if branch at line 32-33\n", "LOOP #3: Entered while loop at line 25-37\n", "LOOP #4: Entered for loop at line 27-37\n"]], "sampled_condition_paths": [["Line 32: (seen[x][y])", "Line 25: (q)", "Line 27: (dx, dy in dirs)", "Line 32: (seen[x][y])", "Line 27: (dx, dy in dirs)"], ["Line 30: (x < 0 or x == m or y < 0 or y == n)", "Line 25: (q)", "Line 27: (dx, dy in dirs)", "Line 32: (seen[x][y])", "Line 27: (dx, dy in dirs)"], ["Line 32: (seen[x][y])", "Line 27: (dx, dy in dirs)", "Line 32: (seen[x][y])", "Line 27: (dx, dy in dirs)", "Line 30: (x < 0 or x == m or y < 0 or y == n)"], ["Line 32: (seen[x][y])", "Line 27: (dx, dy in dirs)", "Line 32: (seen[x][y])", "Line 25: (q)", "Line 27: (dx, dy in dirs)"]]}
{"task_num": 547, "task_title": "Number of Provinces", "sampled_paths": [["LOOP #2: Entered for loop at line 43-46\n", "LOOP #1: Entered for loop at line 42-46\n", "LOOP #2: Entered for loop at line 43-46\n", "BRANCH #6: Covered if branch at line 44-45\n", "BRANCH #1: Covered if branch at line 20-21\n"], ["BRANCH #1: Covered if branch at line 20-21\n", "LOOP #2: Entered for loop at line 43-46\n", "LOOP #1: Entered for loop at line 42-46\n", "LOOP #2: Entered for loop at line 43-46\n", "BRANCH #6: Covered if branch at line 44-45\n"], ["BRANCH #1: Covered if branch at line 20-21\n", "LOOP #2: Entered for loop at line 43-46\n", "LOOP #2: Entered for loop at line 43-46\n", "LOOP #1: Entered for loop at line 42-46\n", "LOOP #2: Entered for loop at line 43-46\n"], ["BRANCH #6: Covered if branch at line 44-45\n", "BRANCH #1: Covered if branch at line 20-21\n", "LOOP #2: Entered for loop at line 43-46\n", "LOOP #1: Entered for loop at line 42-46\n", "LOOP #2: Entered for loop at line 43-46\n"]], "sampled_condition_paths": [["Line 43: (j in range(i, n))", "Line 42: (i in range(n))", "Line 43: (j in range(i, n))", "Line 44: (isConnected[i][j] == 1)", "Line 20: (i == j)"], ["Line 20: (i == j)", "Line 43: (j in range(i, n))", "Line 42: (i in range(n))", "Line 43: (j in range(i, n))", "Line 44: (isConnected[i][j] == 1)"], ["Line 20: (i == j)", "Line 43: (j in range(i, n))", "Line 43: (j in range(i, n))", "Line 42: (i in range(n))", "Line 43: (j in range(i, n))"], ["Line 44: (isConnected[i][j] == 1)", "Line 20: (i == j)", "Line 43: (j in range(i, n))", "Line 42: (i in range(n))", "Line 43: (j in range(i, n))"]]}
{"task_num": 581, "task_title": "Shortest Unsorted Continuous Subarray", "sampled_paths": [["BRANCH #2: Covered if branch at line 20-21\n", "LOOP #1: Entered for loop at line 17-22\n", "BRANCH #2: Covered if branch at line 20-21\n", "LOOP #1: Entered for loop at line 17-22\n", "BRANCH #1: Covered if branch at line 18-19\n"], ["LOOP #3: Entered for loop at line 31-34\n", "LOOP #4: Entered for loop at line 35-38\n"], ["LOOP #2: Entered for loop at line 25-30\n", "LOOP #2: Entered for loop at line 25-30\n", "LOOP #3: Entered for loop at line 31-34\n", "LOOP #3: Entered for loop at line 31-34\n", "LOOP #3: Entered for loop at line 31-34\n"], ["LOOP #3: Entered for loop at line 31-34\n", "LOOP #4: Entered for loop at line 35-38\n", "LOOP #4: Entered for loop at line 35-38\n", "LOOP #4: Entered for loop at line 35-38\n", "LOOP #4: Entered for loop at line 35-38\n"], ["BRANCH #1: Covered if branch at line 18-19\n", "BRANCH #2: Covered if branch at line 20-21\n", "LOOP #1: Entered for loop at line 17-22\n", "BRANCH #2: Covered if branch at line 20-21\n", "LOOP #2: Entered for loop at line 25-30\n"]], "sampled_condition_paths": [["Line 20: (flag)", "Line 17: (i in range(1, len(nums)))", "Line 20: (flag)", "Line 17: (i in range(1, len(nums)))", "Line 18: (nums[i] < nums[i - 1])"], ["Line 31: (l in range(len(nums)))", "Line 35: (r, num in reversed(list(enumerate(nums))))"], ["Line 25: (i in reversed(range(len(nums) - 1)))", "Line 25: (i in reversed(range(len(nums) - 1)))", "Line 31: (l in range(len(nums)))", "Line 31: (l in range(len(nums)))", "Line 31: (l in range(len(nums)))"], ["Line 31: (l in range(len(nums)))", "Line 35: (r, num in reversed(list(enumerate(nums))))", "Line 35: (r, num in reversed(list(enumerate(nums))))", "Line 35: (r, num in reversed(list(enumerate(nums))))", "Line 35: (r, num in reversed(list(enumerate(nums))))"], ["Line 18: (nums[i] < nums[i - 1])", "Line 20: (flag)", "Line 17: (i in range(1, len(nums)))", "Line 20: (flag)", "Line 25: (i in reversed(range(len(nums) - 1)))"]]}
{"task_num": 591, "task_title": "Tag Validator", "sampled_paths": [["LOOP #1: Entered while loop at line 37-55\n", "LOOP #1: Entered while loop at line 37-55\n", "LOOP #1: Entered while loop at line 37-55\n", "LOOP #1: Entered while loop at line 37-55\n", "LOOP #1: Entered while loop at line 37-55\n"], ["BRANCH #11: Covered else branch at line 49-52\n", "LOOP #1: Entered while loop at line 37-55\n", "LOOP #1: Entered while loop at line 37-55\n", "BRANCH #6: Covered if branch at line 40-53\n", "BRANCH #9: Covered elif branch at line 45-48\n"], ["LOOP #1: Entered while loop at line 37-55\n", "BRANCH #6: Covered if branch at line 40-53\n", "BRANCH #7: Covered if branch at line 41-44\n", "LOOP #1: Entered while loop at line 37-55\n", "LOOP #1: Entered while loop at line 37-55\n"]], "sampled_condition_paths": [["Line 37: (i < len(code))", "Line 37: (i < len(code))", "Line 37: (i < len(code))", "Line 37: (i < len(code))", "Line 37: (i < len(code))"], ["Line 41: NOT (stack and code[i + 1] == '!')", "Line 45: NOT (code[i + 1] == '/')", "Line 49: ", "Line 37: (i < len(code))", "Line 37: (i < len(code))", "Line 40: (code[i] == '<')", "Line 41: NOT (stack and code[i + 1] == '!')", "Line 45: (code[i + 1] == '/')"], ["Line 37: (i < len(code))", "Line 40: (code[i] == '<')", "Line 41: (stack and code[i + 1] == '!')", "Line 37: (i < len(code))", "Line 37: (i < len(code))"]]}
{"task_num": 648, "task_title": "Replace Words", "sampled_paths": [["LOOP #2: Entered for loop at line 25-30\n", "BRANCH #2: Covered if branch at line 26-27\n", "LOOP #2: Entered for loop at line 25-30\n", "LOOP #2: Entered for loop at line 25-30\n", "BRANCH #3: Covered if branch at line 28-29\n"], ["BRANCH #1: Covered if branch at line 18-19\n", "LOOP #1: Entered for loop at line 17-20\n", "BRANCH #1: Covered if branch at line 18-19\n", "LOOP #1: Entered for loop at line 17-20\n", "BRANCH #1: Covered if branch at line 18-19\n"], ["LOOP #3: Entered for loop at line 34-36\n", "LOOP #1: Entered for loop at line 17-20\n", "BRANCH #1: Covered if branch at line 18-19\n", "LOOP #3: Entered for loop at line 34-36\n", "LOOP #1: Entered for loop at line 17-20\n"], ["LOOP #2: Entered for loop at line 25-30\n", "BRANCH #2: Covered if branch at line 26-27\n", "LOOP #2: Entered for loop at line 25-30\n", "LOOP #2: Entered for loop at line 25-30\n", "BRANCH #2: Covered if branch at line 26-27\n"]], "sampled_condition_paths": [["Line 25: (c in word)", "Line 26: ('word' in node)", "Line 25: (c in word)", "Line 25: (c in word)", "Line 28: (c not in node)"], ["Line 18: (c not in node)", "Line 17: (c in word)", "Line 18: (c not in node)", "Line 17: (c in word)", "Line 18: (c not in node)"], ["Line 34: (word in dictionary)", "Line 17: (c in word)", "Line 18: (c not in node)", "Line 34: (word in dictionary)", "Line 17: (c in word)"], ["Line 25: (c in word)", "Line 26: ('word' in node)", "Line 25: (c in word)", "Line 25: (c in word)", "Line 26: ('word' in node)"]]}
{"task_num": 673, "task_title": "Number of Longest Increasing Subsequence", "sampled_paths": [["BRANCH #2: Covered if branch at line 21-23\n", "LOOP #2: Entered for loop at line 19-26\n", "BRANCH #1: Covered if branch at line 20-25\n", "BRANCH #2: Covered if branch at line 21-23\n", "LOOP #1: Entered for loop at line 18-26\n"], ["LOOP #2: Entered for loop at line 19-26\n", "LOOP #1: Entered for loop at line 18-26\n", "LOOP #2: Entered for loop at line 19-26\n", "LOOP #2: Entered for loop at line 19-26\n", "LOOP #2: Entered for loop at line 19-26\n"], ["LOOP #1: Entered for loop at line 18-26\n", "LOOP #2: Entered for loop at line 19-26\n", "LOOP #2: Entered for loop at line 19-26\n", "LOOP #2: Entered for loop at line 19-26\n", "LOOP #1: Entered for loop at line 18-26\n"], ["BRANCH #2: Covered if branch at line 21-23\n", "LOOP #1: Entered for loop at line 18-26\n", "LOOP #2: Entered for loop at line 19-26\n", "BRANCH #1: Covered if branch at line 20-25\n", "BRANCH #2: Covered if branch at line 21-23\n"]], "sampled_condition_paths": [["Line 21: (length[i] < length[j] + 1)", "Line 19: (j in range(i))", "Line 20: (nums[j] < num)", "Line 21: (length[i] < length[j] + 1)", "Line 18: (i, num in enumerate(nums))"], ["Line 19: (j in range(i))", "Line 18: (i, num in enumerate(nums))", "Line 19: (j in range(i))", "Line 19: (j in range(i))", "Line 19: (j in range(i))"], ["Line 18: (i, num in enumerate(nums))", "Line 19: (j in range(i))", "Line 19: (j in range(i))", "Line 19: (j in range(i))", "Line 18: (i, num in enumerate(nums))"], ["Line 21: (length[i] < length[j] + 1)", "Line 18: (i, num in enumerate(nums))", "Line 19: (j in range(i))", "Line 20: (nums[j] < num)", "Line 21: (length[i] < length[j] + 1)"]]}
{"task_num": 684, "task_title": "Redundant Connection", "sampled_paths": [["BRANCH #4: Covered else branch at line 25-27\n", "LOOP #1: Entered for loop at line 40-44\n", "BRANCH #5: Covered if branch at line 31-32\n", "BRANCH #3: Covered elif branch at line 23-24\n", "LOOP #1: Entered for loop at line 40-44\n"], ["BRANCH #3: Covered elif branch at line 23-24\n", "LOOP #1: Entered for loop at line 40-44\n", "BRANCH #5: Covered if branch at line 31-32\n", "BRANCH #1: Covered if branch at line 19-20\n", "BRANCH #6: Covered if branch at line 42-43\n"], ["LOOP #1: Entered for loop at line 40-44\n", "BRANCH #5: Covered if branch at line 31-32\n", "BRANCH #3: Covered elif branch at line 23-24\n", "LOOP #1: Entered for loop at line 40-44\n", "BRANCH #5: Covered if branch at line 31-32\n"]], "sampled_condition_paths": [["Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: NOT (self.rank[i] > self.rank[j])", "Line 25: ", "Line 40: (edge in edges)", "Line 31: (self.id[u] != u)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: (self.rank[i] > self.rank[j])", "Line 40: (edge in edges)"], ["Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: (self.rank[i] > self.rank[j])", "Line 40: (edge in edges)", "Line 31: (self.id[u] != u)", "Line 19: (i == j)", "Line 42: (not uf.unionByRank(u, v))"], ["Line 40: (edge in edges)", "Line 31: (self.id[u] != u)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: (self.rank[i] > self.rank[j])", "Line 40: (edge in edges)", "Line 31: (self.id[u] != u)"]]}
{"task_num": 685, "task_title": "Redundant Connection II", "sampled_paths": [["BRANCH #9: Covered if branch at line 57-58\n", "LOOP #2: Entered for loop at line 49-54\n", "BRANCH #4: Covered else branch at line 25-27\n", "LOOP #2: Entered for loop at line 49-54\n", "BRANCH #3: Covered elif branch at line 23-24\n"], ["BRANCH #5: Covered if branch at line 31-32\n", "BRANCH #3: Covered elif branch at line 23-24\n", "LOOP #2: Entered for loop at line 49-54\n", "BRANCH #7: Covered if branch at line 50-51\n", "BRANCH #11: Covered if branch at line 63-64\n"], ["BRANCH #3: Covered elif branch at line 23-24\n", "LOOP #2: Entered for loop at line 49-54\n", "BRANCH #5: Covered if branch at line 31-32\n", "BRANCH #3: Covered elif branch at line 23-24\n", "LOOP #2: Entered for loop at line 49-54\n"], ["LOOP #2: Entered for loop at line 49-54\n", "BRANCH #5: Covered if branch at line 31-32\n", "BRANCH #3: Covered elif branch at line 23-24\n", "LOOP #2: Entered for loop at line 49-54\n", "BRANCH #7: Covered if branch at line 50-51\n"]], "sampled_condition_paths": [["Line 57: (nodeWithTwoParents == 0)", "Line 49: (i, edge in enumerate(edges))", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: NOT (self.rank[i] > self.rank[j])", "Line 25: ", "Line 49: (i, edge in enumerate(edges))", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: (self.rank[i] > self.rank[j])"], ["Line 31: (self.id[u] != u)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: (self.rank[i] > self.rank[j])", "Line 49: (i, edge in enumerate(edges))", "Line 50: (i == skippedEdgeIndex)", "Line 63: (not findRedundantDirectedConnection(i))"], ["Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: (self.rank[i] > self.rank[j])", "Line 49: (i, edge in enumerate(edges))", "Line 31: (self.id[u] != u)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: (self.rank[i] > self.rank[j])", "Line 49: (i, edge in enumerate(edges))"], ["Line 49: (i, edge in enumerate(edges))", "Line 31: (self.id[u] != u)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: (self.rank[i] > self.rank[j])", "Line 49: (i, edge in enumerate(edges))", "Line 50: (i == skippedEdgeIndex)"]]}
{"task_num": 688, "task_title": "Knight Probability in Chessboard", "sampled_paths": [["LOOP #4: Entered for loop at line 21-25\n", "BRANCH #1: Covered if branch at line 24-25\n", "LOOP #4: Entered for loop at line 21-25\n", "BRANCH #1: Covered if branch at line 24-25\n", "LOOP #4: Entered for loop at line 21-25\n"], [], ["LOOP #4: Entered for loop at line 21-25\n", "LOOP #4: Entered for loop at line 21-25\n", "BRANCH #1: Covered if branch at line 24-25\n", "LOOP #4: Entered for loop at line 21-25\n", "BRANCH #1: Covered if branch at line 24-25\n"]], "sampled_condition_paths": [["Line 21: (dx, dy in dirs)", "Line 24: (0 <= x < n and 0 <= y < n)", "Line 21: (dx, dy in dirs)", "Line 24: (0 <= x < n and 0 <= y < n)", "Line 21: (dx, dy in dirs)"], [], ["Line 21: (dx, dy in dirs)", "Line 21: (dx, dy in dirs)", "Line 24: (0 <= x < n and 0 <= y < n)", "Line 21: (dx, dy in dirs)", "Line 24: (0 <= x < n and 0 <= y < n)"]]}
{"task_num": 689, "task_title": "Maximum Sum of 3 Non-Overlapping Subarrays", "sampled_paths": [["BRANCH #4: Covered if branch at line 34-35\n", "LOOP #3: Entered for loop at line 33-37\n", "LOOP #3: Entered for loop at line 33-37\n", "LOOP #3: Entered for loop at line 33-37\n", "LOOP #3: Entered for loop at line 33-37\n"], ["BRANCH #4: Covered if branch at line 34-35\n", "LOOP #4: Entered for loop at line 40-45\n", "BRANCH #5: Covered if branch at line 41-44\n", "LOOP #4: Entered for loop at line 40-45\n", "LOOP #4: Entered for loop at line 40-45\n"], ["LOOP #1: Entered for loop at line 19-25\n", "BRANCH #1: Covered if branch at line 21-22\n", "BRANCH #2: Covered if branch at line 23-24\n", "LOOP #2: Entered for loop at line 27-31\n", "LOOP #2: Entered for loop at line 27-31\n"], ["BRANCH #2: Covered if branch at line 23-24\n", "LOOP #1: Entered for loop at line 19-25\n", "BRANCH #1: Covered if branch at line 21-22\n", "BRANCH #2: Covered if branch at line 23-24\n", "LOOP #1: Entered for loop at line 19-25\n"]], "sampled_condition_paths": [["Line 34: (sums[i] >= sums[maxIndex])", "Line 33: (i in range(n - 1, -1, -1))", "Line 33: (i in range(n - 1, -1, -1))", "Line 33: (i in range(n - 1, -1, -1))", "Line 33: (i in range(n - 1, -1, -1))"], ["Line 34: (sums[i] >= sums[maxIndex])", "Line 40: (i in range(k, n - k))", "Line 41: (ans[0] == -1 or sums[ans[0]] + sums[ans[1]] + sums[ans[2]] < sums[l[i - k]] + sums[i] + sums[r[i + k]])", "Line 40: (i in range(k, n - k))", "Line 40: (i in range(k, n - k))"], ["Line 19: (i, num in enumerate(nums))", "Line 21: (i >= k)", "Line 23: (i >= k - 1)", "Line 27: (i in range(n))", "Line 27: (i in range(n))"], ["Line 23: (i >= k - 1)", "Line 19: (i, num in enumerate(nums))", "Line 21: (i >= k)", "Line 23: (i >= k - 1)", "Line 19: (i, num in enumerate(nums))"]]}
{"task_num": 691, "task_title": "Stickers to Spell Word", "sampled_paths": [["LOOP #2: Entered for loop at line 20-28\n", "LOOP #3: Entered for loop at line 22-26\n", "LOOP #4: Entered for loop at line 23-26\n", "LOOP #4: Entered for loop at line 23-26\n", "LOOP #4: Entered for loop at line 23-26\n"], ["LOOP #4: Entered for loop at line 23-26\n", "LOOP #4: Entered for loop at line 23-26\n", "LOOP #4: Entered for loop at line 23-26\n", "LOOP #4: Entered for loop at line 23-26\n", "LOOP #4: Entered for loop at line 23-26\n"], ["BRANCH #1: Covered if branch at line 18-19\n", "LOOP #1: Entered for loop at line 17-28\n", "BRANCH #1: Covered if branch at line 18-19\n", "LOOP #1: Entered for loop at line 17-28\n", "BRANCH #1: Covered if branch at line 18-19\n"]], "sampled_condition_paths": [["Line 20: (sticker in stickers)", "Line 22: (c in sticker)", "Line 23: (i, t in enumerate(target))", "Line 23: (i, t in enumerate(target))", "Line 23: (i, t in enumerate(target))"], ["Line 23: (i, t in enumerate(target))", "Line 23: (i, t in enumerate(target))", "Line 23: (i, t in enumerate(target))", "Line 23: (i, t in enumerate(target))", "Line 23: (i, t in enumerate(target))"], ["Line 18: (dp[mask] == math.inf)", "Line 17: (mask in range(maxMask))", "Line 18: (dp[mask] == math.inf)", "Line 17: (mask in range(maxMask))", "Line 18: (dp[mask] == math.inf)"]]}
{"task_num": 722, "task_title": "Remove Comments", "sampled_paths": [["BRANCH #8: Covered else branch at line 37-40\n", "LOOP #2: Entered while loop at line 19-40\n", "BRANCH #8: Covered else branch at line 37-40\n", "LOOP #2: Entered while loop at line 19-40\n", "BRANCH #4: Covered elif branch at line 29-31\n"], ["BRANCH #10: Covered if branch at line 41-43\n", "LOOP #1: Entered for loop at line 17-44\n", "LOOP #2: Entered while loop at line 19-40\n", "BRANCH #8: Covered else branch at line 37-40\n", "BRANCH #9: Covered if branch at line 38-39\n"], ["BRANCH #1: Covered if branch at line 20-24\n", "LOOP #1: Entered for loop at line 17-44\n", "LOOP #2: Entered while loop at line 19-40\n", "BRANCH #8: Covered else branch at line 37-40\n", "LOOP #2: Entered while loop at line 19-40\n"]], "sampled_condition_paths": [["Line 26: NOT (twoChars == '/*' and not commenting)", "Line 29: NOT (twoChars == '*/' and commenting)", "Line 32: NOT (twoChars == '//')", "Line 37: ", "Line 19: (i < len(line))", "Line 26: NOT (twoChars == '/*' and not commenting)", "Line 29: NOT (twoChars == '*/' and commenting)", "Line 32: NOT (twoChars == '//')", "Line 37: ", "Line 19: (i < len(line))", "Line 26: NOT (twoChars == '/*' and not commenting)", "Line 29: (twoChars == '*/' and commenting)"], ["Line 41: (modified and not commenting)", "Line 17: (line in source)", "Line 19: (i < len(line))", "Line 26: NOT (twoChars == '/*' and not commenting)", "Line 29: NOT (twoChars == '*/' and commenting)", "Line 32: NOT (twoChars == '//')", "Line 37: ", "Line 38: (not commenting)"], ["Line 20: (i + 1 == len(line))", "Line 17: (line in source)", "Line 19: (i < len(line))", "Line 26: NOT (twoChars == '/*' and not commenting)", "Line 29: NOT (twoChars == '*/' and commenting)", "Line 32: NOT (twoChars == '//')", "Line 37: ", "Line 19: (i < len(line))"]]}
{"task_num": 730, "task_title": "Count Different Palindromic Subsequences", "sampled_paths": [["LOOP #1: Entered for loop at line 17-19\n", "LOOP #1: Entered for loop at line 17-19\n", "LOOP #1: Entered for loop at line 17-19\n", "LOOP #2: Entered for loop at line 20-39\n", "LOOP #3: Entered for loop at line 21-39\n"], ["BRANCH #2: Covered if branch at line 30-31\n", "LOOP #3: Entered for loop at line 21-39\n", "BRANCH #5: Covered else branch at line 36-37\n", "LOOP #2: Entered for loop at line 20-39\n", "LOOP #3: Entered for loop at line 21-39\n"], ["LOOP #3: Entered for loop at line 21-39\n", "BRANCH #5: Covered else branch at line 36-37\n", "LOOP #3: Entered for loop at line 21-39\n", "BRANCH #5: Covered else branch at line 36-37\n", "LOOP #3: Entered for loop at line 21-39\n"], ["LOOP #4: Entered while loop at line 26-27\n", "LOOP #4: Entered while loop at line 26-27\n", "LOOP #5: Entered while loop at line 28-29\n", "LOOP #5: Entered while loop at line 28-29\n", "LOOP #5: Entered while loop at line 28-29\n"]], "sampled_condition_paths": [["Line 17: (i in range(n))", "Line 17: (i in range(n))", "Line 17: (i in range(n))", "Line 20: (d in range(1, n))", "Line 21: (i in range(n - d))"], ["Line 30: (lo > hi)", "Line 21: (i in range(n - d))", "Line 23: NOT (s[i] == s[j])", "Line 36: ", "Line 20: (d in range(1, n))", "Line 21: (i in range(n - d))"], ["Line 21: (i in range(n - d))", "Line 23: NOT (s[i] == s[j])", "Line 36: ", "Line 21: (i in range(n - d))", "Line 23: NOT (s[i] == s[j])", "Line 36: ", "Line 21: (i in range(n - d))"], ["Line 26: (lo <= hi and s[lo] != s[i])", "Line 26: (lo <= hi and s[lo] != s[i])", "Line 28: (lo <= hi and s[hi] != s[i])", "Line 28: (lo <= hi and s[hi] != s[i])", "Line 28: (lo <= hi and s[hi] != s[i])"]]}
{"task_num": 735, "task_title": "Asteroid Collision", "sampled_paths": [["BRANCH #1: Covered if branch at line 16-17\n", "LOOP #1: Entered for loop at line 15-27\n", "BRANCH #2: Covered else branch at line 18-26\n", "LOOP #2: Entered while loop at line 19-20\n", "BRANCH #5: Covered else branch at line 25-26\n"], ["LOOP #1: Entered for loop at line 15-27\n", "BRANCH #1: Covered if branch at line 16-17\n", "LOOP #1: Entered for loop at line 15-27\n", "BRANCH #2: Covered else branch at line 18-26\n", "BRANCH #4: Covered elif branch at line 23-24\n"], ["BRANCH #1: Covered if branch at line 16-17\n", "LOOP #1: Entered for loop at line 15-27\n", "BRANCH #1: Covered if branch at line 16-17\n", "LOOP #1: Entered for loop at line 15-27\n", "BRANCH #2: Covered else branch at line 18-26\n"], ["LOOP #1: Entered for loop at line 15-27\n", "BRANCH #1: Covered if branch at line 16-17\n", "LOOP #1: Entered for loop at line 15-27\n", "BRANCH #2: Covered else branch at line 18-26\n", "LOOP #2: Entered while loop at line 19-20\n"]], "sampled_condition_paths": [["Line 16: (a > 0)", "Line 15: (a in asteroids)", "Line 16: NOT (a > 0)", "Line 18: ", "Line 19: (stack and stack[-1] > 0 and stack[-1] < -a)", "Line 21: NOT (not stack or stack[-1] < 0)", "Line 23: NOT (stack[-1] == -a)", "Line 25: "], ["Line 15: (a in asteroids)", "Line 16: (a > 0)", "Line 15: (a in asteroids)", "Line 16: NOT (a > 0)", "Line 18: ", "Line 21: NOT (not stack or stack[-1] < 0)", "Line 23: (stack[-1] == -a)"], ["Line 16: (a > 0)", "Line 15: (a in asteroids)", "Line 16: (a > 0)", "Line 15: (a in asteroids)", "Line 16: NOT (a > 0)", "Line 18: "], ["Line 15: (a in asteroids)", "Line 16: (a > 0)", "Line 15: (a in asteroids)", "Line 16: NOT (a > 0)", "Line 18: ", "Line 19: (stack and stack[-1] > 0 and stack[-1] < -a)"]]}
{"task_num": 743, "task_title": "Network Delay Time", "sampled_paths": [["LOOP #2: Entered while loop at line 26-34\n", "LOOP #3: Entered for loop at line 30-34\n", "BRANCH #2: Covered if branch at line 31-33\n", "LOOP #3: Entered for loop at line 30-34\n", "BRANCH #2: Covered if branch at line 31-33\n"], ["LOOP #3: Entered for loop at line 30-34\n", "BRANCH #2: Covered if branch at line 31-33\n", "LOOP #3: Entered for loop at line 30-34\n", "BRANCH #2: Covered if branch at line 31-33\n", "LOOP #2: Entered while loop at line 26-34\n"], ["LOOP #1: Entered for loop at line 15-17\n", "LOOP #2: Entered while loop at line 26-34\n", "LOOP #3: Entered for loop at line 30-34\n", "BRANCH #2: Covered if branch at line 31-33\n", "LOOP #2: Entered while loop at line 26-34\n"], ["LOOP #1: Entered for loop at line 15-17\n", "LOOP #2: Entered while loop at line 26-34\n"]], "sampled_condition_paths": [["Line 26: (minHeap)", "Line 30: (v, w in graph[u])", "Line 31: (d + w < dist[v])", "Line 30: (v, w in graph[u])", "Line 31: (d + w < dist[v])"], ["Line 30: (v, w in graph[u])", "Line 31: (d + w < dist[v])", "Line 30: (v, w in graph[u])", "Line 31: (d + w < dist[v])", "Line 26: (minHeap)"], ["Line 15: (u, v, w in times)", "Line 26: (minHeap)", "Line 30: (v, w in graph[u])", "Line 31: (d + w < dist[v])", "Line 26: (minHeap)"], ["Line 15: (u, v, w in times)", "Line 26: (minHeap)"]]}
{"task_num": 770, "task_title": "Basic Calculator IV", "sampled_paths": [["BRANCH #1: Covered if branch at line 13-14\n", "LOOP #12: Entered for loop at line 128-141\n", "BRANCH #25: Covered elif branch at line 138-139\n", "BRANCH #1: Covered if branch at line 13-14\n", "LOOP #12: Entered for loop at line 128-141\n"], ["LOOP #12: Entered for loop at line 128-141\n", "BRANCH #25: Covered elif branch at line 138-139\n", "BRANCH #1: Covered if branch at line 13-14\n", "LOOP #12: Entered for loop at line 128-141\n", "BRANCH #25: Covered elif branch at line 138-139\n"], ["BRANCH #13: Covered elif branch at line 94-98\n", "LOOP #8: Entered for loop at line 89-98\n", "LOOP #8: Entered for loop at line 89-98\n", "BRANCH #11: Covered if branch at line 90-93\n", "BRANCH #12: Covered if branch at line 91-92\n"], ["LOOP #9: Entered for loop at line 111-123\n", "BRANCH #20: Covered else branch at line 122-123\n", "LOOP #12: Entered for loop at line 128-141\n", "BRANCH #25: Covered elif branch at line 138-139\n", "BRANCH #1: Covered if branch at line 13-14\n"], ["BRANCH #13: Covered elif branch at line 94-98\n", "LOOP #8: Entered for loop at line 89-98\n", "BRANCH #11: Covered if branch at line 90-93\n", "LOOP #8: Entered for loop at line 89-98\n", "BRANCH #15: Covered if branch at line 99-100\n"], ["LOOP #12: Entered for loop at line 128-141\n", "BRANCH #21: Covered if branch at line 129-137\n", "BRANCH #22: Covered if branch at line 132-133\n", "LOOP #1: Entered for loop at line 19-20\n", "LOOP #12: Entered for loop at line 128-141\n"]], "sampled_condition_paths": [["Line 13: (term and coef)", "Line 128: (token in postfix)", "Line 129: NOT (token in '+-*')", "Line 138: (token.lstrip('-').isnumeric())", "Line 13: (term and coef)", "Line 128: (token in postfix)"], ["Line 128: (token in postfix)", "Line 129: NOT (token in '+-*')", "Line 138: (token.lstrip('-').isnumeric())", "Line 13: (term and coef)", "Line 128: (token in postfix)", "Line 129: NOT (token in '+-*')", "Line 138: (token.lstrip('-').isnumeric())"], ["Line 90: NOT (c == ' ')", "Line 94: (c in '()+-*')", "Line 89: (j, c in enumerate(s))", "Line 89: (j, c in enumerate(s))", "Line 90: (c == ' ')", "Line 91: (i < j)"], ["Line 111: (token in tokens)", "Line 112: NOT (token == '(')", "Line 114: NOT (token == ')')", "Line 118: NOT (token in '+-*')", "Line 122: ", "Line 128: (token in postfix)", "Line 129: NOT (token in '+-*')", "Line 138: (token.lstrip('-').isnumeric())", "Line 13: (term and coef)"], ["Line 90: NOT (c == ' ')", "Line 94: (c in '()+-*')", "Line 89: (j, c in enumerate(s))", "Line 90: (c == ' ')", "Line 89: (j, c in enumerate(s))", "Line 99: (i < len(s))"], ["Line 128: (token in postfix)", "Line 129: (token in '+-*')", "Line 132: (token == '+')", "Line 19: (term, coef in other.terms.items())", "Line 128: (token in postfix)"]]}
{"task_num": 777, "task_title": "Swap Adjacent in LR String", "sampled_paths": [["LOOP #2: Entered while loop at line 20-21\n", "LOOP #2: Entered while loop at line 20-21\n", "LOOP #1: Entered while loop at line 19-34\n", "LOOP #3: Entered while loop at line 22-23\n", "LOOP #3: Entered while loop at line 22-23\n"], ["LOOP #2: Entered while loop at line 20-21\n", "LOOP #1: Entered while loop at line 19-34\n", "LOOP #3: Entered while loop at line 22-23\n", "LOOP #3: Entered while loop at line 22-23\n", "LOOP #1: Entered while loop at line 19-34\n"], ["BRANCH #1: Covered if branch at line 13-14\n"]], "sampled_condition_paths": [["Line 20: (i < len(start) and start[i] == 'X')", "Line 20: (i < len(start) and start[i] == 'X')", "Line 19: (i < len(start) and j < len(end))", "Line 22: (j < len(end) and end[j] == 'X')", "Line 22: (j < len(end) and end[j] == 'X')"], ["Line 20: (i < len(start) and start[i] == 'X')", "Line 19: (i < len(start) and j < len(end))", "Line 22: (j < len(end) and end[j] == 'X')", "Line 22: (j < len(end) and end[j] == 'X')", "Line 19: (i < len(start) and j < len(end))"], ["Line 13: (start.replace('X', '') != end.replace('X', ''))"]]}
{"task_num": 782, "task_title": "Transform to Chessboard", "sampled_paths": [["LOOP #2: Entered for loop at line 16-19\n", "LOOP #2: Entered for loop at line 16-19\n", "LOOP #2: Entered for loop at line 16-19\n", "LOOP #1: Entered for loop at line 15-19\n", "LOOP #2: Entered for loop at line 16-19\n"], ["LOOP #2: Entered for loop at line 16-19\n", "LOOP #1: Entered for loop at line 15-19\n", "LOOP #2: Entered for loop at line 16-19\n", "LOOP #2: Entered for loop at line 16-19\n", "BRANCH #3: Covered if branch at line 25-26\n"], ["LOOP #2: Entered for loop at line 16-19\n", "LOOP #2: Entered for loop at line 16-19\n", "LOOP #1: Entered for loop at line 15-19\n", "LOOP #2: Entered for loop at line 16-19\n", "LOOP #2: Entered for loop at line 16-19\n"]], "sampled_condition_paths": [["Line 16: (j in range(n))", "Line 16: (j in range(n))", "Line 16: (j in range(n))", "Line 15: (i in range(n))", "Line 16: (j in range(n))"], ["Line 16: (j in range(n))", "Line 15: (i in range(n))", "Line 16: (j in range(n))", "Line 16: (j in range(n))", "Line 25: (colSum != n // 2 and colSum != (n + 1) // 2)"], ["Line 16: (j in range(n))", "Line 16: (j in range(n))", "Line 15: (i in range(n))", "Line 16: (j in range(n))", "Line 16: (j in range(n))"]]}
{"task_num": 786, "task_title": "K-th Smallest Prime Fraction", "sampled_paths": [["LOOP #3: Entered while loop at line 25-26\n", "BRANCH #1: Covered if branch at line 28-29\n", "BRANCH #3: Covered if branch at line 34-35\n", "LOOP #1: Entered while loop at line 18-40\n", "LOOP #2: Entered for loop at line 24-33\n"], ["BRANCH #2: Covered if branch at line 30-32\n", "LOOP #2: Entered for loop at line 24-33\n", "LOOP #3: Entered while loop at line 25-26\n", "BRANCH #1: Covered if branch at line 28-29\n", "BRANCH #5: Covered else branch at line 38-39\n"], ["LOOP #2: Entered for loop at line 24-33\n", "BRANCH #2: Covered if branch at line 30-32\n", "LOOP #2: Entered for loop at line 24-33\n", "LOOP #3: Entered while loop at line 25-26\n", "BRANCH #1: Covered if branch at line 28-29\n"], ["LOOP #2: Entered for loop at line 24-33\n", "LOOP #3: Entered while loop at line 25-26\n", "BRANCH #1: Covered if branch at line 28-29\n", "BRANCH #4: Covered elif branch at line 36-37\n", "LOOP #1: Entered while loop at line 18-40\n"]], "sampled_condition_paths": [["Line 25: (j < n and arr[i] > m * arr[j])", "Line 28: (j == n)", "Line 34: (count < k)", "Line 18: (True)", "Line 24: (i in range(n))"], ["Line 30: (ans[0] * arr[j] < ans[1] * arr[i])", "Line 24: (i in range(n))", "Line 25: (j < n and arr[i] > m * arr[j])", "Line 28: (j == n)", "Line 34: NOT (count < k)", "Line 36: NOT (count > k)", "Line 38: "], ["Line 24: (i in range(n))", "Line 30: (ans[0] * arr[j] < ans[1] * arr[i])", "Line 24: (i in range(n))", "Line 25: (j < n and arr[i] > m * arr[j])", "Line 28: (j == n)"], ["Line 24: (i in range(n))", "Line 25: (j < n and arr[i] > m * arr[j])", "Line 28: (j == n)", "Line 34: NOT (count < k)", "Line 36: (count > k)", "Line 18: (True)"]]}
{"task_num": 787, "task_title": "Cheapest Flights Within K Stops", "sampled_paths": [["LOOP #4: Entered for loop at line 34-38\n", "BRANCH #3: Covered if branch at line 35-37\n", "LOOP #3: Entered while loop at line 28-38\n", "LOOP #4: Entered for loop at line 34-38\n", "BRANCH #3: Covered if branch at line 35-37\n"], ["LOOP #1: Entered for loop at line 15-17\n", "LOOP #2: Entered for loop at line 22-24\n", "LOOP #2: Entered for loop at line 22-24\n", "LOOP #2: Entered for loop at line 22-24\n", "LOOP #3: Entered while loop at line 28-38\n"], ["BRANCH #3: Covered if branch at line 35-37\n", "LOOP #4: Entered for loop at line 34-38\n", "BRANCH #3: Covered if branch at line 35-37\n", "LOOP #3: Entered while loop at line 28-38\n", "BRANCH #2: Covered if branch at line 32-33\n"], ["LOOP #2: Entered for loop at line 22-24\n", "LOOP #2: Entered for loop at line 22-24\n", "LOOP #2: Entered for loop at line 22-24\n", "LOOP #2: Entered for loop at line 22-24\n", "LOOP #3: Entered while loop at line 28-38\n"], ["LOOP #4: Entered for loop at line 34-38\n", "BRANCH #3: Covered if branch at line 35-37\n", "LOOP #3: Entered while loop at line 28-38\n", "BRANCH #2: Covered if branch at line 32-33\n", "LOOP #3: Entered while loop at line 28-38\n"]], "sampled_condition_paths": [["Line 34: (v, w in graph[u])", "Line 35: (d + w < dist[v][stops - 1])", "Line 28: (minHeap)", "Line 34: (v, w in graph[u])", "Line 35: (d + w < dist[v][stops - 1])"], ["Line 15: (u, v, w in flights)", "Line 22: (i in range(len(graph)))", "Line 22: (i in range(len(graph)))", "Line 22: (i in range(len(graph)))", "Line 28: (minHeap)"], ["Line 35: (d + w < dist[v][stops - 1])", "Line 34: (v, w in graph[u])", "Line 35: (d + w < dist[v][stops - 1])", "Line 28: (minHeap)", "Line 32: (stops == 0 or d > dist[u][stops])"], ["Line 22: (i in range(len(graph)))", "Line 22: (i in range(len(graph)))", "Line 22: (i in range(len(graph)))", "Line 22: (i in range(len(graph)))", "Line 28: (minHeap)"], ["Line 34: (v, w in graph[u])", "Line 35: (d + w < dist[v][stops - 1])", "Line 28: (minHeap)", "Line 32: (stops == 0 or d > dist[u][stops])", "Line 28: (minHeap)"]]}
{"task_num": 794, "task_title": "Valid Tic-Tac-Toe State", "sampled_paths": [["BRANCH #1: Covered if branch at line 19-20\n"], []], "sampled_condition_paths": [["Line 19: (countX < countO or countX - countO > 1)"], []]}
{"task_num": 805, "task_title": "Split Array With Same Average", "sampled_paths": [["LOOP #3: Entered for loop at line 23-25\n", "LOOP #1: Entered for loop at line 21-25\n", "LOOP #2: Entered for loop at line 22-25\n", "LOOP #3: Entered for loop at line 23-25\n", "LOOP #3: Entered for loop at line 23-25\n"], ["LOOP #2: Entered for loop at line 22-25\n", "LOOP #3: Entered for loop at line 23-25\n", "LOOP #1: Entered for loop at line 21-25\n", "LOOP #2: Entered for loop at line 22-25\n", "LOOP #3: Entered for loop at line 23-25\n"], ["LOOP #3: Entered for loop at line 23-25\n", "LOOP #1: Entered for loop at line 21-25\n", "LOOP #2: Entered for loop at line 22-25\n", "LOOP #3: Entered for loop at line 23-25\n", "LOOP #4: Entered for loop at line 26-29\n"], ["LOOP #3: Entered for loop at line 23-25\n", "LOOP #2: Entered for loop at line 22-25\n", "LOOP #3: Entered for loop at line 23-25\n", "LOOP #3: Entered for loop at line 23-25\n", "LOOP #3: Entered for loop at line 23-25\n"]], "sampled_condition_paths": [["Line 23: (val in sums[i - 1])", "Line 21: (num in nums)", "Line 22: (i in range(n // 2, 0, -1))", "Line 23: (val in sums[i - 1])", "Line 23: (val in sums[i - 1])"], ["Line 22: (i in range(n // 2, 0, -1))", "Line 23: (val in sums[i - 1])", "Line 21: (num in nums)", "Line 22: (i in range(n // 2, 0, -1))", "Line 23: (val in sums[i - 1])"], ["Line 23: (val in sums[i - 1])", "Line 21: (num in nums)", "Line 22: (i in range(n // 2, 0, -1))", "Line 23: (val in sums[i - 1])", "Line 26: (i in range(1, n // 2 + 1))"], ["Line 23: (val in sums[i - 1])", "Line 22: (i in range(n // 2, 0, -1))", "Line 23: (val in sums[i - 1])", "Line 23: (val in sums[i - 1])", "Line 23: (val in sums[i - 1])"]]}
{"task_num": 815, "task_title": "Bus Routes", "sampled_paths": [["LOOP #2: Entered for loop at line 20-22\n", "LOOP #2: Entered for loop at line 20-22\n", "LOOP #3: Entered while loop at line 26-37\n", "LOOP #4: Entered for loop at line 28-37\n", "LOOP #5: Entered for loop at line 29-37\n"], ["LOOP #5: Entered for loop at line 29-37\n", "BRANCH #2: Covered if branch at line 30-31\n", "LOOP #4: Entered for loop at line 28-37\n", "LOOP #5: Entered for loop at line 29-37\n", "BRANCH #2: Covered if branch at line 30-31\n"], ["LOOP #2: Entered for loop at line 20-22\n", "LOOP #3: Entered while loop at line 26-37\n", "LOOP #4: Entered for loop at line 28-37\n", "LOOP #5: Entered for loop at line 29-37\n", "LOOP #6: Entered for loop at line 33-37\n"], ["BRANCH #2: Covered if branch at line 30-31\n", "LOOP #5: Entered for loop at line 29-37\n", "LOOP #6: Entered for loop at line 33-37\n", "LOOP #6: Entered for loop at line 33-37\n", "BRANCH #3: Covered if branch at line 34-35\n"]], "sampled_condition_paths": [["Line 20: (route in routes[i])", "Line 20: (route in routes[i])", "Line 26: (q)", "Line 28: (_ in range(len(q)))", "Line 29: (bus in graph[q.popleft()])"], ["Line 29: (bus in graph[q.popleft()])", "Line 30: (bus in usedBuses)", "Line 28: (_ in range(len(q)))", "Line 29: (bus in graph[q.popleft()])", "Line 30: (bus in usedBuses)"], ["Line 20: (route in routes[i])", "Line 26: (q)", "Line 28: (_ in range(len(q)))", "Line 29: (bus in graph[q.popleft()])", "Line 33: (nextRoute in routes[bus])"], ["Line 30: (bus in usedBuses)", "Line 29: (bus in graph[q.popleft()])", "Line 33: (nextRoute in routes[bus])", "Line 33: (nextRoute in routes[bus])", "Line 34: (nextRoute == target)"]]}
{"task_num": 838, "task_title": "Push Dominoes", "sampled_paths": [["LOOP #1: Entered for loop at line 17-40\n", "LOOP #1: Entered for loop at line 17-40\n", "LOOP #1: Entered for loop at line 17-40\n", "BRANCH #3: Covered elif branch at line 24-39\n", "BRANCH #6: Covered else branch at line 31-38\n"], ["LOOP #4: Entered while loop at line 34-38\n", "LOOP #1: Entered for loop at line 17-40\n", "LOOP #1: Entered for loop at line 17-40\n", "LOOP #1: Entered for loop at line 17-40\n", "BRANCH #1: Covered if branch at line 18-23\n"], ["LOOP #1: Entered for loop at line 17-40\n", "LOOP #1: Entered for loop at line 17-40\n", "BRANCH #3: Covered elif branch at line 24-39\n", "BRANCH #6: Covered else branch at line 31-38\n", "LOOP #1: Entered for loop at line 17-40\n"], ["BRANCH #2: Covered if branch at line 19-22\n", "LOOP #2: Entered while loop at line 20-22\n", "LOOP #1: Entered for loop at line 17-40\n", "LOOP #1: Entered for loop at line 17-40\n", "BRANCH #3: Covered elif branch at line 24-39\n"]], "sampled_condition_paths": [["Line 17: (i in range(len(dominoes) + 1))", "Line 17: (i in range(len(dominoes) + 1))", "Line 17: (i in range(len(dominoes) + 1))", "Line 18: NOT (i == len(dominoes) or dominoes[i] == 'R')", "Line 24: (dominoes[i] == 'L')", "Line 25: NOT (R < L or (L, R) == (-1, -1))", "Line 31: "], ["Line 34: (l < r)", "Line 17: (i in range(len(dominoes) + 1))", "Line 17: (i in range(len(dominoes) + 1))", "Line 17: (i in range(len(dominoes) + 1))", "Line 18: (i == len(dominoes) or dominoes[i] == 'R')"], ["Line 17: (i in range(len(dominoes) + 1))", "Line 17: (i in range(len(dominoes) + 1))", "Line 18: NOT (i == len(dominoes) or dominoes[i] == 'R')", "Line 24: (dominoes[i] == 'L')", "Line 25: NOT (R < L or (L, R) == (-1, -1))", "Line 31: ", "Line 17: (i in range(len(dominoes) + 1))"], ["Line 19: (L < R)", "Line 20: (R < i)", "Line 17: (i in range(len(dominoes) + 1))", "Line 17: (i in range(len(dominoes) + 1))", "Line 18: NOT (i == len(dominoes) or dominoes[i] == 'R')", "Line 24: (dominoes[i] == 'L')"]]}
{"task_num": 845, "task_title": "Longest Mountain in Array", "sampled_paths": [["LOOP #3: Entered while loop at line 23-26\n", "LOOP #3: Entered while loop at line 23-26\n", "LOOP #4: Entered while loop at line 27-30\n", "LOOP #4: Entered while loop at line 27-30\n", "BRANCH #1: Covered if branch at line 31-32\n"], ["LOOP #1: Entered while loop at line 16-33\n", "LOOP #2: Entered while loop at line 17-19\n", "LOOP #2: Entered while loop at line 17-19\n"], ["LOOP #3: Entered while loop at line 23-26\n", "LOOP #4: Entered while loop at line 27-30\n", "LOOP #4: Entered while loop at line 27-30\n", "BRANCH #1: Covered if branch at line 31-32\n", "LOOP #1: Entered while loop at line 16-33\n"]], "sampled_condition_paths": [["Line 23: (i + 1 < len(arr) and arr[i] < arr[i + 1])", "Line 23: (i + 1 < len(arr) and arr[i] < arr[i + 1])", "Line 27: (i + 1 < len(arr) and arr[i] > arr[i + 1])", "Line 27: (i + 1 < len(arr) and arr[i] > arr[i + 1])", "Line 31: (increasing > 0 and decreasing > 0)"], ["Line 16: (i + 1 < len(arr))", "Line 17: (i + 1 < len(arr) and arr[i] == arr[i + 1])", "Line 17: (i + 1 < len(arr) and arr[i] == arr[i + 1])"], ["Line 23: (i + 1 < len(arr) and arr[i] < arr[i + 1])", "Line 27: (i + 1 < len(arr) and arr[i] > arr[i + 1])", "Line 27: (i + 1 < len(arr) and arr[i] > arr[i + 1])", "Line 31: (increasing > 0 and decreasing > 0)", "Line 16: (i + 1 < len(arr))"]]}
{"task_num": 854, "task_title": "K-Similar Strings", "sampled_paths": [["LOOP #5: Entered for loop at line 38-43\n", "BRANCH #3: Covered if branch at line 39-42\n", "LOOP #3: Entered for loop at line 22-26\n", "LOOP #1: Entered while loop at line 17-28\n", "LOOP #2: Entered for loop at line 18-26\n"], ["LOOP #4: Entered while loop at line 35-37\n", "LOOP #5: Entered for loop at line 38-43\n", "BRANCH #3: Covered if branch at line 39-42\n", "LOOP #3: Entered for loop at line 22-26\n", "LOOP #1: Entered while loop at line 17-28\n"], ["LOOP #2: Entered for loop at line 18-26\n", "LOOP #5: Entered for loop at line 38-43\n", "BRANCH #3: Covered if branch at line 39-42\n", "LOOP #3: Entered for loop at line 22-26\n", "LOOP #1: Entered while loop at line 17-28\n"]], "sampled_condition_paths": [["Line 38: (j in range(i + 1, len(s)))", "Line 39: (s[j] == target[i])", "Line 22: (child in self._getChildren(curr, s2))", "Line 17: (q)", "Line 18: (_ in range(len(q)))"], ["Line 35: (curr[i] == target[i])", "Line 38: (j in range(i + 1, len(s)))", "Line 39: (s[j] == target[i])", "Line 22: (child in self._getChildren(curr, s2))", "Line 17: (q)"], ["Line 18: (_ in range(len(q)))", "Line 38: (j in range(i + 1, len(s)))", "Line 39: (s[j] == target[i])", "Line 22: (child in self._getChildren(curr, s2))", "Line 17: (q)"]]}
{"task_num": 861, "task_title": "Score After Flipping Matrix", "sampled_paths": [["LOOP #3: Entered for loop at line 24-26\n", "LOOP #3: Entered for loop at line 24-26\n", "LOOP #3: Entered for loop at line 24-26\n", "LOOP #1: Entered for loop at line 13-16\n", "LOOP #1: Entered for loop at line 13-16\n"], ["LOOP #1: Entered for loop at line 13-16\n", "BRANCH #1: Covered if branch at line 14-15\n", "LOOP #3: Entered for loop at line 24-26\n", "LOOP #2: Entered for loop at line 17-20\n"], ["LOOP #2: Entered for loop at line 17-20\n", "LOOP #2: Entered for loop at line 17-20\n", "LOOP #2: Entered for loop at line 17-20\n", "BRANCH #2: Covered if branch at line 18-19\n", "LOOP #4: Entered for loop at line 28-30\n"]], "sampled_condition_paths": [["Line 24: (i in range(len(row)))", "Line 24: (i in range(len(row)))", "Line 24: (i in range(len(row)))", "Line 13: (row in grid)", "Line 13: (row in grid)"], ["Line 13: (row in grid)", "Line 14: (row[0] == 0)", "Line 24: (i in range(len(row)))", "Line 17: (j, col in enumerate(list(zip(*grid))))"], ["Line 17: (j, col in enumerate(list(zip(*grid))))", "Line 17: (j, col in enumerate(list(zip(*grid))))", "Line 17: (j, col in enumerate(list(zip(*grid))))", "Line 18: (sum(col) * 2 < len(grid))", "Line 28: (i in range(len(grid)))"]]}
{"task_num": 866, "task_title": "Prime Palindrome", "sampled_paths": [["BRANCH #5: Covered if branch at line 32-33\n"], ["LOOP #3: Entered for loop at line 21-23\n", "LOOP #3: Entered for loop at line 21-23\n", "LOOP #3: Entered for loop at line 21-23\n", "LOOP #3: Entered for loop at line 21-23\n", "LOOP #3: Entered for loop at line 21-23\n"], ["BRANCH #6: Covered if branch at line 34-35\n"], ["LOOP #1: Entered for loop at line 15-19\n", "LOOP #2: Entered for loop at line 17-19\n", "LOOP #5: Entered for loop at line 40-42\n", "LOOP #3: Entered for loop at line 21-23\n", "LOOP #3: Entered for loop at line 21-23\n"]], "sampled_condition_paths": [["Line 32: (n <= 7)"], ["Line 21: (i in range(2, int(num**0.5 + 1)))", "Line 21: (i in range(2, int(num**0.5 + 1)))", "Line 21: (i in range(2, int(num**0.5 + 1)))", "Line 21: (i in range(2, int(num**0.5 + 1)))", "Line 21: (i in range(2, int(num**0.5 + 1)))"], ["Line 34: (n <= 11)"], ["Line 15: (i in range(10**(length - 1), 10**length))", "Line 17: (j in range(10))", "Line 40: (num in getPalindromes(nLength))", "Line 21: (i in range(2, int(num**0.5 + 1)))", "Line 21: (i in range(2, int(num**0.5 + 1)))"]]}
{"task_num": 882, "task_title": "Reachable Nodes In Subdivided Graph", "sampled_paths": [["BRANCH #3: Covered if branch at line 42-44\n", "LOOP #3: Entered while loop at line 34-45\n", "LOOP #4: Entered for loop at line 40-45\n", "LOOP #4: Entered for loop at line 40-45\n", "LOOP #2: Entered for loop at line 23-27\n"], ["BRANCH #3: Covered if branch at line 42-44\n", "LOOP #3: Entered while loop at line 34-45\n", "LOOP #4: Entered for loop at line 40-45\n", "LOOP #4: Entered for loop at line 40-45\n", "LOOP #4: Entered for loop at line 40-45\n"], ["LOOP #1: Entered for loop at line 16-19\n", "LOOP #1: Entered for loop at line 16-19\n", "LOOP #1: Entered for loop at line 16-19\n", "LOOP #3: Entered while loop at line 34-45\n", "LOOP #4: Entered for loop at line 40-45\n"], ["LOOP #3: Entered while loop at line 34-45\n", "LOOP #2: Entered for loop at line 23-27\n", "LOOP #2: Entered for loop at line 23-27\n", "LOOP #2: Entered for loop at line 23-27\n", "LOOP #2: Entered for loop at line 23-27\n"], ["LOOP #4: Entered for loop at line 40-45\n", "LOOP #4: Entered for loop at line 40-45\n", "BRANCH #3: Covered if branch at line 42-44\n", "LOOP #3: Entered while loop at line 34-45\n", "LOOP #4: Entered for loop at line 40-45\n"]], "sampled_condition_paths": [["Line 42: (newDist < dist[v])", "Line 34: (minHeap)", "Line 40: (v, w in graph[u])", "Line 40: (v, w in graph[u])", "Line 23: (u, v, cnt in edges)"], ["Line 42: (newDist < dist[v])", "Line 34: (minHeap)", "Line 40: (v, w in graph[u])", "Line 40: (v, w in graph[u])", "Line 40: (v, w in graph[u])"], ["Line 16: (u, v, cnt in edges)", "Line 16: (u, v, cnt in edges)", "Line 16: (u, v, cnt in edges)", "Line 34: (minHeap)", "Line 40: (v, w in graph[u])"], ["Line 34: (minHeap)", "Line 23: (u, v, cnt in edges)", "Line 23: (u, v, cnt in edges)", "Line 23: (u, v, cnt in edges)", "Line 23: (u, v, cnt in edges)"], ["Line 40: (v, w in graph[u])", "Line 40: (v, w in graph[u])", "Line 42: (newDist < dist[v])", "Line 34: (minHeap)", "Line 40: (v, w in graph[u])"]]}
{"task_num": 909, "task_title": "Snakes and Ladders", "sampled_paths": [["LOOP #2: Entered for loop at line 20-25\n", "BRANCH #2: Covered else branch at line 23-24\n", "LOOP #1: Entered for loop at line 19-25\n", "LOOP #2: Entered for loop at line 20-25\n", "BRANCH #1: Covered if branch at line 21-22\n"], ["BRANCH #2: Covered else branch at line 23-24\n", "LOOP #2: Entered for loop at line 20-25\n", "BRANCH #2: Covered else branch at line 23-24\n", "LOOP #1: Entered for loop at line 19-25\n", "LOOP #2: Entered for loop at line 20-25\n"], ["LOOP #2: Entered for loop at line 20-25\n", "BRANCH #2: Covered else branch at line 23-24\n", "LOOP #2: Entered for loop at line 20-25\n", "BRANCH #2: Covered else branch at line 23-24\n", "LOOP #2: Entered for loop at line 20-25\n"], ["BRANCH #2: Covered else branch at line 23-24\n", "LOOP #1: Entered for loop at line 19-25\n", "LOOP #2: Entered for loop at line 20-25\n", "BRANCH #1: Covered if branch at line 21-22\n", "LOOP #2: Entered for loop at line 20-25\n"]], "sampled_condition_paths": [["Line 20: (j in range(n))", "Line 21: NOT (n - i & 1 )", "Line 23: ", "Line 19: (i in range(n))", "Line 20: (j in range(n))", "Line 21: (n - i & 1 )"], ["Line 21: NOT (n - i & 1 )", "Line 23: ", "Line 20: (j in range(n))", "Line 21: NOT (n - i & 1 )", "Line 23: ", "Line 19: (i in range(n))", "Line 20: (j in range(n))"], ["Line 20: (j in range(n))", "Line 21: NOT (n - i & 1 )", "Line 23: ", "Line 20: (j in range(n))", "Line 21: NOT (n - i & 1 )", "Line 23: ", "Line 20: (j in range(n))"], ["Line 21: NOT (n - i & 1 )", "Line 23: ", "Line 19: (i in range(n))", "Line 20: (j in range(n))", "Line 21: (n - i & 1 )", "Line 20: (j in range(n))"]]}
{"task_num": 913, "task_title": "Cat and Mouse", "sampled_paths": [["LOOP #2: Entered for loop at line 28-31\n", "LOOP #2: Entered for loop at line 28-31\n", "LOOP #2: Entered for loop at line 28-31\n", "LOOP #2: Entered for loop at line 28-31\n", "LOOP #1: Entered for loop at line 27-31\n"], ["BRANCH #4: Covered if branch at line 51-54\n", "LOOP #5: Entered while loop at line 39-60\n", "LOOP #6: Entered for loop at line 44-60\n", "BRANCH #4: Covered if branch at line 51-54\n", "LOOP #6: Entered for loop at line 44-60\n"], ["LOOP #5: Entered while loop at line 39-60\n", "LOOP #6: Entered for loop at line 44-60\n", "BRANCH #3: Covered if branch at line 49-50\n", "LOOP #5: Entered while loop at line 39-60\n", "LOOP #6: Entered for loop at line 44-60\n"], ["LOOP #1: Entered for loop at line 27-31\n", "LOOP #2: Entered for loop at line 28-31\n", "LOOP #2: Entered for loop at line 28-31\n", "LOOP #2: Entered for loop at line 28-31\n", "LOOP #2: Entered for loop at line 28-31\n"]], "sampled_condition_paths": [["Line 28: (mouse in range(n))", "Line 28: (mouse in range(n))", "Line 28: (mouse in range(n))", "Line 28: (mouse in range(n))", "Line 27: (cat in range(n))"], ["Line 51: (prevMove == 0 and state == int(State.kMouseWin) or prevMove == 1 and state == int(State.kCatWin))", "Line 39: (q)", "Line 44: (prev in graph[cat if prevMove else mouse])", "Line 51: (prevMove == 0 and state == int(State.kMouseWin) or prevMove == 1 and state == int(State.kCatWin))", "Line 44: (prev in graph[cat if prevMove else mouse])"], ["Line 39: (q)", "Line 44: (prev in graph[cat if prevMove else mouse])", "Line 49: (states[prevCat][prevMouse][prevMove])", "Line 39: (q)", "Line 44: (prev in graph[cat if prevMove else mouse])"], ["Line 27: (cat in range(n))", "Line 28: (mouse in range(n))", "Line 28: (mouse in range(n))", "Line 28: (mouse in range(n))", "Line 28: (mouse in range(n))"]]}
{"task_num": 923, "task_title": "3Sum With Multiplicity", "sampled_paths": [["LOOP #2: Entered for loop at line 18-28\n", "BRANCH #1: Covered if branch at line 20-21\n", "LOOP #2: Entered for loop at line 18-28\n", "LOOP #1: Entered for loop at line 17-28\n", "LOOP #2: Entered for loop at line 18-28\n"], ["LOOP #2: Entered for loop at line 18-28\n", "LOOP #1: Entered for loop at line 17-28\n", "LOOP #2: Entered for loop at line 18-28\n", "LOOP #2: Entered for loop at line 18-28\n", "BRANCH #3: Covered elif branch at line 24-25\n"], ["LOOP #1: Entered for loop at line 17-28\n", "LOOP #2: Entered for loop at line 18-28\n", "LOOP #2: Entered for loop at line 18-28\n", "LOOP #2: Entered for loop at line 18-28\n", "BRANCH #1: Covered if branch at line 20-21\n"], ["LOOP #1: Entered for loop at line 17-28\n", "LOOP #2: Entered for loop at line 18-28\n", "LOOP #2: Entered for loop at line 18-28\n", "LOOP #2: Entered for loop at line 18-28\n", "BRANCH #3: Covered elif branch at line 24-25\n"], ["LOOP #2: Entered for loop at line 18-28\n", "LOOP #2: Entered for loop at line 18-28\n", "BRANCH #3: Covered elif branch at line 24-25\n", "LOOP #2: Entered for loop at line 18-28\n", "LOOP #2: Entered for loop at line 18-28\n"]], "sampled_condition_paths": [["Line 18: (j, y in count.items())", "Line 20: (k not in count)", "Line 18: (j, y in count.items())", "Line 17: (i, x in count.items())", "Line 18: (j, y in count.items())"], ["Line 18: (j, y in count.items())", "Line 17: (i, x in count.items())", "Line 18: (j, y in count.items())", "Line 18: (j, y in count.items())", "Line 22: NOT (i == j and j == k)", "Line 24: (i == j and j != k)"], ["Line 17: (i, x in count.items())", "Line 18: (j, y in count.items())", "Line 18: (j, y in count.items())", "Line 18: (j, y in count.items())", "Line 20: (k not in count)"], ["Line 17: (i, x in count.items())", "Line 18: (j, y in count.items())", "Line 18: (j, y in count.items())", "Line 18: (j, y in count.items())", "Line 22: NOT (i == j and j == k)", "Line 24: (i == j and j != k)"], ["Line 18: (j, y in count.items())", "Line 18: (j, y in count.items())", "Line 22: NOT (i == j and j == k)", "Line 24: (i == j and j != k)", "Line 18: (j, y in count.items())", "Line 18: (j, y in count.items())"]]}
{"task_num": 927, "task_title": "Three Equal Parts", "sampled_paths": [["BRANCH #2: Covered if branch at line 17-18\n"], ["LOOP #2: Entered for loop at line 30-36\n", "LOOP #2: Entered for loop at line 30-36\n", "BRANCH #4: Covered if branch at line 31-35\n", "BRANCH #5: Covered if branch at line 33-35\n", "LOOP #3: Entered for loop at line 39-45\n"], ["LOOP #3: Entered for loop at line 39-45\n", "LOOP #3: Entered for loop at line 39-45\n", "LOOP #3: Entered for loop at line 39-45\n", "BRANCH #6: Covered if branch at line 40-44\n", "BRANCH #7: Covered if branch at line 42-44\n"], ["LOOP #3: Entered for loop at line 39-45\n", "LOOP #3: Entered for loop at line 39-45\n", "BRANCH #6: Covered if branch at line 40-44\n", "BRANCH #7: Covered if branch at line 42-44\n", "LOOP #4: Entered while loop at line 46-50\n"]], "sampled_condition_paths": [["Line 17: (ones % 3 != 0)"], ["Line 30: (j in range(i + 1, len(arr)))", "Line 30: (j in range(i + 1, len(arr)))", "Line 31: (arr[j] == 1)", "Line 33: (gapOnes == 0)", "Line 39: (i in range(j + 1, len(arr)))"], ["Line 39: (i in range(j + 1, len(arr)))", "Line 39: (i in range(j + 1, len(arr)))", "Line 39: (i in range(j + 1, len(arr)))", "Line 40: (arr[i] == 1)", "Line 42: (gapOnes == 0)"], ["Line 39: (i in range(j + 1, len(arr)))", "Line 39: (i in range(j + 1, len(arr)))", "Line 40: (arr[i] == 1)", "Line 42: (gapOnes == 0)", "Line 46: (third < len(arr) and arr[first] == arr[second] == arr[third])"]]}
{"task_num": 935, "task_title": "Knight Dialer", "sampled_paths": [["LOOP #3: Entered for loop at line 22-32\n", "LOOP #4: Entered for loop at line 25-32\n", "BRANCH #3: Covered if branch at line 30-31\n", "LOOP #4: Entered for loop at line 25-32\n", "BRANCH #2: Covered if branch at line 28-29\n"], ["LOOP #4: Entered for loop at line 25-32\n", "BRANCH #2: Covered if branch at line 28-29\n", "LOOP #4: Entered for loop at line 25-32\n", "BRANCH #2: Covered if branch at line 28-29\n", "LOOP #4: Entered for loop at line 25-32\n"], ["LOOP #4: Entered for loop at line 25-32\n", "BRANCH #2: Covered if branch at line 28-29\n", "LOOP #3: Entered for loop at line 22-32\n", "LOOP #4: Entered for loop at line 25-32\n", "BRANCH #2: Covered if branch at line 28-29\n"], ["LOOP #4: Entered for loop at line 25-32\n", "BRANCH #2: Covered if branch at line 28-29\n", "LOOP #4: Entered for loop at line 25-32\n", "BRANCH #3: Covered if branch at line 30-31\n", "LOOP #4: Entered for loop at line 25-32\n"], []], "sampled_condition_paths": [["Line 22: (j in range(3))", "Line 25: (dx, dy in dirs)", "Line 30: ((x, y) in ((3, 0), (3, 2)))", "Line 25: (dx, dy in dirs)", "Line 28: (x < 0 or x >= 4 or y < 0 or y >= 3)"], ["Line 25: (dx, dy in dirs)", "Line 28: (x < 0 or x >= 4 or y < 0 or y >= 3)", "Line 25: (dx, dy in dirs)", "Line 28: (x < 0 or x >= 4 or y < 0 or y >= 3)", "Line 25: (dx, dy in dirs)"], ["Line 25: (dx, dy in dirs)", "Line 28: (x < 0 or x >= 4 or y < 0 or y >= 3)", "Line 22: (j in range(3))", "Line 25: (dx, dy in dirs)", "Line 28: (x < 0 or x >= 4 or y < 0 or y >= 3)"], ["Line 25: (dx, dy in dirs)", "Line 28: (x < 0 or x >= 4 or y < 0 or y >= 3)", "Line 25: (dx, dy in dirs)", "Line 30: ((x, y) in ((3, 0), (3, 2)))", "Line 25: (dx, dy in dirs)"], []]}
{"task_num": 939, "task_title": "Minimum Area Rectangle", "sampled_paths": [["LOOP #3: Entered for loop at line 20-27\n", "BRANCH #2: Covered if branch at line 25-26\n", "LOOP #2: Entered for loop at line 19-27\n", "LOOP #3: Entered for loop at line 20-27\n", "BRANCH #2: Covered if branch at line 25-26\n"], ["LOOP #2: Entered for loop at line 19-27\n", "LOOP #3: Entered for loop at line 20-27\n", "BRANCH #1: Covered if branch at line 23-24\n", "LOOP #2: Entered for loop at line 19-27\n", "LOOP #3: Entered for loop at line 20-27\n"], ["LOOP #1: Entered for loop at line 16-18\n", "LOOP #2: Entered for loop at line 19-27\n", "LOOP #2: Entered for loop at line 19-27\n", "LOOP #3: Entered for loop at line 20-27\n", "BRANCH #1: Covered if branch at line 23-24\n"], ["LOOP #2: Entered for loop at line 19-27\n", "LOOP #3: Entered for loop at line 20-27\n", "BRANCH #2: Covered if branch at line 25-26\n", "LOOP #3: Entered for loop at line 20-27\n", "BRANCH #1: Covered if branch at line 23-24\n"]], "sampled_condition_paths": [["Line 20: (j in range(i))", "Line 25: (y2 in xToYs[x1] and y1 in xToYs[x2])", "Line 19: (i in range(len(points)))", "Line 20: (j in range(i))", "Line 25: (y2 in xToYs[x1] and y1 in xToYs[x2])"], ["Line 19: (i in range(len(points)))", "Line 20: (j in range(i))", "Line 23: (x1 == x2 or y1 == y2)", "Line 19: (i in range(len(points)))", "Line 20: (j in range(i))"], ["Line 16: (x, y in points)", "Line 19: (i in range(len(points)))", "Line 19: (i in range(len(points)))", "Line 20: (j in range(i))", "Line 23: (x1 == x2 or y1 == y2)"], ["Line 19: (i in range(len(points)))", "Line 20: (j in range(i))", "Line 25: (y2 in xToYs[x1] and y1 in xToYs[x2])", "Line 20: (j in range(i))", "Line 23: (x1 == x2 or y1 == y2)"]]}
{"task_num": 952, "task_title": "Largest Component Size by Common Factor", "sampled_paths": [["LOOP #3: Entered for loop at line 47-51\n", "BRANCH #5: Covered if branch at line 30-31\n", "LOOP #3: Entered for loop at line 47-51\n", "BRANCH #5: Covered if branch at line 30-31\n", "LOOP #3: Entered for loop at line 47-51\n"], ["BRANCH #2: Covered if branch at line 21-22\n", "BRANCH #5: Covered if branch at line 30-31\n", "BRANCH #3: Covered elif branch at line 23-24\n", "LOOP #3: Entered for loop at line 47-51\n", "BRANCH #5: Covered if branch at line 30-31\n"], ["BRANCH #5: Covered if branch at line 30-31\n", "LOOP #3: Entered for loop at line 47-51\n", "BRANCH #5: Covered if branch at line 30-31\n", "LOOP #3: Entered for loop at line 47-51\n", "BRANCH #5: Covered if branch at line 30-31\n"], ["BRANCH #5: Covered if branch at line 30-31\n", "BRANCH #5: Covered if branch at line 30-31\n", "BRANCH #1: Covered if branch at line 19-20\n", "LOOP #1: Entered for loop at line 41-46\n", "LOOP #2: Entered for loop at line 42-46\n"], ["LOOP #2: Entered for loop at line 42-46\n", "BRANCH #6: Covered if branch at line 43-45\n", "BRANCH #5: Covered if branch at line 30-31\n", "BRANCH #5: Covered if branch at line 30-31\n", "BRANCH #1: Covered if branch at line 19-20\n"], ["LOOP #2: Entered for loop at line 42-46\n", "LOOP #2: Entered for loop at line 42-46\n", "BRANCH #6: Covered if branch at line 43-45\n", "BRANCH #5: Covered if branch at line 30-31\n", "BRANCH #3: Covered elif branch at line 23-24\n"]], "sampled_condition_paths": [["Line 47: (num in nums)", "Line 30: (self.id[u] != u)", "Line 47: (num in nums)", "Line 30: (self.id[u] != u)", "Line 47: (num in nums)"], ["Line 21: (self.rank[i] < self.rank[j])", "Line 30: (self.id[u] != u)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: (self.rank[i] > self.rank[j])", "Line 47: (num in nums)", "Line 30: (self.id[u] != u)"], ["Line 30: (self.id[u] != u)", "Line 47: (num in nums)", "Line 30: (self.id[u] != u)", "Line 47: (num in nums)", "Line 30: (self.id[u] != u)"], ["Line 30: (self.id[u] != u)", "Line 30: (self.id[u] != u)", "Line 19: (i == j)", "Line 41: (num in nums)", "Line 42: (x in range(2, int(math.sqrt(num) + 1)))"], ["Line 42: (x in range(2, int(math.sqrt(num) + 1)))", "Line 43: (num % x == 0)", "Line 30: (self.id[u] != u)", "Line 30: (self.id[u] != u)", "Line 19: (i == j)"], ["Line 42: (x in range(2, int(math.sqrt(num) + 1)))", "Line 42: (x in range(2, int(math.sqrt(num) + 1)))", "Line 43: (num % x == 0)", "Line 30: (self.id[u] != u)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: (self.rank[i] > self.rank[j])"]]}
{"task_num": 963, "task_title": "Minimum Area Rectangle II", "sampled_paths": [["LOOP #2: Entered for loop at line 18-21\n", "LOOP #2: Entered for loop at line 18-21\n", "LOOP #2: Entered for loop at line 18-21\n", "LOOP #2: Entered for loop at line 18-21\n", "LOOP #3: Entered for loop at line 25-32\n"], ["LOOP #2: Entered for loop at line 18-21\n", "LOOP #2: Entered for loop at line 18-21\n", "LOOP #1: Entered for loop at line 17-21\n", "LOOP #2: Entered for loop at line 18-21\n", "LOOP #2: Entered for loop at line 18-21\n"], ["LOOP #5: Entered for loop at line 27-32\n", "BRANCH #1: Covered if branch at line 28-31\n", "LOOP #5: Entered for loop at line 27-32\n", "BRANCH #1: Covered if branch at line 28-31\n", "LOOP #3: Entered for loop at line 25-32\n"], ["LOOP #5: Entered for loop at line 27-32\n", "BRANCH #1: Covered if branch at line 28-31\n", "LOOP #3: Entered for loop at line 25-32\n", "LOOP #4: Entered for loop at line 26-32\n", "LOOP #5: Entered for loop at line 27-32\n"], ["LOOP #4: Entered for loop at line 26-32\n", "LOOP #5: Entered for loop at line 27-32\n", "BRANCH #1: Covered if branch at line 28-31\n", "LOOP #3: Entered for loop at line 25-32\n", "LOOP #4: Entered for loop at line 26-32\n"], ["LOOP #2: Entered for loop at line 18-21\n", "LOOP #2: Entered for loop at line 18-21\n", "LOOP #2: Entered for loop at line 18-21\n", "LOOP #1: Entered for loop at line 17-21\n", "LOOP #2: Entered for loop at line 18-21\n"]], "sampled_condition_paths": [["Line 18: (bx, by in points)", "Line 18: (bx, by in points)", "Line 18: (bx, by in points)", "Line 18: (bx, by in points)", "Line 25: (points in centerToPoints.values())"], ["Line 18: (bx, by in points)", "Line 18: (bx, by in points)", "Line 17: (ax, ay in points)", "Line 18: (bx, by in points)", "Line 18: (bx, by in points)"], ["Line 27: (cx, cy, dx, dy in points)", "Line 28: ((cx - ax) * (dx - ax) + (cy - ay) * (dy - ay) == 0)", "Line 27: (cx, cy, dx, dy in points)", "Line 28: ((cx - ax) * (dx - ax) + (cy - ay) * (dy - ay) == 0)", "Line 25: (points in centerToPoints.values())"], ["Line 27: (cx, cy, dx, dy in points)", "Line 28: ((cx - ax) * (dx - ax) + (cy - ay) * (dy - ay) == 0)", "Line 25: (points in centerToPoints.values())", "Line 26: (ax, ay, _, _ in points)", "Line 27: (cx, cy, dx, dy in points)"], ["Line 26: (ax, ay, _, _ in points)", "Line 27: (cx, cy, dx, dy in points)", "Line 28: ((cx - ax) * (dx - ax) + (cy - ay) * (dy - ay) == 0)", "Line 25: (points in centerToPoints.values())", "Line 26: (ax, ay, _, _ in points)"], ["Line 18: (bx, by in points)", "Line 18: (bx, by in points)", "Line 18: (bx, by in points)", "Line 17: (ax, ay in points)", "Line 18: (bx, by in points)"]]}
{"task_num": 990, "task_title": "Satisfiability of Equality Equations", "sampled_paths": [["LOOP #1: Entered for loop at line 28-31\n", "LOOP #2: Entered for loop at line 32-35\n", "LOOP #2: Entered for loop at line 32-35\n", "BRANCH #3: Covered if branch at line 33-35\n", "BRANCH #1: Covered if branch at line 19-20\n"], ["BRANCH #2: Covered if branch at line 29-30\n", "LOOP #1: Entered for loop at line 28-31\n", "LOOP #2: Entered for loop at line 32-35\n", "LOOP #2: Entered for loop at line 32-35\n", "BRANCH #3: Covered if branch at line 33-35\n"], ["BRANCH #2: Covered if branch at line 29-30\n", "LOOP #1: Entered for loop at line 28-31\n", "BRANCH #2: Covered if branch at line 29-30\n", "BRANCH #1: Covered if branch at line 19-20\n", "LOOP #2: Entered for loop at line 32-35\n"]], "sampled_condition_paths": [["Line 28: (x, op, _, y in equations)", "Line 32: (x, op, _, y in equations)", "Line 32: (x, op, _, y in equations)", "Line 33: (op == '!')", "Line 19: (self.id[u] != u)"], ["Line 29: (op == '=')", "Line 28: (x, op, _, y in equations)", "Line 32: (x, op, _, y in equations)", "Line 32: (x, op, _, y in equations)", "Line 33: (op == '!')"], ["Line 29: (op == '=')", "Line 28: (x, op, _, y in equations)", "Line 29: (op == '=')", "Line 19: (self.id[u] != u)", "Line 32: (x, op, _, y in equations)"]]}
{"task_num": 999, "task_title": "Available Captures for Rook", "sampled_paths": [["LOOP #1: Entered for loop at line 15-20\n", "LOOP #2: Entered for loop at line 16-20\n", "LOOP #2: Entered for loop at line 16-20\n", "LOOP #2: Entered for loop at line 16-20\n", "LOOP #2: Entered for loop at line 16-20\n"], ["LOOP #2: Entered for loop at line 16-20\n", "LOOP #2: Entered for loop at line 16-20\n", "LOOP #2: Entered for loop at line 16-20\n", "LOOP #2: Entered for loop at line 16-20\n", "LOOP #2: Entered for loop at line 16-20\n"], ["LOOP #2: Entered for loop at line 16-20\n", "LOOP #2: Entered for loop at line 16-20\n", "LOOP #2: Entered for loop at line 16-20\n", "LOOP #1: Entered for loop at line 15-20\n", "LOOP #2: Entered for loop at line 16-20\n"], ["LOOP #2: Entered for loop at line 16-20\n", "LOOP #2: Entered for loop at line 16-20\n", "LOOP #1: Entered for loop at line 15-20\n", "LOOP #2: Entered for loop at line 16-20\n", "LOOP #2: Entered for loop at line 16-20\n"], ["LOOP #2: Entered for loop at line 16-20\n", "LOOP #2: Entered for loop at line 16-20\n", "LOOP #2: Entered for loop at line 16-20\n", "LOOP #2: Entered for loop at line 16-20\n", "LOOP #3: Entered for loop at line 21-31\n"]], "sampled_condition_paths": [["Line 15: (i in range(8))", "Line 16: (j in range(8))", "Line 16: (j in range(8))", "Line 16: (j in range(8))", "Line 16: (j in range(8))"], ["Line 16: (j in range(8))", "Line 16: (j in range(8))", "Line 16: (j in range(8))", "Line 16: (j in range(8))", "Line 16: (j in range(8))"], ["Line 16: (j in range(8))", "Line 16: (j in range(8))", "Line 16: (j in range(8))", "Line 15: (i in range(8))", "Line 16: (j in range(8))"], ["Line 16: (j in range(8))", "Line 16: (j in range(8))", "Line 15: (i in range(8))", "Line 16: (j in range(8))", "Line 16: (j in range(8))"], ["Line 16: (j in range(8))", "Line 16: (j in range(8))", "Line 16: (j in range(8))", "Line 16: (j in range(8))", "Line 21: (d in [[1, 0], [0, 1], [-1, 0], [0, -1]])"]]}
{"task_num": 1001, "task_title": "Grid Illumination", "sampled_paths": [["BRANCH #1: Covered if branch at line 21-26\n", "LOOP #2: Entered for loop at line 28-41\n", "BRANCH #2: Covered if branch at line 29-38\n", "LOOP #3: Entered for loop at line 31-38\n", "LOOP #4: Entered for loop at line 32-38\n"], ["BRANCH #3: Covered if branch at line 33-38\n", "LOOP #4: Entered for loop at line 32-38\n", "LOOP #4: Entered for loop at line 32-38\n", "LOOP #3: Entered for loop at line 31-38\n", "LOOP #4: Entered for loop at line 32-38\n"], ["LOOP #3: Entered for loop at line 31-38\n", "LOOP #4: Entered for loop at line 32-38\n", "LOOP #4: Entered for loop at line 32-38\n", "LOOP #4: Entered for loop at line 32-38\n", "LOOP #2: Entered for loop at line 28-41\n"], ["LOOP #4: Entered for loop at line 32-38\n", "LOOP #4: Entered for loop at line 32-38\n", "LOOP #4: Entered for loop at line 32-38\n", "LOOP #3: Entered for loop at line 31-38\n", "LOOP #4: Entered for loop at line 32-38\n"], ["BRANCH #3: Covered if branch at line 33-38\n", "LOOP #3: Entered for loop at line 31-38\n", "LOOP #4: Entered for loop at line 32-38\n", "LOOP #4: Entered for loop at line 32-38\n", "LOOP #2: Entered for loop at line 28-41\n"], ["LOOP #3: Entered for loop at line 31-38\n", "LOOP #4: Entered for loop at line 32-38\n", "BRANCH #3: Covered if branch at line 33-38\n", "LOOP #4: Entered for loop at line 32-38\n", "LOOP #4: Entered for loop at line 32-38\n"]], "sampled_condition_paths": [["Line 21: ((i, j) not in lampsSet)", "Line 28: (i, j in queries)", "Line 29: (rows[i] or cols[j] or diag1[i + j] or diag2[i - j])", "Line 31: (y in range(max(0, i - 1), min(n, i + 2)))", "Line 32: (x in range(max(0, j - 1), min(n, j + 2)))"], ["Line 33: ((y, x) in lampsSet)", "Line 32: (x in range(max(0, j - 1), min(n, j + 2)))", "Line 32: (x in range(max(0, j - 1), min(n, j + 2)))", "Line 31: (y in range(max(0, i - 1), min(n, i + 2)))", "Line 32: (x in range(max(0, j - 1), min(n, j + 2)))"], ["Line 31: (y in range(max(0, i - 1), min(n, i + 2)))", "Line 32: (x in range(max(0, j - 1), min(n, j + 2)))", "Line 32: (x in range(max(0, j - 1), min(n, j + 2)))", "Line 32: (x in range(max(0, j - 1), min(n, j + 2)))", "Line 28: (i, j in queries)"], ["Line 32: (x in range(max(0, j - 1), min(n, j + 2)))", "Line 32: (x in range(max(0, j - 1), min(n, j + 2)))", "Line 32: (x in range(max(0, j - 1), min(n, j + 2)))", "Line 31: (y in range(max(0, i - 1), min(n, i + 2)))", "Line 32: (x in range(max(0, j - 1), min(n, j + 2)))"], ["Line 33: ((y, x) in lampsSet)", "Line 31: (y in range(max(0, i - 1), min(n, i + 2)))", "Line 32: (x in range(max(0, j - 1), min(n, j + 2)))", "Line 32: (x in range(max(0, j - 1), min(n, j + 2)))", "Line 28: (i, j in queries)"], ["Line 31: (y in range(max(0, i - 1), min(n, i + 2)))", "Line 32: (x in range(max(0, j - 1), min(n, j + 2)))", "Line 33: ((y, x) in lampsSet)", "Line 32: (x in range(max(0, j - 1), min(n, j + 2)))", "Line 32: (x in range(max(0, j - 1), min(n, j + 2)))"]]}
{"task_num": 1093, "task_title": "Statistics from a Large Sample", "sampled_paths": [["LOOP #2: Entered for loop at line 29-34\n", "LOOP #2: Entered for loop at line 29-34\n", "LOOP #2: Entered for loop at line 29-34\n", "LOOP #2: Entered for loop at line 29-34\n", "LOOP #2: Entered for loop at line 29-34\n"]], "sampled_condition_paths": [["Line 29: (i, c in reversed(list(enumerate(count))))", "Line 29: (i, c in reversed(list(enumerate(count))))", "Line 29: (i, c in reversed(list(enumerate(count))))", "Line 29: (i, c in reversed(list(enumerate(count))))", "Line 29: (i, c in reversed(list(enumerate(count))))"]]}
{"task_num": 1129, "task_title": "Shortest Path with Alternating Colors", "sampled_paths": [["LOOP #2: Entered for loop at line 29-31\n", "LOOP #3: Entered while loop at line 33-44\n", "LOOP #4: Entered for loop at line 34-42\n", "BRANCH #1: Covered if branch at line 36-37\n", "LOOP #5: Entered for loop at line 38-42\n"], ["LOOP #1: Entered for loop at line 26-28\n", "LOOP #3: Entered while loop at line 33-44\n", "LOOP #4: Entered for loop at line 34-42\n", "BRANCH #1: Covered if branch at line 36-37\n", "LOOP #5: Entered for loop at line 38-42\n"], ["LOOP #3: Entered while loop at line 33-44\n", "LOOP #4: Entered for loop at line 34-42\n", "BRANCH #1: Covered if branch at line 36-37\n", "LOOP #5: Entered for loop at line 38-42\n", "LOOP #3: Entered while loop at line 33-44\n"]], "sampled_condition_paths": [["Line 29: (u, v in blueEdges)", "Line 33: (q)", "Line 34: (_ in range(len(q)))", "Line 36: (ans[u] == -1)", "Line 38: (i, (v, edgeColor) in enumerate(graph[u]))"], ["Line 26: (u, v in redEdges)", "Line 33: (q)", "Line 34: (_ in range(len(q)))", "Line 36: (ans[u] == -1)", "Line 38: (i, (v, edgeColor) in enumerate(graph[u]))"], ["Line 33: (q)", "Line 34: (_ in range(len(q)))", "Line 36: (ans[u] == -1)", "Line 38: (i, (v, edgeColor) in enumerate(graph[u]))", "Line 33: (q)"]]}
{"task_num": 1139, "task_title": "Largest 1-Bordered Square", "sampled_paths": [["LOOP #2: Entered for loop at line 20-30\n", "BRANCH #1: Covered if branch at line 21-29\n", "BRANCH #3: Covered else branch at line 24-25\n", "BRANCH #5: Covered else branch at line 28-29\n", "LOOP #3: Entered for loop at line 31-38\n"], ["BRANCH #5: Covered else branch at line 28-29\n", "LOOP #2: Entered for loop at line 20-30\n", "BRANCH #1: Covered if branch at line 21-29\n", "BRANCH #3: Covered else branch at line 24-25\n", "BRANCH #5: Covered else branch at line 28-29\n"], ["BRANCH #2: Covered if branch at line 22-23\n", "BRANCH #4: Covered if branch at line 26-27\n", "LOOP #2: Entered for loop at line 20-30\n", "BRANCH #1: Covered if branch at line 21-29\n", "BRANCH #3: Covered else branch at line 24-25\n"], ["BRANCH #3: Covered else branch at line 24-25\n", "BRANCH #4: Covered if branch at line 26-27\n", "LOOP #2: Entered for loop at line 20-30\n", "LOOP #2: Entered for loop at line 20-30\n", "LOOP #3: Entered for loop at line 31-38\n"]], "sampled_condition_paths": [["Line 20: (j in range(n))", "Line 21: (grid[i][j] == 1)", "Line 22: NOT (j==0)", "Line 24: ", "Line 26: NOT (i==0)", "Line 28: ", "Line 31: (sz in range(min(m, n), 0, -1))"], ["Line 26: NOT (i==0)", "Line 28: ", "Line 20: (j in range(n))", "Line 21: (grid[i][j] == 1)", "Line 22: NOT (j==0)", "Line 24: ", "Line 26: NOT (i==0)", "Line 28: "], ["Line 22: (j==0)", "Line 26: (i==0)", "Line 20: (j in range(n))", "Line 21: (grid[i][j] == 1)", "Line 22: NOT (j==0)", "Line 24: "], ["Line 22: NOT (j==0)", "Line 24: ", "Line 26: (i==0)", "Line 20: (j in range(n))", "Line 20: (j in range(n))", "Line 31: (sz in range(min(m, n), 0, -1))"]]}
{"task_num": 1162, "task_title": "As Far from Land as Possible", "sampled_paths": [["LOOP #4: Entered for loop at line 33-44\n", "LOOP #5: Entered for loop at line 36-44\n", "LOOP #5: Entered for loop at line 36-44\n", "LOOP #5: Entered for loop at line 36-44\n", "BRANCH #4: Covered if branch at line 39-40\n"], ["BRANCH #4: Covered if branch at line 39-40\n", "LOOP #3: Entered while loop at line 32-46\n", "LOOP #4: Entered for loop at line 33-44\n", "LOOP #5: Entered for loop at line 36-44\n", "LOOP #5: Entered for loop at line 36-44\n"], ["LOOP #2: Entered for loop at line 20-25\n", "BRANCH #1: Covered if branch at line 21-22\n", "LOOP #2: Entered for loop at line 20-25\n", "BRANCH #1: Covered if branch at line 21-22\n", "LOOP #2: Entered for loop at line 20-25\n"], ["LOOP #5: Entered for loop at line 36-44\n", "BRANCH #4: Covered if branch at line 39-40\n", "LOOP #4: Entered for loop at line 33-44\n", "LOOP #5: Entered for loop at line 36-44\n", "BRANCH #5: Covered if branch at line 41-42\n"]], "sampled_condition_paths": [["Line 33: (_ in range(len(q)))", "Line 36: (dx, dy in dirs)", "Line 36: (dx, dy in dirs)", "Line 36: (dx, dy in dirs)", "Line 39: (x < 0 or x == m or y < 0 or y == n)"], ["Line 39: (x < 0 or x == m or y < 0 or y == n)", "Line 32: (q)", "Line 33: (_ in range(len(q)))", "Line 36: (dx, dy in dirs)", "Line 36: (dx, dy in dirs)"], ["Line 20: (j in range(n))", "Line 21: (grid[i][j] == 0)", "Line 20: (j in range(n))", "Line 21: (grid[i][j] == 0)", "Line 20: (j in range(n))"], ["Line 36: (dx, dy in dirs)", "Line 39: (x < 0 or x == m or y < 0 or y == n)", "Line 33: (_ in range(len(q)))", "Line 36: (dx, dy in dirs)", "Line 41: (grid[x][y] > 0)"]]}
{"task_num": 1202, "task_title": "Smallest String With Swaps", "sampled_paths": [["BRANCH #5: Covered if branch at line 30-31\n", "LOOP #2: Entered for loop at line 44-46\n", "BRANCH #5: Covered if branch at line 30-31\n", "LOOP #2: Entered for loop at line 44-46\n", "LOOP #2: Entered for loop at line 44-46\n"], ["BRANCH #5: Covered if branch at line 30-31\n", "LOOP #3: Entered for loop at line 47-49\n", "LOOP #4: Entered for loop at line 50-52\n", "BRANCH #5: Covered if branch at line 30-31\n", "LOOP #4: Entered for loop at line 50-52\n"], ["BRANCH #5: Covered if branch at line 30-31\n", "LOOP #2: Entered for loop at line 44-46\n", "LOOP #2: Entered for loop at line 44-46\n", "LOOP #3: Entered for loop at line 47-49\n", "LOOP #3: Entered for loop at line 47-49\n"], ["BRANCH #5: Covered if branch at line 30-31\n", "LOOP #2: Entered for loop at line 44-46\n", "LOOP #2: Entered for loop at line 44-46\n", "BRANCH #5: Covered if branch at line 30-31\n", "LOOP #3: Entered for loop at line 47-49\n"], ["LOOP #2: Entered for loop at line 44-46\n", "BRANCH #5: Covered if branch at line 30-31\n", "LOOP #3: Entered for loop at line 47-49\n", "LOOP #4: Entered for loop at line 50-52\n", "BRANCH #5: Covered if branch at line 30-31\n"], ["BRANCH #4: Covered else branch at line 25-27\n", "LOOP #1: Entered for loop at line 41-43\n", "BRANCH #4: Covered else branch at line 25-27\n", "LOOP #1: Entered for loop at line 41-43\n", "BRANCH #5: Covered if branch at line 30-31\n"]], "sampled_condition_paths": [["Line 30: (self.id[u] != u)", "Line 44: (i, c in enumerate(s))", "Line 30: (self.id[u] != u)", "Line 44: (i, c in enumerate(s))", "Line 44: (i, c in enumerate(s))"], ["Line 30: (self.id[u] != u)", "Line 47: (key in map.keys())", "Line 50: (i in range(len(s)))", "Line 30: (self.id[u] != u)", "Line 50: (i in range(len(s)))"], ["Line 30: (self.id[u] != u)", "Line 44: (i, c in enumerate(s))", "Line 44: (i, c in enumerate(s))", "Line 47: (key in map.keys())", "Line 47: (key in map.keys())"], ["Line 30: (self.id[u] != u)", "Line 44: (i, c in enumerate(s))", "Line 44: (i, c in enumerate(s))", "Line 30: (self.id[u] != u)", "Line 47: (key in map.keys())"], ["Line 44: (i, c in enumerate(s))", "Line 30: (self.id[u] != u)", "Line 47: (key in map.keys())", "Line 50: (i in range(len(s)))", "Line 30: (self.id[u] != u)"], ["Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: NOT (self.rank[i] > self.rank[j])", "Line 25: ", "Line 41: (a, b in pairs)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: NOT (self.rank[i] > self.rank[j])", "Line 25: ", "Line 41: (a, b in pairs)", "Line 30: (self.id[u] != u)"]]}
{"task_num": 1210, "task_title": "Minimum Moves to Reach Target with Rotations", "sampled_paths": [["LOOP #2: Entered for loop at line 46-59\n", "BRANCH #4: Covered if branch at line 50-52\n", "BRANCH #2: Covered if branch at line 33-34\n", "BRANCH #6: Covered if branch at line 57-59\n", "LOOP #1: Entered while loop at line 45-61\n"], ["LOOP #2: Entered for loop at line 46-59\n", "BRANCH #2: Covered if branch at line 33-34\n", "LOOP #1: Entered while loop at line 45-61\n", "LOOP #2: Entered for loop at line 46-59\n", "BRANCH #3: Covered if branch at line 48-49\n"], ["BRANCH #1: Covered if branch at line 28-29\n", "BRANCH #5: Covered if branch at line 53-55\n", "BRANCH #6: Covered if branch at line 57-59\n", "LOOP #2: Entered for loop at line 46-59\n", "BRANCH #4: Covered if branch at line 50-52\n"], ["BRANCH #4: Covered if branch at line 50-52\n", "BRANCH #2: Covered if branch at line 33-34\n", "LOOP #2: Entered for loop at line 46-59\n", "BRANCH #2: Covered if branch at line 33-34\n", "LOOP #1: Entered while loop at line 45-61\n"]], "sampled_condition_paths": [["Line 46: (_ in range(len(q)))", "Line 50: (canMoveRight(x, y, pos) and (x, y + 1, pos) not in seen)", "Line 33: (pos == Pos.kVertical)", "Line 57: ((canRotateClockwise(x, y, pos) or canRotateCounterclockwise(x, y, pos)) and (x, y, newPos) not in seen)", "Line 45: (q)"], ["Line 46: (_ in range(len(q)))", "Line 33: (pos == Pos.kVertical)", "Line 45: (q)", "Line 46: (_ in range(len(q)))", "Line 48: (x == n - 1 and y == n - 2 and pos == Pos.kHorizontal)"], ["Line 28: (pos == Pos.kHorizontal)", "Line 53: (canMoveDown(x, y, pos) and (x + 1, y, pos) not in seen)", "Line 57: ((canRotateClockwise(x, y, pos) or canRotateCounterclockwise(x, y, pos)) and (x, y, newPos) not in seen)", "Line 46: (_ in range(len(q)))", "Line 50: (canMoveRight(x, y, pos) and (x, y + 1, pos) not in seen)"], ["Line 50: (canMoveRight(x, y, pos) and (x, y + 1, pos) not in seen)", "Line 33: (pos == Pos.kVertical)", "Line 46: (_ in range(len(q)))", "Line 33: (pos == Pos.kVertical)", "Line 45: (q)"]]}
{"task_num": 1253, "task_title": "Reconstruct a 2-Row Binary Matrix", "sampled_paths": [["BRANCH #3: Covered if branch at line 21-25\n", "LOOP #1: Entered for loop at line 20-26\n", "LOOP #1: Entered for loop at line 20-26\n", "LOOP #2: Entered for loop at line 27-35\n", "LOOP #2: Entered for loop at line 27-35\n"], ["BRANCH #4: Covered if branch at line 28-31\n", "LOOP #2: Entered for loop at line 27-35\n", "BRANCH #4: Covered if branch at line 28-31\n", "LOOP #2: Entered for loop at line 27-35\n", "BRANCH #5: Covered if branch at line 32-34\n"], ["LOOP #1: Entered for loop at line 20-26\n", "LOOP #2: Entered for loop at line 27-35\n", "BRANCH #4: Covered if branch at line 28-31\n", "LOOP #2: Entered for loop at line 27-35\n", "BRANCH #4: Covered if branch at line 28-31\n"], ["LOOP #1: Entered for loop at line 20-26\n", "LOOP #1: Entered for loop at line 20-26\n", "LOOP #1: Entered for loop at line 20-26\n", "BRANCH #3: Covered if branch at line 21-25\n", "LOOP #1: Entered for loop at line 20-26\n"], ["BRANCH #1: Covered if branch at line 13-14\n"]], "sampled_condition_paths": [["Line 21: (c == 2)", "Line 20: (j, c in enumerate(colsum))", "Line 20: (j, c in enumerate(colsum))", "Line 27: (j, c in enumerate(colsum))", "Line 27: (j, c in enumerate(colsum))"], ["Line 28: (c == 1 and upper > 0)", "Line 27: (j, c in enumerate(colsum))", "Line 28: (c == 1 and upper > 0)", "Line 27: (j, c in enumerate(colsum))", "Line 32: (c == 1 and lower > 0)"], ["Line 20: (j, c in enumerate(colsum))", "Line 27: (j, c in enumerate(colsum))", "Line 28: (c == 1 and upper > 0)", "Line 27: (j, c in enumerate(colsum))", "Line 28: (c == 1 and upper > 0)"], ["Line 20: (j, c in enumerate(colsum))", "Line 20: (j, c in enumerate(colsum))", "Line 20: (j, c in enumerate(colsum))", "Line 21: (c == 2)", "Line 20: (j, c in enumerate(colsum))"], ["Line 13: (upper + lower != sum(colsum))"]]}
{"task_num": 1254, "task_title": "Number of Closed Islands", "sampled_paths": [["BRANCH #3: Covered if branch at line 30-32\n", "BRANCH #4: Covered if branch at line 31-32\n", "BRANCH #2: Covered if branch at line 19-20\n", "BRANCH #2: Covered if branch at line 19-20\n", "BRANCH #1: Covered if branch at line 17-18\n"], ["LOOP #4: Entered for loop at line 37-41\n", "LOOP #4: Entered for loop at line 37-41\n", "LOOP #4: Entered for loop at line 37-41\n", "LOOP #4: Entered for loop at line 37-41\n", "LOOP #4: Entered for loop at line 37-41\n"], ["BRANCH #1: Covered if branch at line 17-18\n", "BRANCH #2: Covered if branch at line 19-20\n", "BRANCH #2: Covered if branch at line 19-20\n", "BRANCH #1: Covered if branch at line 17-18\n", "BRANCH #2: Covered if branch at line 19-20\n"], ["BRANCH #2: Covered if branch at line 19-20\n", "BRANCH #2: Covered if branch at line 19-20\n", "BRANCH #1: Covered if branch at line 17-18\n", "BRANCH #1: Covered if branch at line 17-18\n", "BRANCH #2: Covered if branch at line 19-20\n"], ["BRANCH #2: Covered if branch at line 19-20\n", "BRANCH #2: Covered if branch at line 19-20\n", "LOOP #4: Entered for loop at line 37-41\n", "LOOP #4: Entered for loop at line 37-41\n", "LOOP #4: Entered for loop at line 37-41\n"], ["BRANCH #1: Covered if branch at line 17-18\n", "BRANCH #2: Covered if branch at line 19-20\n", "LOOP #3: Entered for loop at line 36-41\n", "LOOP #4: Entered for loop at line 37-41\n", "LOOP #4: Entered for loop at line 37-41\n"]], "sampled_condition_paths": [["Line 30: (i * j == 0 or i == m - 1 or j == n - 1)", "Line 31: (grid[i][j] == 0)", "Line 19: (grid[i][j] == 1)", "Line 19: (grid[i][j] == 1)", "Line 17: (i < 0 or i == m or j < 0 or j == n)"], ["Line 37: (j in range(n))", "Line 37: (j in range(n))", "Line 37: (j in range(n))", "Line 37: (j in range(n))", "Line 37: (j in range(n))"], ["Line 17: (i < 0 or i == m or j < 0 or j == n)", "Line 19: (grid[i][j] == 1)", "Line 19: (grid[i][j] == 1)", "Line 17: (i < 0 or i == m or j < 0 or j == n)", "Line 19: (grid[i][j] == 1)"], ["Line 19: (grid[i][j] == 1)", "Line 19: (grid[i][j] == 1)", "Line 17: (i < 0 or i == m or j < 0 or j == n)", "Line 17: (i < 0 or i == m or j < 0 or j == n)", "Line 19: (grid[i][j] == 1)"], ["Line 19: (grid[i][j] == 1)", "Line 19: (grid[i][j] == 1)", "Line 37: (j in range(n))", "Line 37: (j in range(n))", "Line 37: (j in range(n))"], ["Line 17: (i < 0 or i == m or j < 0 or j == n)", "Line 19: (grid[i][j] == 1)", "Line 36: (i in range(m))", "Line 37: (j in range(n))", "Line 37: (j in range(n))"]]}
{"task_num": 1263, "task_title": "Minimum Moves to Move a Box to Their Target Location", "sampled_paths": [["LOOP #2: Entered for loop at line 15-22\n", "LOOP #2: Entered for loop at line 15-22\n", "LOOP #1: Entered for loop at line 14-22\n", "LOOP #2: Entered for loop at line 15-22\n", "LOOP #2: Entered for loop at line 15-22\n"], ["LOOP #1: Entered for loop at line 14-22\n", "LOOP #2: Entered for loop at line 15-22\n", "LOOP #2: Entered for loop at line 15-22\n", "LOOP #2: Entered for loop at line 15-22\n", "LOOP #2: Entered for loop at line 15-22\n"]], "sampled_condition_paths": [["Line 15: (j in range(len(grid[0])))", "Line 15: (j in range(len(grid[0])))", "Line 14: (i in range(len(grid)))", "Line 15: (j in range(len(grid[0])))", "Line 15: (j in range(len(grid[0])))"], ["Line 14: (i in range(len(grid)))", "Line 15: (j in range(len(grid[0])))", "Line 15: (j in range(len(grid[0])))", "Line 15: (j in range(len(grid[0])))", "Line 15: (j in range(len(grid[0])))"]]}
{"task_num": 1267, "task_title": "Count Servers that Communicate", "sampled_paths": [["BRANCH #1: Covered if branch at line 21-23\n", "LOOP #2: Entered for loop at line 20-24\n", "LOOP #1: Entered for loop at line 19-24\n", "LOOP #2: Entered for loop at line 20-24\n", "LOOP #2: Entered for loop at line 20-24\n"], ["BRANCH #1: Covered if branch at line 21-23\n", "LOOP #2: Entered for loop at line 20-24\n", "LOOP #2: Entered for loop at line 20-24\n", "LOOP #1: Entered for loop at line 19-24\n", "LOOP #2: Entered for loop at line 20-24\n"], ["LOOP #4: Entered for loop at line 26-29\n", "LOOP #4: Entered for loop at line 26-29\n", "LOOP #3: Entered for loop at line 25-29\n", "LOOP #4: Entered for loop at line 26-29\n", "LOOP #4: Entered for loop at line 26-29\n"], ["LOOP #4: Entered for loop at line 26-29\n", "BRANCH #2: Covered if branch at line 27-28\n", "LOOP #4: Entered for loop at line 26-29\n", "LOOP #3: Entered for loop at line 25-29\n", "LOOP #4: Entered for loop at line 26-29\n"], ["BRANCH #1: Covered if branch at line 21-23\n", "LOOP #3: Entered for loop at line 25-29\n", "LOOP #4: Entered for loop at line 26-29\n", "BRANCH #2: Covered if branch at line 27-28\n", "LOOP #4: Entered for loop at line 26-29\n"]], "sampled_condition_paths": [["Line 21: (grid[i][j] == 1)", "Line 20: (j in range(n))", "Line 19: (i in range(m))", "Line 20: (j in range(n))", "Line 20: (j in range(n))"], ["Line 21: (grid[i][j] == 1)", "Line 20: (j in range(n))", "Line 20: (j in range(n))", "Line 19: (i in range(m))", "Line 20: (j in range(n))"], ["Line 26: (j in range(n))", "Line 26: (j in range(n))", "Line 25: (i in range(m))", "Line 26: (j in range(n))", "Line 26: (j in range(n))"], ["Line 26: (j in range(n))", "Line 27: (grid[i][j] == 1 and (rows[i] > 1 or cols[j] > 1))", "Line 26: (j in range(n))", "Line 25: (i in range(m))", "Line 26: (j in range(n))"], ["Line 21: (grid[i][j] == 1)", "Line 25: (i in range(m))", "Line 26: (j in range(n))", "Line 27: (grid[i][j] == 1 and (rows[i] > 1 or cols[j] > 1))", "Line 26: (j in range(n))"]]}
{"task_num": 1284, "task_title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix", "sampled_paths": [["BRANCH #2: Covered if branch at line 34-35\n", "LOOP #5: Entered for loop at line 31-36\n", "LOOP #4: Entered for loop at line 29-43\n", "LOOP #5: Entered for loop at line 31-36\n", "BRANCH #2: Covered if branch at line 34-35\n"], ["BRANCH #2: Covered if branch at line 34-35\n", "LOOP #5: Entered for loop at line 31-36\n", "LOOP #5: Entered for loop at line 31-36\n", "LOOP #1: Entered while loop at line 24-43\n", "LOOP #2: Entered for loop at line 26-43\n"], ["LOOP #5: Entered for loop at line 31-36\n", "BRANCH #2: Covered if branch at line 34-35\n", "LOOP #5: Entered for loop at line 31-36\n", "LOOP #4: Entered for loop at line 29-43\n", "LOOP #5: Entered for loop at line 31-36\n"], ["LOOP #6: Entered for loop at line 48-51\n", "LOOP #7: Entered for loop at line 49-51\n", "BRANCH #1: Covered if branch at line 16-17\n"], ["BRANCH #4: Covered if branch at line 39-40\n", "LOOP #4: Entered for loop at line 29-43\n", "LOOP #5: Entered for loop at line 31-36\n", "LOOP #5: Entered for loop at line 31-36\n", "BRANCH #2: Covered if branch at line 34-35\n"]], "sampled_condition_paths": [["Line 34: (x < 0 or x == m or y < 0 or y == n)", "Line 31: (dx, dy in dirs)", "Line 29: (j in range(n))", "Line 31: (dx, dy in dirs)", "Line 34: (x < 0 or x == m or y < 0 or y == n)"], ["Line 34: (x < 0 or x == m or y < 0 or y == n)", "Line 31: (dx, dy in dirs)", "Line 31: (dx, dy in dirs)", "Line 24: (q)", "Line 26: (_ in range(len(q)))"], ["Line 31: (dx, dy in dirs)", "Line 34: (x < 0 or x == m or y < 0 or y == n)", "Line 31: (dx, dy in dirs)", "Line 29: (j in range(n))", "Line 31: (dx, dy in dirs)"], ["Line 48: (i in range(m))", "Line 49: (j in range(n))", "Line 16: (hash == 0)"], ["Line 39: (next in seen)", "Line 29: (j in range(n))", "Line 31: (dx, dy in dirs)", "Line 31: (dx, dy in dirs)", "Line 34: (x < 0 or x == m or y < 0 or y == n)"]]}
{"task_num": 1293, "task_title": "Shortest Path in a Grid with Obstacles Elimination", "sampled_paths": [["BRANCH #5: Covered if branch at line 37-38\n", "LOOP #3: Entered for loop at line 27-41\n", "BRANCH #5: Covered if branch at line 37-38\n", "LOOP #2: Entered for loop at line 25-41\n", "LOOP #3: Entered for loop at line 27-41\n"], ["BRANCH #4: Covered if branch at line 34-35\n", "LOOP #3: Entered for loop at line 27-41\n", "LOOP #3: Entered for loop at line 27-41\n", "BRANCH #2: Covered if branch at line 30-31\n", "LOOP #3: Entered for loop at line 27-41\n"], ["LOOP #3: Entered for loop at line 27-41\n", "BRANCH #2: Covered if branch at line 30-31\n", "LOOP #3: Entered for loop at line 27-41\n", "BRANCH #2: Covered if branch at line 30-31\n", "LOOP #1: Entered while loop at line 23-41\n"], ["BRANCH #4: Covered if branch at line 34-35\n", "LOOP #3: Entered for loop at line 27-41\n", "LOOP #3: Entered for loop at line 27-41\n", "BRANCH #2: Covered if branch at line 30-31\n", "LOOP #2: Entered for loop at line 25-41\n"]], "sampled_condition_paths": [["Line 37: ((x, y, newEliminate) in seen)", "Line 27: (l in range(4))", "Line 37: ((x, y, newEliminate) in seen)", "Line 25: (_ in range(len(q)))", "Line 27: (l in range(4))"], ["Line 34: (grid[x][y] == 1 and eliminate == 0)", "Line 27: (l in range(4))", "Line 27: (l in range(4))", "Line 30: (x < 0 or x == m or y < 0 or y == n)", "Line 27: (l in range(4))"], ["Line 27: (l in range(4))", "Line 30: (x < 0 or x == m or y < 0 or y == n)", "Line 27: (l in range(4))", "Line 30: (x < 0 or x == m or y < 0 or y == n)", "Line 23: (q)"], ["Line 34: (grid[x][y] == 1 and eliminate == 0)", "Line 27: (l in range(4))", "Line 27: (l in range(4))", "Line 30: (x < 0 or x == m or y < 0 or y == n)", "Line 25: (_ in range(len(q)))"]]}
{"task_num": 1301, "task_title": "Number of Paths with Max Score", "sampled_paths": [["LOOP #2: Entered for loop at line 24-40\n", "LOOP #3: Entered for loop at line 27-36\n", "BRANCH #3: Covered elif branch at line 33-35\n", "LOOP #3: Entered for loop at line 27-36\n", "BRANCH #2: Covered if branch at line 30-32\n"], ["BRANCH #2: Covered if branch at line 30-32\n", "LOOP #3: Entered for loop at line 27-36\n", "BRANCH #4: Covered if branch at line 37-39\n", "LOOP #2: Entered for loop at line 24-40\n", "LOOP #3: Entered for loop at line 27-36\n"], ["LOOP #2: Entered for loop at line 24-40\n", "LOOP #3: Entered for loop at line 27-36\n", "BRANCH #2: Covered if branch at line 30-32\n", "LOOP #3: Entered for loop at line 27-36\n", "LOOP #3: Entered for loop at line 27-36\n"], ["BRANCH #3: Covered elif branch at line 33-35\n", "LOOP #3: Entered for loop at line 27-36\n", "BRANCH #2: Covered if branch at line 30-32\n", "LOOP #3: Entered for loop at line 27-36\n", "BRANCH #4: Covered if branch at line 37-39\n"], ["LOOP #3: Entered for loop at line 27-36\n", "LOOP #3: Entered for loop at line 27-36\n", "BRANCH #4: Covered if branch at line 37-39\n", "LOOP #2: Entered for loop at line 24-40\n", "LOOP #3: Entered for loop at line 27-36\n"]], "sampled_condition_paths": [["Line 24: (j in reversed(range(n)))", "Line 27: (dx, dy in dirs)", "Line 30: NOT (dp[i][j] < dp[x][y])", "Line 33: (dp[i][j] == dp[x][y])", "Line 27: (dx, dy in dirs)", "Line 30: (dp[i][j] < dp[x][y])"], ["Line 30: (dp[i][j] < dp[x][y])", "Line 27: (dx, dy in dirs)", "Line 37: (dp[i][j] != -1 and board[i][j] != 'E')", "Line 24: (j in reversed(range(n)))", "Line 27: (dx, dy in dirs)"], ["Line 24: (j in reversed(range(n)))", "Line 27: (dx, dy in dirs)", "Line 30: (dp[i][j] < dp[x][y])", "Line 27: (dx, dy in dirs)", "Line 27: (dx, dy in dirs)"], ["Line 30: NOT (dp[i][j] < dp[x][y])", "Line 33: (dp[i][j] == dp[x][y])", "Line 27: (dx, dy in dirs)", "Line 30: (dp[i][j] < dp[x][y])", "Line 27: (dx, dy in dirs)", "Line 37: (dp[i][j] != -1 and board[i][j] != 'E')"], ["Line 27: (dx, dy in dirs)", "Line 27: (dx, dy in dirs)", "Line 37: (dp[i][j] != -1 and board[i][j] != 'E')", "Line 24: (j in reversed(range(n)))", "Line 27: (dx, dy in dirs)"]]}
{"task_num": 1334, "task_title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance", "sampled_paths": [["LOOP #6: Entered for loop at line 37-39\n", "LOOP #6: Entered for loop at line 37-39\n", "LOOP #5: Entered for loop at line 36-39\n", "LOOP #6: Entered for loop at line 37-39\n", "LOOP #6: Entered for loop at line 37-39\n"], ["LOOP #6: Entered for loop at line 37-39\n", "LOOP #6: Entered for loop at line 37-39\n", "LOOP #6: Entered for loop at line 37-39\n", "LOOP #6: Entered for loop at line 37-39\n", "LOOP #6: Entered for loop at line 37-39\n"], ["LOOP #6: Entered for loop at line 37-39\n", "LOOP #6: Entered for loop at line 37-39\n", "LOOP #6: Entered for loop at line 37-39\n", "LOOP #6: Entered for loop at line 37-39\n", "LOOP #5: Entered for loop at line 36-39\n"], ["LOOP #6: Entered for loop at line 37-39\n", "LOOP #4: Entered for loop at line 35-39\n", "LOOP #5: Entered for loop at line 36-39\n", "LOOP #6: Entered for loop at line 37-39\n", "LOOP #6: Entered for loop at line 37-39\n"]], "sampled_condition_paths": [["Line 37: (j in range(n))", "Line 37: (j in range(n))", "Line 36: (i in range(n))", "Line 37: (j in range(n))", "Line 37: (j in range(n))"], ["Line 37: (j in range(n))", "Line 37: (j in range(n))", "Line 37: (j in range(n))", "Line 37: (j in range(n))", "Line 37: (j in range(n))"], ["Line 37: (j in range(n))", "Line 37: (j in range(n))", "Line 37: (j in range(n))", "Line 37: (j in range(n))", "Line 36: (i in range(n))"], ["Line 37: (j in range(n))", "Line 35: (k in range(n))", "Line 36: (i in range(n))", "Line 37: (j in range(n))", "Line 37: (j in range(n))"]]}
{"task_num": 1340, "task_title": "Jump Game V", "sampled_paths": [["LOOP #2: Entered while loop at line 18-26\n", "LOOP #4: Entered for loop at line 22-26\n", "BRANCH #1: Covered if branch at line 23-24\n", "BRANCH #2: Covered if branch at line 25-26\n", "LOOP #1: Entered for loop at line 17-28\n"], ["LOOP #2: Entered while loop at line 18-26\n", "LOOP #4: Entered for loop at line 22-26\n", "BRANCH #2: Covered if branch at line 25-26\n", "LOOP #2: Entered while loop at line 18-26\n", "LOOP #4: Entered for loop at line 22-26\n"], ["LOOP #2: Entered while loop at line 18-26\n", "LOOP #3: Entered while loop at line 20-21\n", "LOOP #3: Entered while loop at line 20-21\n", "LOOP #3: Entered while loop at line 20-21\n", "LOOP #3: Entered while loop at line 20-21\n"], ["LOOP #4: Entered for loop at line 22-26\n", "BRANCH #2: Covered if branch at line 25-26\n", "LOOP #2: Entered while loop at line 18-26\n", "LOOP #4: Entered for loop at line 22-26\n", "BRANCH #2: Covered if branch at line 25-26\n"], ["BRANCH #1: Covered if branch at line 23-24\n", "BRANCH #2: Covered if branch at line 25-26\n", "LOOP #1: Entered for loop at line 17-28\n", "LOOP #2: Entered while loop at line 18-26\n", "LOOP #4: Entered for loop at line 22-26\n"], ["LOOP #4: Entered for loop at line 22-26\n", "LOOP #4: Entered for loop at line 22-26\n", "LOOP #4: Entered for loop at line 22-26\n", "LOOP #4: Entered for loop at line 22-26\n", "LOOP #4: Entered for loop at line 22-26\n"]], "sampled_condition_paths": [["Line 18: (stack and (i == n or arr[stack[-1]] < arr[i]))", "Line 22: (j in indices)", "Line 23: (i < n and i - j <= d)", "Line 25: (stack and j - stack[-1] <= d)", "Line 17: (i in range(n + 1))"], ["Line 18: (stack and (i == n or arr[stack[-1]] < arr[i]))", "Line 22: (j in indices)", "Line 25: (stack and j - stack[-1] <= d)", "Line 18: (stack and (i == n or arr[stack[-1]] < arr[i]))", "Line 22: (j in indices)"], ["Line 18: (stack and (i == n or arr[stack[-1]] < arr[i]))", "Line 20: (stack and arr[stack[-1]] == arr[indices[0]])", "Line 20: (stack and arr[stack[-1]] == arr[indices[0]])", "Line 20: (stack and arr[stack[-1]] == arr[indices[0]])", "Line 20: (stack and arr[stack[-1]] == arr[indices[0]])"], ["Line 22: (j in indices)", "Line 25: (stack and j - stack[-1] <= d)", "Line 18: (stack and (i == n or arr[stack[-1]] < arr[i]))", "Line 22: (j in indices)", "Line 25: (stack and j - stack[-1] <= d)"], ["Line 23: (i < n and i - j <= d)", "Line 25: (stack and j - stack[-1] <= d)", "Line 17: (i in range(n + 1))", "Line 18: (stack and (i == n or arr[stack[-1]] < arr[i]))", "Line 22: (j in indices)"], ["Line 22: (j in indices)", "Line 22: (j in indices)", "Line 22: (j in indices)", "Line 22: (j in indices)", "Line 22: (j in indices)"]]}
{"task_num": 1345, "task_title": "Jump Game IV", "sampled_paths": [["LOOP #4: Entered for loop at line 33-36\n", "LOOP #4: Entered for loop at line 33-36\n", "LOOP #4: Entered for loop at line 33-36\n", "BRANCH #4: Covered if branch at line 34-35\n", "LOOP #3: Entered for loop at line 23-37\n"], ["LOOP #1: Entered for loop at line 19-21\n", "LOOP #2: Entered while loop at line 22-39\n", "LOOP #3: Entered for loop at line 23-37\n", "BRANCH #1: Covered if branch at line 25-26\n"], ["LOOP #1: Entered for loop at line 19-21\n", "LOOP #2: Entered while loop at line 22-39\n", "LOOP #3: Entered for loop at line 23-37\n", "BRANCH #2: Covered if branch at line 29-30\n", "LOOP #4: Entered for loop at line 33-36\n"], ["BRANCH #4: Covered if branch at line 34-35\n", "LOOP #4: Entered for loop at line 33-36\n", "BRANCH #4: Covered if branch at line 34-35\n", "LOOP #3: Entered for loop at line 23-37\n", "BRANCH #1: Covered if branch at line 25-26\n"], ["LOOP #1: Entered for loop at line 19-21\n", "LOOP #1: Entered for loop at line 19-21\n", "LOOP #1: Entered for loop at line 19-21\n", "LOOP #1: Entered for loop at line 19-21\n", "LOOP #1: Entered for loop at line 19-21\n"]], "sampled_condition_paths": [["Line 33: (v in graph[u])", "Line 33: (v in graph[u])", "Line 33: (v in graph[u])", "Line 34: (v in seen)", "Line 23: (_ in range(len(q)))"], ["Line 19: (i, a in enumerate(arr))", "Line 22: (q)", "Line 23: (_ in range(len(q)))", "Line 25: (i == n - 1)"], ["Line 19: (i, a in enumerate(arr))", "Line 22: (q)", "Line 23: (_ in range(len(q)))", "Line 29: (i + 1 < n)", "Line 33: (v in graph[u])"], ["Line 34: (v in seen)", "Line 33: (v in graph[u])", "Line 34: (v in seen)", "Line 23: (_ in range(len(q)))", "Line 25: (i == n - 1)"], ["Line 19: (i, a in enumerate(arr))", "Line 19: (i, a in enumerate(arr))", "Line 19: (i, a in enumerate(arr))", "Line 19: (i, a in enumerate(arr))", "Line 19: (i, a in enumerate(arr))"]]}
{"task_num": 1377, "task_title": "Frog Position After T Seconds", "sampled_paths": [["BRANCH #1: Covered if branch at line 30-31\n", "LOOP #4: Entered for loop at line 29-34\n", "LOOP #4: Entered for loop at line 29-34\n", "BRANCH #2: Covered if branch at line 35-36\n", "LOOP #3: Entered for loop at line 26-37\n"], ["LOOP #1: Entered for loop at line 21-24\n", "LOOP #1: Entered for loop at line 21-24\n", "LOOP #1: Entered for loop at line 21-24\n", "LOOP #1: Entered for loop at line 21-24\n", "LOOP #1: Entered for loop at line 21-24\n"], ["BRANCH #2: Covered if branch at line 35-36\n", "LOOP #2: Entered for loop at line 25-37\n", "LOOP #3: Entered for loop at line 26-37\n", "LOOP #4: Entered for loop at line 29-34\n", "BRANCH #1: Covered if branch at line 30-31\n"], ["LOOP #3: Entered for loop at line 26-37\n", "LOOP #4: Entered for loop at line 29-34\n", "LOOP #4: Entered for loop at line 29-34\n", "LOOP #4: Entered for loop at line 29-34\n", "BRANCH #2: Covered if branch at line 35-36\n"]], "sampled_condition_paths": [["Line 30: (seen[b])", "Line 29: (b in tree[a])", "Line 29: (b in tree[a])", "Line 35: (nChildren > 0)", "Line 26: (_ in range(len(q)))"], ["Line 21: (u, v in edges)", "Line 21: (u, v in edges)", "Line 21: (u, v in edges)", "Line 21: (u, v in edges)", "Line 21: (u, v in edges)"], ["Line 35: (nChildren > 0)", "Line 25: (_ in range(t))", "Line 26: (_ in range(len(q)))", "Line 29: (b in tree[a])", "Line 30: (seen[b])"], ["Line 26: (_ in range(len(q)))", "Line 29: (b in tree[a])", "Line 29: (b in tree[a])", "Line 29: (b in tree[a])", "Line 35: (nChildren > 0)"]]}
{"task_num": 1417, "task_title": "Reformat The String", "sampled_paths": [["BRANCH #1: Covered if branch at line 15-16\n", "LOOP #1: Entered for loop at line 14-16\n", "BRANCH #1: Covered if branch at line 15-16\n", "LOOP #1: Entered for loop at line 14-16\n", "BRANCH #1: Covered if branch at line 15-16\n"], ["BRANCH #1: Covered if branch at line 15-16\n", "LOOP #1: Entered for loop at line 14-16\n", "LOOP #1: Entered for loop at line 14-16\n", "BRANCH #1: Covered if branch at line 15-16\n", "LOOP #1: Entered for loop at line 14-16\n"], ["LOOP #1: Entered for loop at line 14-16\n", "BRANCH #1: Covered if branch at line 15-16\n", "LOOP #1: Entered for loop at line 14-16\n", "LOOP #1: Entered for loop at line 14-16\n", "BRANCH #1: Covered if branch at line 15-16\n"], ["BRANCH #1: Covered if branch at line 15-16\n", "LOOP #2: Entered for loop at line 18-21\n", "LOOP #2: Entered for loop at line 18-21\n", "LOOP #2: Entered for loop at line 18-21\n", "LOOP #2: Entered for loop at line 18-21\n"], ["LOOP #2: Entered for loop at line 18-21\n", "BRANCH #2: Covered if branch at line 19-20\n", "LOOP #2: Entered for loop at line 18-21\n", "BRANCH #2: Covered if branch at line 19-20\n", "LOOP #2: Entered for loop at line 18-21\n"], ["BRANCH #2: Covered if branch at line 19-20\n", "LOOP #2: Entered for loop at line 18-21\n", "BRANCH #2: Covered if branch at line 19-20\n", "LOOP #2: Entered for loop at line 18-21\n", "BRANCH #2: Covered if branch at line 19-20\n"]], "sampled_condition_paths": [["Line 15: (c.isalpha())", "Line 14: (c in s)", "Line 15: (c.isalpha())", "Line 14: (c in s)", "Line 15: (c.isalpha())"], ["Line 15: (c.isalpha())", "Line 14: (c in s)", "Line 14: (c in s)", "Line 15: (c.isalpha())", "Line 14: (c in s)"], ["Line 14: (c in s)", "Line 15: (c.isalpha())", "Line 14: (c in s)", "Line 14: (c in s)", "Line 15: (c.isalpha())"], ["Line 15: (c.isalpha())", "Line 18: (c in s)", "Line 18: (c in s)", "Line 18: (c in s)", "Line 18: (c in s)"], ["Line 18: (c in s)", "Line 19: (c.isdigit())", "Line 18: (c in s)", "Line 19: (c.isdigit())", "Line 18: (c in s)"], ["Line 19: (c.isdigit())", "Line 18: (c in s)", "Line 19: (c.isdigit())", "Line 18: (c in s)", "Line 19: (c.isdigit())"]]}
{"task_num": 1462, "task_title": "Course Schedule IV", "sampled_paths": [["LOOP #2: Entered for loop at line 19-21\n", "LOOP #2: Entered for loop at line 19-21\n"], ["LOOP #1: Entered for loop at line 16-18\n", "LOOP #2: Entered for loop at line 19-21\n", "LOOP #2: Entered for loop at line 19-21\n", "LOOP #3: Entered for loop at line 25-30\n"], ["LOOP #1: Entered for loop at line 16-18\n", "LOOP #2: Entered for loop at line 19-21\n", "LOOP #2: Entered for loop at line 19-21\n", "LOOP #3: Entered for loop at line 25-30\n", "LOOP #3: Entered for loop at line 25-30\n"], ["LOOP #3: Entered for loop at line 25-30\n", "LOOP #3: Entered for loop at line 25-30\n", "LOOP #3: Entered for loop at line 25-30\n", "BRANCH #1: Covered if branch at line 26-27\n", "LOOP #2: Entered for loop at line 19-21\n"]], "sampled_condition_paths": [["Line 19: (i in range(numCourses))", "Line 19: (i in range(numCourses))"], ["Line 16: (u, v in prerequisites)", "Line 19: (i in range(numCourses))", "Line 19: (i in range(numCourses))", "Line 25: (v in graph[u])"], ["Line 16: (u, v in prerequisites)", "Line 19: (i in range(numCourses))", "Line 19: (i in range(numCourses))", "Line 25: (v in graph[u])", "Line 25: (v in graph[u])"], ["Line 25: (v in graph[u])", "Line 25: (v in graph[u])", "Line 25: (v in graph[u])", "Line 26: (used[v])", "Line 19: (i in range(numCourses))"]]}
{"task_num": 1489, "task_title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree", "sampled_paths": [["LOOP #2: Entered for loop at line 53-60\n", "BRANCH #5: Covered if branch at line 30-31\n", "BRANCH #8: Covered if branch at line 56-57\n", "LOOP #2: Entered for loop at line 53-60\n", "BRANCH #5: Covered if branch at line 30-31\n"], ["BRANCH #11: Covered elif branch at line 73-74\n", "LOOP #3: Entered for loop at line 69-75\n", "LOOP #2: Entered for loop at line 53-60\n", "BRANCH #4: Covered else branch at line 25-27\n", "LOOP #2: Entered for loop at line 53-60\n"], ["BRANCH #5: Covered if branch at line 30-31\n", "BRANCH #6: Covered if branch at line 49-51\n", "BRANCH #4: Covered else branch at line 25-27\n", "LOOP #2: Entered for loop at line 53-60\n", "BRANCH #5: Covered if branch at line 30-31\n"], ["BRANCH #5: Covered if branch at line 30-31\n", "BRANCH #5: Covered if branch at line 30-31\n", "BRANCH #3: Covered elif branch at line 23-24\n", "LOOP #2: Entered for loop at line 53-60\n", "BRANCH #5: Covered if branch at line 30-31\n"]], "sampled_condition_paths": [["Line 53: (u, v, weight, index in edges)", "Line 30: (self.id[u] != u)", "Line 56: (uf.find(u) == uf.find(v))", "Line 53: (u, v, weight, index in edges)", "Line 30: (self.id[u] != u)"], ["Line 71: NOT (getMSTWeight([], index) > mstWeight)", "Line 73: (getMSTWeight(edge, -1) == mstWeight)", "Line 69: (edge in edges)", "Line 53: (u, v, weight, index in edges)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: NOT (self.rank[i] > self.rank[j])", "Line 25: ", "Line 53: (u, v, weight, index in edges)"], ["Line 30: (self.id[u] != u)", "Line 49: (firstEdge)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: NOT (self.rank[i] > self.rank[j])", "Line 25: ", "Line 53: (u, v, weight, index in edges)", "Line 30: (self.id[u] != u)"], ["Line 30: (self.id[u] != u)", "Line 30: (self.id[u] != u)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: (self.rank[i] > self.rank[j])", "Line 53: (u, v, weight, index in edges)", "Line 30: (self.id[u] != u)"]]}
{"task_num": 1573, "task_title": "Number of Ways to Split a String", "sampled_paths": [["BRANCH #4: Covered if branch at line 30-31\n", "LOOP #1: Entered for loop at line 27-38\n", "LOOP #1: Entered for loop at line 27-38\n", "BRANCH #3: Covered if branch at line 28-29\n", "BRANCH #5: Covered elif branch at line 32-33\n"], ["BRANCH #3: Covered if branch at line 28-29\n", "BRANCH #4: Covered if branch at line 30-31\n", "LOOP #1: Entered for loop at line 27-38\n", "LOOP #1: Entered for loop at line 27-38\n", "BRANCH #3: Covered if branch at line 28-29\n"], ["BRANCH #2: Covered if branch at line 17-19\n"], ["BRANCH #1: Covered if branch at line 15-16\n"]], "sampled_condition_paths": [["Line 30: (s1End == -1 and onesSoFar == ones // 3)", "Line 27: (i, c in enumerate(s))", "Line 27: (i, c in enumerate(s))", "Line 28: (c == '1')", "Line 30: NOT (s1End == -1 and onesSoFar == ones // 3)", "Line 32: (s2Start == -1 and onesSoFar == ones // 3 + 1)"], ["Line 28: (c == '1')", "Line 30: (s1End == -1 and onesSoFar == ones // 3)", "Line 27: (i, c in enumerate(s))", "Line 27: (i, c in enumerate(s))", "Line 28: (c == '1')"], ["Line 17: (ones == 0)"], ["Line 15: (ones % 3 != 0)"]]}
{"task_num": 1574, "task_title": "Shortest Subarray to be Removed to Make Array Sorted", "sampled_paths": [["LOOP #1: Entered while loop at line 17-18\n", "LOOP #1: Entered while loop at line 17-18\n", "LOOP #2: Entered while loop at line 19-20\n", "LOOP #2: Entered while loop at line 19-20\n"], ["BRANCH #2: Covered else branch at line 28-29\n", "LOOP #3: Entered while loop at line 25-31\n", "BRANCH #1: Covered if branch at line 26-27\n", "LOOP #3: Entered while loop at line 25-31\n", "BRANCH #1: Covered if branch at line 26-27\n"], ["LOOP #3: Entered while loop at line 25-31\n", "BRANCH #2: Covered else branch at line 28-29\n"], ["LOOP #3: Entered while loop at line 25-31\n", "BRANCH #2: Covered else branch at line 28-29\n", "LOOP #3: Entered while loop at line 25-31\n", "BRANCH #1: Covered if branch at line 26-27\n", "LOOP #3: Entered while loop at line 25-31\n"]], "sampled_condition_paths": [["Line 17: (l < n - 1 and arr[l + 1] >= arr[l])", "Line 17: (l < n - 1 and arr[l + 1] >= arr[l])", "Line 19: (r > 0 and arr[r - 1] <= arr[r])", "Line 19: (r > 0 and arr[r - 1] <= arr[r])"], ["Line 26: NOT (arr[i] <= arr[j])", "Line 28: ", "Line 25: (i >= 0 and j >= r and j > i)", "Line 26: (arr[i] <= arr[j])", "Line 25: (i >= 0 and j >= r and j > i)", "Line 26: (arr[i] <= arr[j])"], ["Line 25: (i >= 0 and j >= r and j > i)", "Line 26: NOT (arr[i] <= arr[j])", "Line 28: "], ["Line 25: (i >= 0 and j >= r and j > i)", "Line 26: NOT (arr[i] <= arr[j])", "Line 28: ", "Line 25: (i >= 0 and j >= r and j > i)", "Line 26: (arr[i] <= arr[j])", "Line 25: (i >= 0 and j >= r and j > i)"]]}
{"task_num": 1579, "task_title": "Remove Max Number of Edges to Keep Graph Fully Traversable", "sampled_paths": [["BRANCH #4: Covered else branch at line 26-28\n", "BRANCH #7: Covered if branch at line 48-49\n", "LOOP #1: Entered for loop at line 44-56\n", "BRANCH #8: Covered elif branch at line 50-53\n", "BRANCH #3: Covered elif branch at line 24-25\n"], ["BRANCH #3: Covered elif branch at line 24-25\n", "BRANCH #10: Covered if branch at line 54-55\n", "LOOP #1: Entered for loop at line 44-56\n", "BRANCH #5: Covered if branch at line 33-34\n", "BRANCH #1: Covered if branch at line 20-21\n"], ["LOOP #1: Entered for loop at line 44-56\n", "BRANCH #5: Covered if branch at line 33-34\n", "BRANCH #3: Covered elif branch at line 24-25\n", "BRANCH #10: Covered if branch at line 54-55\n", "BRANCH #11: Covered if branch at line 57-58\n"], ["LOOP #1: Entered for loop at line 44-56\n", "BRANCH #5: Covered if branch at line 33-34\n", "BRANCH #5: Covered if branch at line 33-34\n", "BRANCH #1: Covered if branch at line 20-21\n", "BRANCH #11: Covered if branch at line 57-58\n"], ["BRANCH #9: Covered if branch at line 51-52\n", "LOOP #1: Entered for loop at line 44-56\n", "BRANCH #5: Covered if branch at line 33-34\n", "BRANCH #2: Covered if branch at line 22-23\n", "BRANCH #10: Covered if branch at line 54-55\n"], ["BRANCH #2: Covered if branch at line 22-23\n", "BRANCH #7: Covered if branch at line 48-49\n", "LOOP #1: Entered for loop at line 44-56\n", "BRANCH #8: Covered elif branch at line 50-53\n", "BRANCH #5: Covered if branch at line 33-34\n"]], "sampled_condition_paths": [["Line 22: NOT (self.rank[i] < self.rank[j])", "Line 24: NOT (self.rank[i] > self.rank[j])", "Line 26: ", "Line 48: (alice.unionByRank(u, v) | bob.unionByRank(u, v))", "Line 44: (type, u, v in sorted(edges, reverse=True))", "Line 47: NOT (type == 3)", "Line 50: (type == 2)", "Line 22: NOT (self.rank[i] < self.rank[j])", "Line 24: (self.rank[i] > self.rank[j])"], ["Line 22: NOT (self.rank[i] < self.rank[j])", "Line 24: (self.rank[i] > self.rank[j])", "Line 54: (alice.unionByRank(u, v))", "Line 44: (type, u, v in sorted(edges, reverse=True))", "Line 33: (self.id[u] != u)", "Line 20: (i == j)"], ["Line 44: (type, u, v in sorted(edges, reverse=True))", "Line 33: (self.id[u] != u)", "Line 22: NOT (self.rank[i] < self.rank[j])", "Line 24: (self.rank[i] > self.rank[j])", "Line 54: (alice.unionByRank(u, v))", "Line 57: (alice.count == 1 and bob.count == 1)"], ["Line 44: (type, u, v in sorted(edges, reverse=True))", "Line 33: (self.id[u] != u)", "Line 33: (self.id[u] != u)", "Line 20: (i == j)", "Line 57: (alice.count == 1 and bob.count == 1)"], ["Line 51: (bob.unionByRank(u, v))", "Line 44: (type, u, v in sorted(edges, reverse=True))", "Line 33: (self.id[u] != u)", "Line 22: (self.rank[i] < self.rank[j])", "Line 54: (alice.unionByRank(u, v))"], ["Line 22: (self.rank[i] < self.rank[j])", "Line 48: (alice.unionByRank(u, v) | bob.unionByRank(u, v))", "Line 44: (type, u, v in sorted(edges, reverse=True))", "Line 47: NOT (type == 3)", "Line 50: (type == 2)", "Line 33: (self.id[u] != u)"]]}
{"task_num": 1582, "task_title": "Special Positions in a Binary Matrix", "sampled_paths": [["LOOP #1: Entered for loop at line 19-24\n", "LOOP #2: Entered for loop at line 20-24\n", "LOOP #2: Entered for loop at line 20-24\n", "LOOP #2: Entered for loop at line 20-24\n", "BRANCH #1: Covered if branch at line 21-23\n"], ["LOOP #4: Entered for loop at line 26-29\n", "LOOP #4: Entered for loop at line 26-29\n", "LOOP #3: Entered for loop at line 25-29\n", "LOOP #4: Entered for loop at line 26-29\n", "LOOP #4: Entered for loop at line 26-29\n"], ["LOOP #4: Entered for loop at line 26-29\n", "BRANCH #2: Covered if branch at line 27-28\n", "LOOP #3: Entered for loop at line 25-29\n", "LOOP #4: Entered for loop at line 26-29\n", "LOOP #4: Entered for loop at line 26-29\n"], ["LOOP #2: Entered for loop at line 20-24\n", "BRANCH #1: Covered if branch at line 21-23\n", "LOOP #2: Entered for loop at line 20-24\n", "LOOP #2: Entered for loop at line 20-24\n", "LOOP #1: Entered for loop at line 19-24\n"]], "sampled_condition_paths": [["Line 19: (i in range(m))", "Line 20: (j in range(n))", "Line 20: (j in range(n))", "Line 20: (j in range(n))", "Line 21: (mat[i][j] == 1)"], ["Line 26: (j in range(n))", "Line 26: (j in range(n))", "Line 25: (i in range(m))", "Line 26: (j in range(n))", "Line 26: (j in range(n))"], ["Line 26: (j in range(n))", "Line 27: (mat[i][j] == 1 and rowOnes[i] == 1 and colOnes[j] == 1)", "Line 25: (i in range(m))", "Line 26: (j in range(n))", "Line 26: (j in range(n))"], ["Line 20: (j in range(n))", "Line 21: (mat[i][j] == 1)", "Line 20: (j in range(n))", "Line 20: (j in range(n))", "Line 19: (i in range(m))"]]}
{"task_num": 1583, "task_title": "Count Unhappy Friends", "sampled_paths": [["LOOP #3: Entered for loop at line 22-24\n", "LOOP #2: Entered for loop at line 21-24\n", "LOOP #3: Entered for loop at line 22-24\n", "LOOP #4: Entered for loop at line 25-32\n", "LOOP #5: Entered for loop at line 26-32\n"], ["LOOP #3: Entered for loop at line 22-24\n", "LOOP #3: Entered for loop at line 22-24\n", "LOOP #2: Entered for loop at line 21-24\n", "LOOP #3: Entered for loop at line 22-24\n", "LOOP #3: Entered for loop at line 22-24\n"], ["LOOP #2: Entered for loop at line 21-24\n", "LOOP #3: Entered for loop at line 22-24\n", "LOOP #4: Entered for loop at line 25-32\n", "LOOP #5: Entered for loop at line 26-32\n", "LOOP #4: Entered for loop at line 25-32\n"], ["LOOP #4: Entered for loop at line 25-32\n", "LOOP #5: Entered for loop at line 26-32\n", "BRANCH #1: Covered if branch at line 29-31\n", "LOOP #4: Entered for loop at line 25-32\n", "LOOP #5: Entered for loop at line 26-32\n"]], "sampled_condition_paths": [["Line 22: (j in range(n - 1))", "Line 21: (i in range(n))", "Line 22: (j in range(n - 1))", "Line 25: (x in range(n))", "Line 26: (u in prefer[x].keys())"], ["Line 22: (j in range(n - 1))", "Line 22: (j in range(n - 1))", "Line 21: (i in range(n))", "Line 22: (j in range(n - 1))", "Line 22: (j in range(n - 1))"], ["Line 21: (i in range(n))", "Line 22: (j in range(n - 1))", "Line 25: (x in range(n))", "Line 26: (u in prefer[x].keys())", "Line 25: (x in range(n))"], ["Line 25: (x in range(n))", "Line 26: (u in prefer[x].keys())", "Line 29: (prefer[x][u] < prefer[x][y] and prefer[u][x] < prefer[u][v])", "Line 25: (x in range(n))", "Line 26: (u in prefer[x].keys())"]]}
{"task_num": 1591, "task_title": "Strange Printer II", "sampled_paths": [["LOOP #3: Entered for loop at line 34-40\n", "LOOP #2: Entered for loop at line 33-40\n", "LOOP #3: Entered for loop at line 34-40\n", "LOOP #3: Entered for loop at line 34-40\n", "LOOP #3: Entered for loop at line 34-40\n"], ["LOOP #2: Entered for loop at line 33-40\n", "LOOP #3: Entered for loop at line 34-40\n", "LOOP #3: Entered for loop at line 34-40\n", "LOOP #3: Entered for loop at line 34-40\n", "LOOP #3: Entered for loop at line 34-40\n"], ["LOOP #2: Entered for loop at line 33-40\n", "LOOP #3: Entered for loop at line 34-40\n", "LOOP #3: Entered for loop at line 34-40\n", "LOOP #3: Entered for loop at line 34-40\n", "LOOP #2: Entered for loop at line 33-40\n"], ["LOOP #3: Entered for loop at line 34-40\n", "LOOP #3: Entered for loop at line 34-40\n", "LOOP #3: Entered for loop at line 34-40\n", "LOOP #2: Entered for loop at line 33-40\n", "LOOP #3: Entered for loop at line 34-40\n"], ["LOOP #3: Entered for loop at line 34-40\n", "LOOP #3: Entered for loop at line 34-40\n", "LOOP #3: Entered for loop at line 34-40\n", "LOOP #3: Entered for loop at line 34-40\n", "LOOP #2: Entered for loop at line 33-40\n"]], "sampled_condition_paths": [["Line 34: (j in range(n))", "Line 33: (i in range(m))", "Line 34: (j in range(n))", "Line 34: (j in range(n))", "Line 34: (j in range(n))"], ["Line 33: (i in range(m))", "Line 34: (j in range(n))", "Line 34: (j in range(n))", "Line 34: (j in range(n))", "Line 34: (j in range(n))"], ["Line 33: (i in range(m))", "Line 34: (j in range(n))", "Line 34: (j in range(n))", "Line 34: (j in range(n))", "Line 33: (i in range(m))"], ["Line 34: (j in range(n))", "Line 34: (j in range(n))", "Line 34: (j in range(n))", "Line 33: (i in range(m))", "Line 34: (j in range(n))"], ["Line 34: (j in range(n))", "Line 34: (j in range(n))", "Line 34: (j in range(n))", "Line 34: (j in range(n))", "Line 33: (i in range(m))"]]}
{"task_num": 1604, "task_title": "Alert Using Same Key-Card Three or More Times in a One Hour Period", "sampled_paths": [["LOOP #1: Entered for loop at line 15-18\n", "LOOP #2: Entered for loop at line 20-22\n", "LOOP #3: Entered for loop at line 29-31\n", "BRANCH #3: Covered if branch at line 30-31\n", "BRANCH #1: Covered if branch at line 21-22\n"], ["LOOP #1: Entered for loop at line 15-18\n", "LOOP #1: Entered for loop at line 15-18\n", "LOOP #1: Entered for loop at line 15-18\n", "LOOP #2: Entered for loop at line 20-22\n", "LOOP #3: Entered for loop at line 29-31\n"], ["LOOP #1: Entered for loop at line 15-18\n", "LOOP #1: Entered for loop at line 15-18\n", "LOOP #2: Entered for loop at line 20-22\n", "LOOP #3: Entered for loop at line 29-31\n", "LOOP #2: Entered for loop at line 20-22\n"], ["LOOP #3: Entered for loop at line 29-31\n", "LOOP #2: Entered for loop at line 20-22\n", "LOOP #3: Entered for loop at line 29-31\n", "BRANCH #3: Covered if branch at line 30-31\n", "BRANCH #1: Covered if branch at line 21-22\n"]], "sampled_condition_paths": [["Line 15: (name, time in zip(keyName, keyTime))", "Line 20: (name, minutes in nameToMinutes.items())", "Line 29: (i in range(2, len(minutes)))", "Line 30: (minutes[i - 2] + 60 >= minutes[i])", "Line 21: (self._hasAlert(minutes))"], ["Line 15: (name, time in zip(keyName, keyTime))", "Line 15: (name, time in zip(keyName, keyTime))", "Line 15: (name, time in zip(keyName, keyTime))", "Line 20: (name, minutes in nameToMinutes.items())", "Line 29: (i in range(2, len(minutes)))"], ["Line 15: (name, time in zip(keyName, keyTime))", "Line 15: (name, time in zip(keyName, keyTime))", "Line 20: (name, minutes in nameToMinutes.items())", "Line 29: (i in range(2, len(minutes)))", "Line 20: (name, minutes in nameToMinutes.items())"], ["Line 29: (i in range(2, len(minutes)))", "Line 20: (name, minutes in nameToMinutes.items())", "Line 29: (i in range(2, len(minutes)))", "Line 30: (minutes[i - 2] + 60 >= minutes[i])", "Line 21: (self._hasAlert(minutes))"]]}
{"task_num": 1615, "task_title": "Maximal Network Rank", "sampled_paths": [["LOOP #3: Entered for loop at line 30-35\n", "LOOP #3: Entered for loop at line 30-35\n", "BRANCH #4: Covered elif branch at line 33-34\n", "LOOP #3: Entered for loop at line 30-35\n", "BRANCH #3: Covered if branch at line 31-32\n"], ["LOOP #1: Entered for loop at line 15-18\n", "LOOP #2: Entered for loop at line 21-27\n", "BRANCH #1: Covered if branch at line 22-24\n", "LOOP #2: Entered for loop at line 21-27\n", "BRANCH #1: Covered if branch at line 22-24\n"], ["LOOP #4: Entered for loop at line 46-48\n", "BRANCH #7: Covered if branch at line 47-48\n", "LOOP #4: Entered for loop at line 46-48\n", "BRANCH #7: Covered if branch at line 47-48\n", "LOOP #4: Entered for loop at line 46-48\n"], ["LOOP #1: Entered for loop at line 15-18\n", "LOOP #1: Entered for loop at line 15-18\n", "LOOP #2: Entered for loop at line 21-27\n", "BRANCH #1: Covered if branch at line 22-24\n", "LOOP #2: Entered for loop at line 21-27\n"], ["LOOP #3: Entered for loop at line 30-35\n", "LOOP #3: Entered for loop at line 30-35\n", "BRANCH #3: Covered if branch at line 31-32\n", "LOOP #3: Entered for loop at line 30-35\n", "BRANCH #3: Covered if branch at line 31-32\n"]], "sampled_condition_paths": [["Line 30: (degree in degrees)", "Line 30: (degree in degrees)", "Line 31: NOT (degree == maxDegree1)", "Line 33: (degree == maxDegree2)", "Line 30: (degree in degrees)", "Line 31: (degree == maxDegree1)"], ["Line 15: (u, v in roads)", "Line 21: (degree in degrees)", "Line 22: (degree > maxDegree1)", "Line 21: (degree in degrees)", "Line 22: (degree > maxDegree1)"], ["Line 46: (u, v in roads)", "Line 47: (degrees[u] == degreeU and degrees[v] == degreeV)", "Line 46: (u, v in roads)", "Line 47: (degrees[u] == degreeU and degrees[v] == degreeV)", "Line 46: (u, v in roads)"], ["Line 15: (u, v in roads)", "Line 15: (u, v in roads)", "Line 21: (degree in degrees)", "Line 22: (degree > maxDegree1)", "Line 21: (degree in degrees)"], ["Line 30: (degree in degrees)", "Line 30: (degree in degrees)", "Line 31: (degree == maxDegree1)", "Line 30: (degree in degrees)", "Line 31: (degree == maxDegree1)"]]}
{"task_num": 1616, "task_title": "Split Two Strings to Make Palindrome", "sampled_paths": [["BRANCH #1: Covered if branch at line 18-19\n", "LOOP #2: Entered while loop at line 25-29\n", "BRANCH #2: Covered if branch at line 26-27\n", "LOOP #2: Entered while loop at line 25-29\n", "BRANCH #2: Covered if branch at line 26-27\n"], ["BRANCH #2: Covered if branch at line 26-27\n", "LOOP #2: Entered while loop at line 25-29\n", "BRANCH #2: Covered if branch at line 26-27\n", "LOOP #1: Entered while loop at line 17-21\n", "BRANCH #1: Covered if branch at line 18-19\n"], [], ["LOOP #1: Entered while loop at line 17-21\n", "LOOP #1: Entered while loop at line 17-21\n", "LOOP #1: Entered while loop at line 17-21\n"]], "sampled_condition_paths": [["Line 18: (a[i] != b[j])", "Line 25: (i < j)", "Line 26: (s[i] != s[j])", "Line 25: (i < j)", "Line 26: (s[i] != s[j])"], ["Line 26: (s[i] != s[j])", "Line 25: (i < j)", "Line 26: (s[i] != s[j])", "Line 17: (i < j)", "Line 18: (a[i] != b[j])"], [], ["Line 17: (i < j)", "Line 17: (i < j)", "Line 17: (i < j)"]]}
{"task_num": 1617, "task_title": "Count Subtrees With Max Distance Between Cities", "sampled_paths": [["LOOP #2: Entered for loop at line 27-29\n", "LOOP #3: Entered for loop at line 30-33\n", "LOOP #4: Entered for loop at line 34-38\n", "LOOP #5: Entered for loop at line 35-38\n", "LOOP #6: Entered for loop at line 36-38\n"], ["LOOP #8: Entered for loop at line 49-55\n", "BRANCH #3: Covered if branch at line 50-51\n", "LOOP #7: Entered for loop at line 45-55\n", "LOOP #8: Entered for loop at line 49-55\n", "BRANCH #3: Covered if branch at line 50-51\n"], ["LOOP #6: Entered for loop at line 36-38\n", "LOOP #6: Entered for loop at line 36-38\n", "LOOP #6: Entered for loop at line 36-38\n", "LOOP #4: Entered for loop at line 34-38\n", "LOOP #5: Entered for loop at line 35-38\n"], ["BRANCH #3: Covered if branch at line 50-51\n", "LOOP #8: Entered for loop at line 49-55\n", "LOOP #7: Entered for loop at line 45-55\n", "BRANCH #2: Covered if branch at line 46-47\n", "LOOP #7: Entered for loop at line 45-55\n"], ["BRANCH #6: Covered else branch at line 58-59\n", "LOOP #1: Entered for loop at line 17-21\n", "LOOP #7: Entered for loop at line 45-55\n", "LOOP #8: Entered for loop at line 49-55\n", "BRANCH #3: Covered if branch at line 50-51\n"], ["LOOP #6: Entered for loop at line 36-38\n", "LOOP #6: Entered for loop at line 36-38\n", "LOOP #5: Entered for loop at line 35-38\n", "LOOP #6: Entered for loop at line 36-38\n", "LOOP #6: Entered for loop at line 36-38\n"]], "sampled_condition_paths": [["Line 27: (i in range(n))", "Line 30: (u, v in edges)", "Line 34: (k in range(n))", "Line 35: (i in range(n))", "Line 36: (j in range(n))"], ["Line 49: (v in range(u + 1, n))", "Line 50: ((mask >> v) & 1 == 0)", "Line 45: (u in range(n))", "Line 49: (v in range(u + 1, n))", "Line 50: ((mask >> v) & 1 == 0)"], ["Line 36: (j in range(n))", "Line 36: (j in range(n))", "Line 36: (j in range(n))", "Line 34: (k in range(n))", "Line 35: (i in range(n))"], ["Line 50: ((mask >> v) & 1 == 0)", "Line 49: (v in range(u + 1, n))", "Line 45: (u in range(n))", "Line 46: ((mask >> u) & 1 == 0)", "Line 45: (u in range(n))"], ["Line 56: NOT (edgeCount == cityCount - 1)", "Line 58: ", "Line 17: (mask in range(maxMask))", "Line 45: (u in range(n))", "Line 49: (v in range(u + 1, n))", "Line 50: ((mask >> v) & 1 == 0)"], ["Line 36: (j in range(n))", "Line 36: (j in range(n))", "Line 35: (i in range(n))", "Line 36: (j in range(n))", "Line 36: (j in range(n))"]]}
{"task_num": 1627, "task_title": "Graph Connectivity With Threshold", "sampled_paths": [["LOOP #1: Entered for loop at line 40-43\n", "LOOP #1: Entered for loop at line 40-43\n", "BRANCH #5: Covered if branch at line 31-32\n", "BRANCH #5: Covered if branch at line 31-32\n", "BRANCH #5: Covered if branch at line 31-32\n"], ["LOOP #2: Entered for loop at line 41-43\n", "BRANCH #4: Covered else branch at line 25-27\n", "LOOP #1: Entered for loop at line 40-43\n", "LOOP #1: Entered for loop at line 40-43\n", "LOOP #1: Entered for loop at line 40-43\n"], ["LOOP #1: Entered for loop at line 40-43\n", "LOOP #1: Entered for loop at line 40-43\n", "LOOP #1: Entered for loop at line 40-43\n", "BRANCH #5: Covered if branch at line 31-32\n", "BRANCH #5: Covered if branch at line 31-32\n"], ["LOOP #1: Entered for loop at line 40-43\n", "BRANCH #5: Covered if branch at line 31-32\n", "BRANCH #5: Covered if branch at line 31-32\n", "BRANCH #5: Covered if branch at line 31-32\n", "BRANCH #5: Covered if branch at line 31-32\n"]], "sampled_condition_paths": [["Line 40: (z in range(threshold + 1, n + 1))", "Line 40: (z in range(threshold + 1, n + 1))", "Line 31: (self.id[u] != u)", "Line 31: (self.id[u] != u)", "Line 31: (self.id[u] != u)"], ["Line 41: (x in range(z * 2, n + 1, z))", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: NOT (self.rank[i] > self.rank[j])", "Line 25: ", "Line 40: (z in range(threshold + 1, n + 1))", "Line 40: (z in range(threshold + 1, n + 1))", "Line 40: (z in range(threshold + 1, n + 1))"], ["Line 40: (z in range(threshold + 1, n + 1))", "Line 40: (z in range(threshold + 1, n + 1))", "Line 40: (z in range(threshold + 1, n + 1))", "Line 31: (self.id[u] != u)", "Line 31: (self.id[u] != u)"], ["Line 40: (z in range(threshold + 1, n + 1))", "Line 31: (self.id[u] != u)", "Line 31: (self.id[u] != u)", "Line 31: (self.id[u] != u)", "Line 31: (self.id[u] != u)"]]}
{"task_num": 1631, "task_title": "Path With Minimum Effort", "sampled_paths": [["LOOP #2: Entered for loop at line 27-39\n", "BRANCH #4: Covered if branch at line 36-38\n", "LOOP #2: Entered for loop at line 27-39\n", "BRANCH #4: Covered if branch at line 36-38\n", "LOOP #2: Entered for loop at line 27-39\n"], ["LOOP #2: Entered for loop at line 27-39\n", "BRANCH #2: Covered if branch at line 30-31\n", "LOOP #2: Entered for loop at line 27-39\n", "BRANCH #4: Covered if branch at line 36-38\n", "LOOP #2: Entered for loop at line 27-39\n"], ["LOOP #2: Entered for loop at line 27-39\n", "BRANCH #4: Covered if branch at line 36-38\n", "LOOP #2: Entered for loop at line 27-39\n", "LOOP #2: Entered for loop at line 27-39\n", "BRANCH #3: Covered if branch at line 32-33\n"], ["LOOP #1: Entered while loop at line 22-39\n", "LOOP #2: Entered for loop at line 27-39\n", "BRANCH #4: Covered if branch at line 36-38\n", "LOOP #2: Entered for loop at line 27-39\n", "BRANCH #4: Covered if branch at line 36-38\n"], ["LOOP #2: Entered for loop at line 27-39\n", "BRANCH #4: Covered if branch at line 36-38\n", "LOOP #2: Entered for loop at line 27-39\n", "BRANCH #2: Covered if branch at line 30-31\n", "LOOP #2: Entered for loop at line 27-39\n"], ["BRANCH #4: Covered if branch at line 36-38\n", "LOOP #2: Entered for loop at line 27-39\n", "BRANCH #2: Covered if branch at line 30-31\n", "LOOP #2: Entered for loop at line 27-39\n", "BRANCH #2: Covered if branch at line 30-31\n"]], "sampled_condition_paths": [["Line 27: (dx, dy in dirs)", "Line 36: (diff[x][y] > maxDiff)", "Line 27: (dx, dy in dirs)", "Line 36: (diff[x][y] > maxDiff)", "Line 27: (dx, dy in dirs)"], ["Line 27: (dx, dy in dirs)", "Line 30: (x < 0 or x == m or y < 0 or y == n)", "Line 27: (dx, dy in dirs)", "Line 36: (diff[x][y] > maxDiff)", "Line 27: (dx, dy in dirs)"], ["Line 27: (dx, dy in dirs)", "Line 36: (diff[x][y] > maxDiff)", "Line 27: (dx, dy in dirs)", "Line 27: (dx, dy in dirs)", "Line 32: ((x, y) in seen)"], ["Line 22: (minHeap)", "Line 27: (dx, dy in dirs)", "Line 36: (diff[x][y] > maxDiff)", "Line 27: (dx, dy in dirs)", "Line 36: (diff[x][y] > maxDiff)"], ["Line 27: (dx, dy in dirs)", "Line 36: (diff[x][y] > maxDiff)", "Line 27: (dx, dy in dirs)", "Line 30: (x < 0 or x == m or y < 0 or y == n)", "Line 27: (dx, dy in dirs)"], ["Line 36: (diff[x][y] > maxDiff)", "Line 27: (dx, dy in dirs)", "Line 30: (x < 0 or x == m or y < 0 or y == n)", "Line 27: (dx, dy in dirs)", "Line 30: (x < 0 or x == m or y < 0 or y == n)"]]}
{"task_num": 1632, "task_title": "Rank Transform of a Matrix", "sampled_paths": [["LOOP #3: Entered for loop at line 44-46\n", "LOOP #2: Entered for loop at line 43-46\n", "LOOP #3: Entered for loop at line 44-46\n", "LOOP #3: Entered for loop at line 44-46\n", "LOOP #4: Entered for loop at line 47-57\n"], ["LOOP #2: Entered for loop at line 43-46\n", "LOOP #3: Entered for loop at line 44-46\n", "LOOP #3: Entered for loop at line 44-46\n", "LOOP #4: Entered for loop at line 47-57\n", "LOOP #5: Entered for loop at line 49-50\n"], ["BRANCH #2: Covered if branch at line 30-31\n", "BRANCH #1: Covered if branch at line 20-21\n", "LOOP #5: Entered for loop at line 49-50\n", "BRANCH #2: Covered if branch at line 30-31\n", "BRANCH #1: Covered if branch at line 20-21\n"], ["LOOP #7: Entered for loop at line 53-54\n", "LOOP #8: Entered for loop at line 55-57\n", "LOOP #4: Entered for loop at line 47-57\n", "LOOP #5: Entered for loop at line 49-50\n", "BRANCH #1: Covered if branch at line 20-21\n"], ["BRANCH #1: Covered if branch at line 20-21\n", "LOOP #1: Entered for loop at line 25-26\n", "BRANCH #2: Covered if branch at line 30-31\n", "LOOP #1: Entered for loop at line 25-26\n", "LOOP #6: Entered for loop at line 51-54\n"], ["LOOP #6: Entered for loop at line 51-54\n", "LOOP #7: Entered for loop at line 53-54\n", "LOOP #7: Entered for loop at line 53-54\n", "LOOP #7: Entered for loop at line 53-54\n", "LOOP #8: Entered for loop at line 55-57\n"]], "sampled_condition_paths": [["Line 44: (j, val in enumerate(row))", "Line 43: (i, row in enumerate(matrix))", "Line 44: (j, val in enumerate(row))", "Line 44: (j, val in enumerate(row))", "Line 47: (_, grids in sorted(valToGrids.items()))"], ["Line 43: (i, row in enumerate(matrix))", "Line 44: (j, val in enumerate(row))", "Line 44: (j, val in enumerate(row))", "Line 47: (_, grids in sorted(valToGrids.items()))", "Line 49: (i, j in grids)"], ["Line 30: (self.id[u] != u)", "Line 20: (i != j)", "Line 49: (i, j in grids)", "Line 30: (self.id[u] != u)", "Line 20: (i != j)"], ["Line 53: (i in values)", "Line 55: (i, j in grids)", "Line 47: (_, grids in sorted(valToGrids.items()))", "Line 49: (i, j in grids)", "Line 20: (i != j)"], ["Line 20: (i != j)", "Line 25: (u in self.id.keys())", "Line 30: (self.id[u] != u)", "Line 25: (u in self.id.keys())", "Line 51: (values in uf.getGroupIdToValues().values())"], ["Line 51: (values in uf.getGroupIdToValues().values())", "Line 53: (i in values)", "Line 53: (i in values)", "Line 53: (i in values)", "Line 55: (i, j in grids)"]]}
{"task_num": 1654, "task_title": "Minimum Jumps to Reach Home", "sampled_paths": [["LOOP #2: Entered for loop at line 29-40\n", "BRANCH #3: Covered if branch at line 38-40\n", "LOOP #2: Entered for loop at line 29-40\n", "BRANCH #2: Covered if branch at line 35-37\n", "LOOP #2: Entered for loop at line 29-40\n"], ["BRANCH #2: Covered if branch at line 35-37\n", "LOOP #1: Entered while loop at line 28-42\n", "LOOP #2: Entered for loop at line 29-40\n", "BRANCH #2: Covered if branch at line 35-37\n", "LOOP #1: Entered while loop at line 28-42\n"], ["BRANCH #3: Covered if branch at line 38-40\n", "LOOP #1: Entered while loop at line 28-42\n", "LOOP #2: Entered for loop at line 29-40\n", "BRANCH #3: Covered if branch at line 38-40\n", "LOOP #2: Entered for loop at line 29-40\n"], ["LOOP #1: Entered while loop at line 28-42\n", "LOOP #2: Entered for loop at line 29-40\n", "BRANCH #2: Covered if branch at line 35-37\n", "LOOP #1: Entered while loop at line 28-42\n", "LOOP #2: Entered for loop at line 29-40\n"], ["BRANCH #2: Covered if branch at line 35-37\n", "LOOP #1: Entered while loop at line 28-42\n", "LOOP #2: Entered for loop at line 29-40\n", "BRANCH #2: Covered if branch at line 35-37\n", "BRANCH #3: Covered if branch at line 38-40\n"], ["LOOP #1: Entered while loop at line 28-42\n", "LOOP #2: Entered for loop at line 29-40\n", "BRANCH #3: Covered if branch at line 38-40\n", "LOOP #1: Entered while loop at line 28-42\n", "LOOP #2: Entered for loop at line 29-40\n"]], "sampled_condition_paths": [["Line 29: (_ in range(len(q)))", "Line 38: (dir == Direction.kForward and backward >= 0 and backward not in seenBackward)", "Line 29: (_ in range(len(q)))", "Line 35: (forward <= furthest and forward not in seenForward)", "Line 29: (_ in range(len(q)))"], ["Line 35: (forward <= furthest and forward not in seenForward)", "Line 28: (q)", "Line 29: (_ in range(len(q)))", "Line 35: (forward <= furthest and forward not in seenForward)", "Line 28: (q)"], ["Line 38: (dir == Direction.kForward and backward >= 0 and backward not in seenBackward)", "Line 28: (q)", "Line 29: (_ in range(len(q)))", "Line 38: (dir == Direction.kForward and backward >= 0 and backward not in seenBackward)", "Line 29: (_ in range(len(q)))"], ["Line 28: (q)", "Line 29: (_ in range(len(q)))", "Line 35: (forward <= furthest and forward not in seenForward)", "Line 28: (q)", "Line 29: (_ in range(len(q)))"], ["Line 35: (forward <= furthest and forward not in seenForward)", "Line 28: (q)", "Line 29: (_ in range(len(q)))", "Line 35: (forward <= furthest and forward not in seenForward)", "Line 38: (dir == Direction.kForward and backward >= 0 and backward not in seenBackward)"], ["Line 28: (q)", "Line 29: (_ in range(len(q)))", "Line 38: (dir == Direction.kForward and backward >= 0 and backward not in seenBackward)", "Line 28: (q)", "Line 29: (_ in range(len(q)))"]]}
{"task_num": 1655, "task_title": "Distribute Repeating Integers", "sampled_paths": [["LOOP #3: Entered while loop at line 26-30\n", "BRANCH #1: Covered if branch at line 27-28\n", "LOOP #2: Entered for loop at line 22-30\n", "LOOP #1: Entered for loop at line 21-30\n", "LOOP #2: Entered for loop at line 22-30\n"], ["BRANCH #3: Covered if branch at line 45-46\n", "LOOP #1: Entered for loop at line 21-30\n", "LOOP #2: Entered for loop at line 22-30\n", "LOOP #3: Entered while loop at line 26-30\n", "LOOP #2: Entered for loop at line 22-30\n"], ["LOOP #1: Entered for loop at line 21-30\n", "LOOP #2: Entered for loop at line 22-30\n", "LOOP #3: Entered while loop at line 26-30\n", "LOOP #2: Entered for loop at line 22-30\n", "LOOP #1: Entered for loop at line 21-30\n"], ["BRANCH #3: Covered if branch at line 45-46\n", "BRANCH #2: Covered if branch at line 38-39\n", "LOOP #1: Entered for loop at line 21-30\n", "LOOP #2: Entered for loop at line 22-30\n", "LOOP #3: Entered while loop at line 26-30\n"], ["BRANCH #1: Covered if branch at line 27-28\n", "LOOP #2: Entered for loop at line 22-30\n", "LOOP #3: Entered while loop at line 26-30\n", "BRANCH #1: Covered if branch at line 27-28\n", "LOOP #2: Entered for loop at line 22-30\n"], ["LOOP #5: Entered for loop at line 37-39\n", "LOOP #6: Entered for loop at line 44-46\n", "LOOP #6: Entered for loop at line 44-46\n", "BRANCH #3: Covered if branch at line 45-46\n", "BRANCH #2: Covered if branch at line 38-39\n"]], "sampled_condition_paths": [["Line 26: (submask > 0)", "Line 27: (validDistribution[i][submask])", "Line 22: (mask in range(maxMask))", "Line 21: (i in range(n - 1, -1, -1))", "Line 22: (mask in range(maxMask))"], ["Line 45: (mask >> i & 1)", "Line 21: (i in range(n - 1, -1, -1))", "Line 22: (mask in range(maxMask))", "Line 26: (submask > 0)", "Line 22: (mask in range(maxMask))"], ["Line 21: (i in range(n - 1, -1, -1))", "Line 22: (mask in range(maxMask))", "Line 26: (submask > 0)", "Line 22: (mask in range(maxMask))", "Line 21: (i in range(n - 1, -1, -1))"], ["Line 45: (mask >> i & 1)", "Line 38: (freq >= self._getQuantitySum(quantity, mask))", "Line 21: (i in range(n - 1, -1, -1))", "Line 22: (mask in range(maxMask))", "Line 26: (submask > 0)"], ["Line 27: (validDistribution[i][submask])", "Line 22: (mask in range(maxMask))", "Line 26: (submask > 0)", "Line 27: (validDistribution[i][submask])", "Line 22: (mask in range(maxMask))"], ["Line 37: (mask in range(maxMask))", "Line 44: (i, q in enumerate(quantity))", "Line 44: (i, q in enumerate(quantity))", "Line 45: (mask >> i & 1)", "Line 38: (freq >= self._getQuantitySum(quantity, mask))"]]}
{"task_num": 1681, "task_title": "Minimum Incompatibility", "sampled_paths": [["BRANCH #2: Covered if branch at line 30-31\n", "LOOP #2: Entered while loop at line 29-33\n", "BRANCH #2: Covered if branch at line 30-31\n", "LOOP #2: Entered while loop at line 29-33\n", "LOOP #2: Entered while loop at line 29-33\n"], ["LOOP #4: Entered for loop at line 49-51\n", "BRANCH #6: Covered if branch at line 50-51\n", "LOOP #4: Entered for loop at line 49-51\n", "LOOP #4: Entered for loop at line 49-51\n", "LOOP #4: Entered for loop at line 49-51\n"], ["LOOP #2: Entered while loop at line 29-33\n", "LOOP #1: Entered for loop at line 25-33\n", "LOOP #2: Entered while loop at line 29-33\n", "LOOP #2: Entered while loop at line 29-33\n", "LOOP #2: Entered while loop at line 29-33\n"], ["BRANCH #6: Covered if branch at line 50-51\n", "BRANCH #5: Covered if branch at line 43-44\n", "LOOP #5: Entered for loop at line 57-60\n", "LOOP #5: Entered for loop at line 57-60\n", "BRANCH #7: Covered if branch at line 58-60\n"], ["BRANCH #6: Covered if branch at line 50-51\n", "BRANCH #5: Covered if branch at line 43-44\n", "LOOP #5: Entered for loop at line 57-60\n", "BRANCH #7: Covered if branch at line 58-60\n", "LOOP #5: Entered for loop at line 57-60\n"]], "sampled_condition_paths": [["Line 30: (incompatibilities[submask] != -1)", "Line 29: (submask > 0)", "Line 30: (incompatibilities[submask] != -1)", "Line 29: (submask > 0)", "Line 29: (submask > 0)"], ["Line 49: (i, num in enumerate(nums))", "Line 50: (mask >> i & 1)", "Line 49: (i, num in enumerate(nums))", "Line 49: (i, num in enumerate(nums))", "Line 49: (i, num in enumerate(nums))"], ["Line 29: (submask > 0)", "Line 25: (mask in range(1, maxMask))", "Line 29: (submask > 0)", "Line 29: (submask > 0)", "Line 29: (submask > 0)"], ["Line 50: (mask >> i & 1)", "Line 43: (mask.bit_count() == subsetSize and self._isUnique(nums, mask, subsetSize))", "Line 57: (i, num in enumerate(nums))", "Line 57: (i, num in enumerate(nums))", "Line 58: (mask >> i & 1)"], ["Line 50: (mask >> i & 1)", "Line 43: (mask.bit_count() == subsetSize and self._isUnique(nums, mask, subsetSize))", "Line 57: (i, num in enumerate(nums))", "Line 58: (mask >> i & 1)", "Line 57: (i, num in enumerate(nums))"]]}
{"task_num": 1687, "task_title": "Delivering Boxes from Storage to Ports", "sampled_paths": [["LOOP #1: Entered for loop at line 19-32\n", "LOOP #1: Entered for loop at line 19-32\n", "LOOP #2: Entered while loop at line 25-30\n", "BRANCH #2: Covered if branch at line 27-28\n", "LOOP #1: Entered for loop at line 19-32\n"], ["BRANCH #2: Covered if branch at line 27-28\n", "LOOP #1: Entered for loop at line 19-32\n", "BRANCH #1: Covered if branch at line 22-23\n", "LOOP #2: Entered while loop at line 25-30\n", "LOOP #2: Entered while loop at line 25-30\n"], ["LOOP #1: Entered for loop at line 19-32\n", "LOOP #2: Entered while loop at line 25-30\n", "LOOP #2: Entered while loop at line 25-30\n", "BRANCH #2: Covered if branch at line 27-28\n", "LOOP #1: Entered for loop at line 19-32\n"], ["BRANCH #2: Covered if branch at line 27-28\n", "LOOP #1: Entered for loop at line 19-32\n", "BRANCH #1: Covered if branch at line 22-23\n", "LOOP #1: Entered for loop at line 19-32\n", "LOOP #2: Entered while loop at line 25-30\n"], ["LOOP #1: Entered for loop at line 19-32\n", "LOOP #1: Entered for loop at line 19-32\n", "BRANCH #1: Covered if branch at line 22-23\n", "LOOP #1: Entered for loop at line 19-32\n", "BRANCH #1: Covered if branch at line 22-23\n"]], "sampled_condition_paths": [["Line 19: (r in range(n))", "Line 19: (r in range(n))", "Line 25: (r - l + 1 > maxBoxes or weight > maxWeight or (l < r and dp[l + 1] == dp[l]))", "Line 27: (boxes[l][0] != boxes[l + 1][0])", "Line 19: (r in range(n))"], ["Line 27: (boxes[l][0] != boxes[l + 1][0])", "Line 19: (r in range(n))", "Line 22: (r > 0 and boxes[r][0] != boxes[r - 1][0])", "Line 25: (r - l + 1 > maxBoxes or weight > maxWeight or (l < r and dp[l + 1] == dp[l]))", "Line 25: (r - l + 1 > maxBoxes or weight > maxWeight or (l < r and dp[l + 1] == dp[l]))"], ["Line 19: (r in range(n))", "Line 25: (r - l + 1 > maxBoxes or weight > maxWeight or (l < r and dp[l + 1] == dp[l]))", "Line 25: (r - l + 1 > maxBoxes or weight > maxWeight or (l < r and dp[l + 1] == dp[l]))", "Line 27: (boxes[l][0] != boxes[l + 1][0])", "Line 19: (r in range(n))"], ["Line 27: (boxes[l][0] != boxes[l + 1][0])", "Line 19: (r in range(n))", "Line 22: (r > 0 and boxes[r][0] != boxes[r - 1][0])", "Line 19: (r in range(n))", "Line 25: (r - l + 1 > maxBoxes or weight > maxWeight or (l < r and dp[l + 1] == dp[l]))"], ["Line 19: (r in range(n))", "Line 19: (r in range(n))", "Line 22: (r > 0 and boxes[r][0] != boxes[r - 1][0])", "Line 19: (r in range(n))", "Line 22: (r > 0 and boxes[r][0] != boxes[r - 1][0])"]]}
{"task_num": 1705, "task_title": "Maximum Number of Eaten Apples", "sampled_paths": [["BRANCH #2: Covered if branch at line 23-27\n", "LOOP #1: Entered while loop at line 18-29\n", "LOOP #2: Entered while loop at line 19-20\n", "BRANCH #1: Covered if branch at line 21-22\n", "BRANCH #2: Covered if branch at line 23-27\n"], ["BRANCH #1: Covered if branch at line 21-22\n", "BRANCH #2: Covered if branch at line 23-27\n", "LOOP #1: Entered while loop at line 18-29\n", "LOOP #2: Entered while loop at line 19-20\n", "BRANCH #1: Covered if branch at line 21-22\n"], ["LOOP #1: Entered while loop at line 18-29\n", "BRANCH #1: Covered if branch at line 21-22\n", "BRANCH #2: Covered if branch at line 23-27\n", "BRANCH #3: Covered if branch at line 25-26\n", "LOOP #1: Entered while loop at line 18-29\n"], ["BRANCH #1: Covered if branch at line 21-22\n", "BRANCH #2: Covered if branch at line 23-27\n", "BRANCH #3: Covered if branch at line 25-26\n", "LOOP #1: Entered while loop at line 18-29\n", "BRANCH #2: Covered if branch at line 23-27\n"]], "sampled_condition_paths": [["Line 23: (minHeap)", "Line 18: (i < n or minHeap)", "Line 19: (minHeap and minHeap[0][0] <= i)", "Line 21: (i < n and apples[i] > 0)", "Line 23: (minHeap)"], ["Line 21: (i < n and apples[i] > 0)", "Line 23: (minHeap)", "Line 18: (i < n or minHeap)", "Line 19: (minHeap and minHeap[0][0] <= i)", "Line 21: (i < n and apples[i] > 0)"], ["Line 18: (i < n or minHeap)", "Line 21: (i < n and apples[i] > 0)", "Line 23: (minHeap)", "Line 25: (numApples > 1)", "Line 18: (i < n or minHeap)"], ["Line 21: (i < n and apples[i] > 0)", "Line 23: (minHeap)", "Line 25: (numApples > 1)", "Line 18: (i < n or minHeap)", "Line 23: (minHeap)"]]}
{"task_num": 1706, "task_title": "Where Will the Ball Fall", "sampled_paths": [["LOOP #1: Entered for loop at line 18-27\n", "LOOP #2: Entered for loop at line 20-25\n", "BRANCH #1: Covered if branch at line 21-22\n", "LOOP #3: Entered for loop at line 28-31\n"], ["LOOP #2: Entered for loop at line 20-25\n", "LOOP #2: Entered for loop at line 20-25\n", "LOOP #2: Entered for loop at line 20-25\n", "LOOP #2: Entered for loop at line 20-25\n", "BRANCH #1: Covered if branch at line 21-22\n"], ["LOOP #2: Entered for loop at line 20-25\n", "LOOP #1: Entered for loop at line 18-27\n", "LOOP #2: Entered for loop at line 20-25\n", "LOOP #2: Entered for loop at line 20-25\n", "LOOP #2: Entered for loop at line 20-25\n"], ["LOOP #2: Entered for loop at line 20-25\n", "BRANCH #1: Covered if branch at line 21-22\n", "LOOP #2: Entered for loop at line 20-25\n", "LOOP #2: Entered for loop at line 20-25\n", "LOOP #2: Entered for loop at line 20-25\n"], ["LOOP #2: Entered for loop at line 20-25\n", "BRANCH #2: Covered if branch at line 23-24\n", "LOOP #2: Entered for loop at line 20-25\n", "BRANCH #2: Covered if branch at line 23-24\n", "LOOP #2: Entered for loop at line 20-25\n"]], "sampled_condition_paths": [["Line 18: (i in range(m))", "Line 20: (j in range(n))", "Line 21: (j + grid[i][j] < 0 or j + grid[i][j] == n)", "Line 28: (i, ball in enumerate(dp))"], ["Line 20: (j in range(n))", "Line 20: (j in range(n))", "Line 20: (j in range(n))", "Line 20: (j in range(n))", "Line 21: (j + grid[i][j] < 0 or j + grid[i][j] == n)"], ["Line 20: (j in range(n))", "Line 18: (i in range(m))", "Line 20: (j in range(n))", "Line 20: (j in range(n))", "Line 20: (j in range(n))"], ["Line 20: (j in range(n))", "Line 21: (j + grid[i][j] < 0 or j + grid[i][j] == n)", "Line 20: (j in range(n))", "Line 20: (j in range(n))", "Line 20: (j in range(n))"], ["Line 20: (j in range(n))", "Line 23: (grid[i][j] == 1 and grid[i][j + 1] == -1 or grid[i][j] == -1 and grid[i][j - 1] == 1)", "Line 20: (j in range(n))", "Line 23: (grid[i][j] == 1 and grid[i][j + 1] == -1 or grid[i][j] == -1 and grid[i][j - 1] == 1)", "Line 20: (j in range(n))"]]}
{"task_num": 1707, "task_title": "Maximum XOR With an Element From Array", "sampled_paths": [["BRANCH #5: Covered if branch at line 70-71\n", "LOOP #2: Entered for loop at line 32-41\n", "BRANCH #3: Covered elif branch at line 38-39\n", "LOOP #2: Entered for loop at line 32-41\n", "BRANCH #2: Covered if branch at line 35-37\n"], ["LOOP #1: Entered for loop at line 23-28\n", "BRANCH #1: Covered if branch at line 25-26\n", "LOOP #1: Entered for loop at line 23-28\n", "BRANCH #1: Covered if branch at line 25-26\n", "BRANCH #5: Covered if branch at line 70-71\n"], ["LOOP #1: Entered for loop at line 23-28\n", "BRANCH #1: Covered if branch at line 25-26\n", "BRANCH #5: Covered if branch at line 70-71\n", "LOOP #2: Entered for loop at line 32-41\n", "BRANCH #3: Covered elif branch at line 38-39\n"]], "sampled_condition_paths": [["Line 70: (i > 0 and nums[i - 1] <= m)", "Line 32: (i in range(self.maxBit, -1, -1))", "Line 35: NOT (node.children[toggleBit])", "Line 38: (node.children[bit])", "Line 32: (i in range(self.maxBit, -1, -1))", "Line 35: (node.children[toggleBit])"], ["Line 23: (i in range(self.maxBit, -1, -1))", "Line 25: (not node.children[bit])", "Line 23: (i in range(self.maxBit, -1, -1))", "Line 25: (not node.children[bit])", "Line 70: (i > 0 and nums[i - 1] <= m)"], ["Line 23: (i in range(self.maxBit, -1, -1))", "Line 25: (not node.children[bit])", "Line 70: (i > 0 and nums[i - 1] <= m)", "Line 32: (i in range(self.maxBit, -1, -1))", "Line 35: NOT (node.children[toggleBit])", "Line 38: (node.children[bit])"]]}
{"task_num": 1717, "task_title": "Maximum Score From Removing Substrings", "sampled_paths": [["LOOP #1: Entered for loop at line 23-29\n", "BRANCH #4: Covered else branch at line 27-28\n", "LOOP #1: Entered for loop at line 23-29\n", "BRANCH #4: Covered else branch at line 27-28\n", "LOOP #1: Entered for loop at line 23-29\n"], ["LOOP #1: Entered for loop at line 23-29\n", "BRANCH #4: Covered else branch at line 27-28\n", "LOOP #2: Entered for loop at line 30-36\n", "BRANCH #6: Covered else branch at line 34-35\n", "LOOP #2: Entered for loop at line 30-36\n"], ["BRANCH #4: Covered else branch at line 27-28\n", "LOOP #1: Entered for loop at line 23-29\n", "BRANCH #3: Covered if branch at line 24-26\n", "LOOP #1: Entered for loop at line 23-29\n", "BRANCH #4: Covered else branch at line 27-28\n"]], "sampled_condition_paths": [["Line 23: (c in s)", "Line 24: NOT (stack1 and stack1[-1] == sub1[0] and c == sub1[1])", "Line 27: ", "Line 23: (c in s)", "Line 24: NOT (stack1 and stack1[-1] == sub1[0] and c == sub1[1])", "Line 27: ", "Line 23: (c in s)"], ["Line 23: (c in s)", "Line 24: NOT (stack1 and stack1[-1] == sub1[0] and c == sub1[1])", "Line 27: ", "Line 30: (c in stack1)", "Line 31: NOT (stack2 and stack2[-1] == sub2[0] and c == sub2[1])", "Line 34: ", "Line 30: (c in stack1)"], ["Line 24: NOT (stack1 and stack1[-1] == sub1[0] and c == sub1[1])", "Line 27: ", "Line 23: (c in s)", "Line 24: (stack1 and stack1[-1] == sub1[0] and c == sub1[1])", "Line 23: (c in s)", "Line 24: NOT (stack1 and stack1[-1] == sub1[0] and c == sub1[1])", "Line 27: "]]}
{"task_num": 1719, "task_title": "Number Of Ways To Reconstruct A Tree", "sampled_paths": [["LOOP #3: Entered for loop at line 38-40\n", "LOOP #4: Entered for loop at line 42-48\n", "BRANCH #3: Covered if branch at line 43-44\n", "LOOP #4: Entered for loop at line 42-48\n", "LOOP #3: Entered for loop at line 38-40\n"], ["LOOP #1: Entered for loop at line 18-25\n", "LOOP #2: Entered for loop at line 26-28\n", "LOOP #2: Entered for loop at line 26-28\n", "LOOP #2: Entered for loop at line 26-28\n", "LOOP #2: Entered for loop at line 26-28\n"], ["LOOP #4: Entered for loop at line 42-48\n", "BRANCH #3: Covered if branch at line 43-44\n", "LOOP #4: Entered for loop at line 42-48\n", "LOOP #3: Entered for loop at line 38-40\n", "LOOP #4: Entered for loop at line 42-48\n"], ["LOOP #1: Entered for loop at line 18-25\n", "LOOP #1: Entered for loop at line 18-25\n", "LOOP #2: Entered for loop at line 26-28\n", "LOOP #2: Entered for loop at line 26-28\n", "LOOP #2: Entered for loop at line 26-28\n"], ["LOOP #1: Entered for loop at line 18-25\n", "LOOP #1: Entered for loop at line 18-25\n", "LOOP #1: Entered for loop at line 18-25\n", "LOOP #2: Entered for loop at line 26-28\n", "LOOP #2: Entered for loop at line 26-28\n"], ["BRANCH #4: Covered if branch at line 45-46\n", "LOOP #3: Entered for loop at line 38-40\n", "LOOP #4: Entered for loop at line 42-48\n", "BRANCH #3: Covered if branch at line 43-44\n", "LOOP #4: Entered for loop at line 42-48\n"]], "sampled_condition_paths": [["Line 38: (ancestor in ancestors)", "Line 42: (v in graph[u])", "Line 43: (seen[v])", "Line 42: (v in graph[u])", "Line 38: (ancestor in ancestors)"], ["Line 18: (u, v in pairs)", "Line 26: (_, children in graph.items())", "Line 26: (_, children in graph.items())", "Line 26: (_, children in graph.items())", "Line 26: (_, children in graph.items())"], ["Line 42: (v in graph[u])", "Line 43: (seen[v])", "Line 42: (v in graph[u])", "Line 38: (ancestor in ancestors)", "Line 42: (v in graph[u])"], ["Line 18: (u, v in pairs)", "Line 18: (u, v in pairs)", "Line 26: (_, children in graph.items())", "Line 26: (_, children in graph.items())", "Line 26: (_, children in graph.items())"], ["Line 18: (u, v in pairs)", "Line 18: (u, v in pairs)", "Line 18: (u, v in pairs)", "Line 26: (_, children in graph.items())", "Line 26: (_, children in graph.items())"], ["Line 45: (degrees[v] == degrees[u])", "Line 38: (ancestor in ancestors)", "Line 42: (v in graph[u])", "Line 43: (seen[v])", "Line 42: (v in graph[u])"]]}
{"task_num": 1722, "task_title": "Minimize Hamming Distance After Swap Operations", "sampled_paths": [["BRANCH #8: Covered if branch at line 55-56\n", "LOOP #3: Entered for loop at line 48-57\n", "BRANCH #5: Covered if branch at line 30-31\n", "BRANCH #7: Covered else branch at line 53-56\n", "BRANCH #8: Covered if branch at line 55-56\n"], ["BRANCH #8: Covered if branch at line 55-56\n", "LOOP #3: Entered for loop at line 48-57\n", "BRANCH #7: Covered else branch at line 53-56\n", "BRANCH #8: Covered if branch at line 55-56\n", "LOOP #3: Entered for loop at line 48-57\n"], ["BRANCH #7: Covered else branch at line 53-56\n", "BRANCH #8: Covered if branch at line 55-56\n", "LOOP #3: Entered for loop at line 48-57\n", "BRANCH #6: Covered if branch at line 51-52\n", "LOOP #3: Entered for loop at line 48-57\n"], ["LOOP #1: Entered for loop at line 42-44\n", "BRANCH #3: Covered elif branch at line 23-24\n", "LOOP #1: Entered for loop at line 42-44\n", "BRANCH #4: Covered else branch at line 25-27\n", "LOOP #1: Entered for loop at line 42-44\n"], ["LOOP #3: Entered for loop at line 48-57\n", "BRANCH #5: Covered if branch at line 30-31\n", "BRANCH #7: Covered else branch at line 53-56\n", "BRANCH #8: Covered if branch at line 55-56\n", "LOOP #3: Entered for loop at line 48-57\n"], ["BRANCH #8: Covered if branch at line 55-56\n", "LOOP #3: Entered for loop at line 48-57\n", "BRANCH #6: Covered if branch at line 51-52\n", "LOOP #3: Entered for loop at line 48-57\n", "BRANCH #6: Covered if branch at line 51-52\n"]], "sampled_condition_paths": [["Line 55: (count[target[i]] == 0)", "Line 48: (i in range(n))", "Line 30: (self.id[u] != u)", "Line 51: NOT (target[i] not in count)", "Line 53: ", "Line 55: (count[target[i]] == 0)"], ["Line 55: (count[target[i]] == 0)", "Line 48: (i in range(n))", "Line 51: NOT (target[i] not in count)", "Line 53: ", "Line 55: (count[target[i]] == 0)", "Line 48: (i in range(n))"], ["Line 51: NOT (target[i] not in count)", "Line 53: ", "Line 55: (count[target[i]] == 0)", "Line 48: (i in range(n))", "Line 51: (target[i] not in count)", "Line 48: (i in range(n))"], ["Line 42: (a, b in allowedSwaps)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: (self.rank[i] > self.rank[j])", "Line 42: (a, b in allowedSwaps)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: NOT (self.rank[i] > self.rank[j])", "Line 25: ", "Line 42: (a, b in allowedSwaps)"], ["Line 48: (i in range(n))", "Line 30: (self.id[u] != u)", "Line 51: NOT (target[i] not in count)", "Line 53: ", "Line 55: (count[target[i]] == 0)", "Line 48: (i in range(n))"], ["Line 55: (count[target[i]] == 0)", "Line 48: (i in range(n))", "Line 51: (target[i] not in count)", "Line 48: (i in range(n))", "Line 51: (target[i] not in count)"]]}
{"task_num": 1735, "task_title": "Count Ways to Make Array With Product", "sampled_paths": [["LOOP #4: Entered for loop at line 43-44\n", "LOOP #4: Entered for loop at line 43-44\n", "LOOP #4: Entered for loop at line 43-44\n", "LOOP #4: Entered for loop at line 43-44\n", "LOOP #4: Entered for loop at line 43-44\n"]], "sampled_condition_paths": [["Line 43: (j in range(i * i, n, i))", "Line 43: (j in range(i * i, n, i))", "Line 43: (j in range(i * i, n, i))", "Line 43: (j in range(i * i, n, i))", "Line 43: (j in range(i * i, n, i))"]]}
{"task_num": 1765, "task_title": "Map of Highest Peak", "sampled_paths": [["BRANCH #1: Covered if branch at line 21-23\n", "LOOP #1: Entered for loop at line 19-24\n", "LOOP #2: Entered for loop at line 20-24\n", "LOOP #2: Entered for loop at line 20-24\n", "LOOP #3: Entered while loop at line 25-36\n"], ["LOOP #4: Entered for loop at line 27-36\n", "BRANCH #3: Covered if branch at line 32-33\n", "LOOP #3: Entered while loop at line 25-36\n", "LOOP #4: Entered for loop at line 27-36\n", "BRANCH #3: Covered if branch at line 32-33\n"], ["BRANCH #2: Covered if branch at line 30-31\n", "LOOP #4: Entered for loop at line 27-36\n", "BRANCH #2: Covered if branch at line 30-31\n", "LOOP #4: Entered for loop at line 27-36\n", "BRANCH #3: Covered if branch at line 32-33\n"], ["LOOP #3: Entered while loop at line 25-36\n", "LOOP #4: Entered for loop at line 27-36\n", "BRANCH #2: Covered if branch at line 30-31\n", "LOOP #4: Entered for loop at line 27-36\n", "LOOP #4: Entered for loop at line 27-36\n"]], "sampled_condition_paths": [["Line 21: (isWater[i][j] == 1)", "Line 19: (i in range(m))", "Line 20: (j in range(n))", "Line 20: (j in range(n))", "Line 25: (q)"], ["Line 27: (dx, dy in dirs)", "Line 32: (ans[x][y] != -1)", "Line 25: (q)", "Line 27: (dx, dy in dirs)", "Line 32: (ans[x][y] != -1)"], ["Line 30: (x < 0 or x == m or y < 0 or y == n)", "Line 27: (dx, dy in dirs)", "Line 30: (x < 0 or x == m or y < 0 or y == n)", "Line 27: (dx, dy in dirs)", "Line 32: (ans[x][y] != -1)"], ["Line 25: (q)", "Line 27: (dx, dy in dirs)", "Line 30: (x < 0 or x == m or y < 0 or y == n)", "Line 27: (dx, dy in dirs)", "Line 27: (dx, dy in dirs)"]]}
{"task_num": 1782, "task_title": "Count Pairs Of Nodes", "sampled_paths": [["BRANCH #1: Covered if branch at line 30-32\n", "LOOP #4: Entered for loop at line 35-39\n", "LOOP #5: Entered for loop at line 36-39\n", "LOOP #5: Entered for loop at line 36-39\n", "LOOP #4: Entered for loop at line 35-39\n"], ["BRANCH #2: Covered else branch at line 33-34\n", "LOOP #4: Entered for loop at line 35-39\n", "LOOP #5: Entered for loop at line 36-39\n", "LOOP #5: Entered for loop at line 36-39\n", "LOOP #4: Entered for loop at line 35-39\n"], ["LOOP #4: Entered for loop at line 35-39\n", "LOOP #2: Entered for loop at line 26-39\n", "LOOP #3: Entered while loop at line 29-34\n", "BRANCH #1: Covered if branch at line 30-32\n", "LOOP #3: Entered while loop at line 29-34\n"], ["LOOP #4: Entered for loop at line 35-39\n", "LOOP #5: Entered for loop at line 36-39\n", "LOOP #5: Entered for loop at line 36-39\n", "LOOP #4: Entered for loop at line 35-39\n", "LOOP #5: Entered for loop at line 36-39\n"]], "sampled_condition_paths": [["Line 30: (sortedCount[i] + sortedCount[j] > query)", "Line 35: (i in range(1, n + 1))", "Line 36: (j, sh in shared[i].items())", "Line 36: (j, sh in shared[i].items())", "Line 35: (i in range(1, n + 1))"], ["Line 30: NOT (sortedCount[i] + sortedCount[j] > query)", "Line 33: ", "Line 35: (i in range(1, n + 1))", "Line 36: (j, sh in shared[i].items())", "Line 36: (j, sh in shared[i].items())", "Line 35: (i in range(1, n + 1))"], ["Line 35: (i in range(1, n + 1))", "Line 26: (k, query in enumerate(queries))", "Line 29: (i < j)", "Line 30: (sortedCount[i] + sortedCount[j] > query)", "Line 29: (i < j)"], ["Line 35: (i in range(1, n + 1))", "Line 36: (j, sh in shared[i].items())", "Line 36: (j, sh in shared[i].items())", "Line 35: (i in range(1, n + 1))", "Line 36: (j, sh in shared[i].items())"]]}
{"task_num": 1786, "task_title": "Number of Restricted Paths From First to Last Node", "sampled_paths": [["LOOP #2: Entered while loop at line 30-41\n", "LOOP #3: Entered for loop at line 34-41\n", "BRANCH #2: Covered if branch at line 35-37\n", "LOOP #3: Entered for loop at line 34-41\n", "BRANCH #2: Covered if branch at line 35-37\n"], ["LOOP #3: Entered for loop at line 34-41\n", "BRANCH #3: Covered if branch at line 38-40\n", "LOOP #2: Entered while loop at line 30-41\n", "LOOP #3: Entered for loop at line 34-41\n", "BRANCH #2: Covered if branch at line 35-37\n"], ["BRANCH #3: Covered if branch at line 38-40\n", "LOOP #3: Entered for loop at line 34-41\n", "BRANCH #3: Covered if branch at line 38-40\n", "LOOP #3: Entered for loop at line 34-41\n", "BRANCH #2: Covered if branch at line 35-37\n"], ["LOOP #2: Entered while loop at line 30-41\n", "LOOP #3: Entered for loop at line 34-41\n", "BRANCH #3: Covered if branch at line 38-40\n", "LOOP #3: Entered for loop at line 34-41\n", "BRANCH #3: Covered if branch at line 38-40\n"]], "sampled_condition_paths": [["Line 30: (minHeap)", "Line 34: (v, w in graph[u])", "Line 35: (d + w < dist[v])", "Line 34: (v, w in graph[u])", "Line 35: (d + w < dist[v])"], ["Line 34: (v, w in graph[u])", "Line 38: (dist[v] < dist[u])", "Line 30: (minHeap)", "Line 34: (v, w in graph[u])", "Line 35: (d + w < dist[v])"], ["Line 38: (dist[v] < dist[u])", "Line 34: (v, w in graph[u])", "Line 38: (dist[v] < dist[u])", "Line 34: (v, w in graph[u])", "Line 35: (d + w < dist[v])"], ["Line 30: (minHeap)", "Line 34: (v, w in graph[u])", "Line 38: (dist[v] < dist[u])", "Line 34: (v, w in graph[u])", "Line 38: (dist[v] < dist[u])"]]}
{"task_num": 1793, "task_title": "Maximum Score of a Good Subarray", "sampled_paths": [["LOOP #1: Entered for loop at line 16-23\n", "LOOP #2: Entered while loop at line 17-21\n", "LOOP #2: Entered while loop at line 17-21\n", "LOOP #2: Entered while loop at line 17-21\n", "BRANCH #1: Covered if branch at line 20-21\n"], ["LOOP #1: Entered for loop at line 16-23\n", "LOOP #2: Entered while loop at line 17-21\n", "BRANCH #1: Covered if branch at line 20-21\n", "LOOP #1: Entered for loop at line 16-23\n", "LOOP #1: Entered for loop at line 16-23\n"], ["LOOP #2: Entered while loop at line 17-21\n", "LOOP #2: Entered while loop at line 17-21\n", "BRANCH #1: Covered if branch at line 20-21\n", "LOOP #1: Entered for loop at line 16-23\n", "LOOP #1: Entered for loop at line 16-23\n"], ["LOOP #1: Entered for loop at line 16-23\n", "LOOP #1: Entered for loop at line 16-23\n", "LOOP #2: Entered while loop at line 17-21\n", "BRANCH #1: Covered if branch at line 20-21\n", "LOOP #1: Entered for loop at line 16-23\n"]], "sampled_condition_paths": [["Line 16: (i in range(len(nums) + 1))", "Line 17: (stack and (i == len(nums) or nums[stack[-1]] > nums[i]))", "Line 17: (stack and (i == len(nums) or nums[stack[-1]] > nums[i]))", "Line 17: (stack and (i == len(nums) or nums[stack[-1]] > nums[i]))", "Line 20: ((not stack or stack[-1] + 1 <= k) and i - 1 >= k)"], ["Line 16: (i in range(len(nums) + 1))", "Line 17: (stack and (i == len(nums) or nums[stack[-1]] > nums[i]))", "Line 20: ((not stack or stack[-1] + 1 <= k) and i - 1 >= k)", "Line 16: (i in range(len(nums) + 1))", "Line 16: (i in range(len(nums) + 1))"], ["Line 17: (stack and (i == len(nums) or nums[stack[-1]] > nums[i]))", "Line 17: (stack and (i == len(nums) or nums[stack[-1]] > nums[i]))", "Line 20: ((not stack or stack[-1] + 1 <= k) and i - 1 >= k)", "Line 16: (i in range(len(nums) + 1))", "Line 16: (i in range(len(nums) + 1))"], ["Line 16: (i in range(len(nums) + 1))", "Line 16: (i in range(len(nums) + 1))", "Line 17: (stack and (i == len(nums) or nums[stack[-1]] > nums[i]))", "Line 20: ((not stack or stack[-1] + 1 <= k) and i - 1 >= k)", "Line 16: (i in range(len(nums) + 1))"]]}
{"task_num": 1805, "task_title": "Number of Different Integers in a String", "sampled_paths": [["BRANCH #1: Covered if branch at line 17-18\n", "LOOP #1: Entered for loop at line 16-22\n", "BRANCH #1: Covered if branch at line 17-18\n", "LOOP #1: Entered for loop at line 16-22\n", "BRANCH #1: Covered if branch at line 17-18\n"], ["BRANCH #1: Covered if branch at line 17-18\n", "LOOP #1: Entered for loop at line 16-22\n", "BRANCH #2: Covered elif branch at line 19-21\n", "BRANCH #5: Covered else branch at line 32-33\n", "LOOP #1: Entered for loop at line 16-22\n"], ["LOOP #1: Entered for loop at line 16-22\n", "BRANCH #1: Covered if branch at line 17-18\n", "LOOP #1: Entered for loop at line 16-22\n", "BRANCH #1: Covered if branch at line 17-18\n", "LOOP #1: Entered for loop at line 16-22\n"], ["BRANCH #5: Covered else branch at line 32-33\n", "LOOP #1: Entered for loop at line 16-22\n", "BRANCH #1: Covered if branch at line 17-18\n", "LOOP #1: Entered for loop at line 16-22\n", "BRANCH #2: Covered elif branch at line 19-21\n"]], "sampled_condition_paths": [["Line 17: (c.isdigit())", "Line 16: (c in word)", "Line 17: (c.isdigit())", "Line 16: (c in word)", "Line 17: (c.isdigit())"], ["Line 17: (c.isdigit())", "Line 16: (c in word)", "Line 17: NOT (c.isdigit())", "Line 19: (curr)", "Line 30: NOT (index == -1)", "Line 32: ", "Line 16: (c in word)"], ["Line 16: (c in word)", "Line 17: (c.isdigit())", "Line 16: (c in word)", "Line 17: (c.isdigit())", "Line 16: (c in word)"], ["Line 30: NOT (index == -1)", "Line 32: ", "Line 16: (c in word)", "Line 17: (c.isdigit())", "Line 16: (c in word)", "Line 17: NOT (c.isdigit())", "Line 19: (curr)"]]}
{"task_num": 1857, "task_title": "Largest Color Value in a Directed Graph", "sampled_paths": [["LOOP #1: Entered for loop at line 21-24\n", "LOOP #2: Entered for loop at line 25-28\n", "BRANCH #4: Covered else branch at line 43-44\n"], ["LOOP #5: Entered for loop at line 35-36\n", "LOOP #5: Entered for loop at line 35-36\n", "LOOP #5: Entered for loop at line 35-36\n", "LOOP #5: Entered for loop at line 35-36\n", "LOOP #5: Entered for loop at line 35-36\n"]], "sampled_condition_paths": [["Line 21: (u, v in edges)", "Line 25: (i, degree in enumerate(inDegrees))", "Line 41: NOT (processed == n)", "Line 43: "], ["Line 35: (i in range(26))", "Line 35: (i in range(26))", "Line 35: (i in range(26))", "Line 35: (i in range(26))", "Line 35: (i in range(26))"]]}
{"task_num": 1878, "task_title": "Get Biggest Three Rhombus Sums in a Grid", "sampled_paths": [["LOOP #2: Entered for loop at line 21-29\n", "LOOP #3: Entered while loop at line 23-29\n", "BRANCH #1: Covered if branch at line 26-27\n", "LOOP #1: Entered for loop at line 20-29\n", "LOOP #2: Entered for loop at line 21-29\n"], ["LOOP #3: Entered while loop at line 23-29\n", "LOOP #2: Entered for loop at line 21-29\n", "LOOP #3: Entered while loop at line 23-29\n", "LOOP #2: Entered for loop at line 21-29\n", "LOOP #3: Entered while loop at line 23-29\n"], ["LOOP #6: Entered for loop at line 47-51\n", "LOOP #7: Entered for loop at line 52-56\n", "BRANCH #1: Covered if branch at line 26-27\n", "LOOP #2: Entered for loop at line 21-29\n", "LOOP #3: Entered while loop at line 23-29\n"], ["LOOP #2: Entered for loop at line 21-29\n", "LOOP #3: Entered while loop at line 23-29\n", "LOOP #2: Entered for loop at line 21-29\n", "LOOP #3: Entered while loop at line 23-29\n", "LOOP #2: Entered for loop at line 21-29\n"], ["BRANCH #1: Covered if branch at line 26-27\n", "LOOP #2: Entered for loop at line 21-29\n", "LOOP #3: Entered while loop at line 23-29\n", "BRANCH #1: Covered if branch at line 26-27\n", "LOOP #1: Entered for loop at line 20-29\n"], ["LOOP #3: Entered while loop at line 23-29\n", "LOOP #4: Entered for loop at line 37-41\n", "LOOP #5: Entered for loop at line 42-46\n", "LOOP #6: Entered for loop at line 47-51\n", "LOOP #7: Entered for loop at line 52-56\n"]], "sampled_condition_paths": [["Line 21: (j in range(n))", "Line 23: (i + sz < m and i - sz >= 0 and j + 2 * sz < n)", "Line 26: (len(sums) > 3)", "Line 20: (i in range(m))", "Line 21: (j in range(n))"], ["Line 23: (i + sz < m and i - sz >= 0 and j + 2 * sz < n)", "Line 21: (j in range(n))", "Line 23: (i + sz < m and i - sz >= 0 and j + 2 * sz < n)", "Line 21: (j in range(n))", "Line 23: (i + sz < m and i - sz >= 0 and j + 2 * sz < n)"], ["Line 47: (_ in range(sz))", "Line 52: (_ in range(sz))", "Line 26: (len(sums) > 3)", "Line 21: (j in range(n))", "Line 23: (i + sz < m and i - sz >= 0 and j + 2 * sz < n)"], ["Line 21: (j in range(n))", "Line 23: (i + sz < m and i - sz >= 0 and j + 2 * sz < n)", "Line 21: (j in range(n))", "Line 23: (i + sz < m and i - sz >= 0 and j + 2 * sz < n)", "Line 21: (j in range(n))"], ["Line 26: (len(sums) > 3)", "Line 21: (j in range(n))", "Line 23: (i + sz < m and i - sz >= 0 and j + 2 * sz < n)", "Line 26: (len(sums) > 3)", "Line 20: (i in range(m))"], ["Line 23: (i + sz < m and i - sz >= 0 and j + 2 * sz < n)", "Line 37: (_ in range(sz))", "Line 42: (_ in range(sz))", "Line 47: (_ in range(sz))", "Line 52: (_ in range(sz))"]]}
{"task_num": 1896, "task_title": "Minimum Cost to Change the Final Value of Expression", "sampled_paths": [["BRANCH #1: Covered if branch at line 16-18\n", "LOOP #1: Entered for loop at line 15-47\n", "BRANCH #3: Covered else branch at line 22-23\n", "BRANCH #4: Covered if branch at line 24-45\n", "BRANCH #5: Covered if branch at line 28-37\n"], ["LOOP #1: Entered for loop at line 15-47\n", "BRANCH #1: Covered if branch at line 16-18\n", "LOOP #1: Entered for loop at line 15-47\n", "BRANCH #3: Covered else branch at line 22-23\n", "BRANCH #4: Covered if branch at line 24-45\n"], ["BRANCH #3: Covered else branch at line 22-23\n", "LOOP #1: Entered for loop at line 15-47\n", "BRANCH #1: Covered if branch at line 16-18\n", "LOOP #1: Entered for loop at line 15-47\n", "BRANCH #3: Covered else branch at line 22-23\n"], ["LOOP #1: Entered for loop at line 15-47\n", "BRANCH #3: Covered else branch at line 22-23\n", "BRANCH #4: Covered if branch at line 24-45\n", "BRANCH #5: Covered if branch at line 28-37\n", "BRANCH #6: Covered if branch at line 29-30\n"], ["BRANCH #4: Covered if branch at line 24-45\n", "BRANCH #11: Covered elif branch at line 40-41\n", "LOOP #1: Entered for loop at line 15-47\n", "BRANCH #2: Covered if branch at line 19-21\n", "BRANCH #4: Covered if branch at line 24-45\n"]], "sampled_condition_paths": [["Line 16: (e in '(&|')", "Line 15: (e in expression)", "Line 19: NOT (e == ')')", "Line 22: ", "Line 24: (stack and stack[-1][0] in '&|')", "Line 28: (op == '&')"], ["Line 15: (e in expression)", "Line 16: (e in '(&|')", "Line 15: (e in expression)", "Line 19: NOT (e == ')')", "Line 22: ", "Line 24: (stack and stack[-1][0] in '&|')"], ["Line 19: NOT (e == ')')", "Line 22: ", "Line 15: (e in expression)", "Line 16: (e in '(&|')", "Line 15: (e in expression)", "Line 19: NOT (e == ')')", "Line 22: "], ["Line 15: (e in expression)", "Line 19: NOT (e == ')')", "Line 22: ", "Line 24: (stack and stack[-1][0] in '&|')", "Line 28: (op == '&')", "Line 29: (a == '0' and b == '0')"], ["Line 24: (stack and stack[-1][0] in '&|')", "Line 38: NOT (a == '0' and b == '0')", "Line 40: (a == '0' and b == '1')", "Line 15: (e in expression)", "Line 19: (e == ')')", "Line 24: (stack and stack[-1][0] in '&|')"]]}
{"task_num": 1906, "task_title": "Minimum Absolute Difference Queries", "sampled_paths": [["BRANCH #2: Covered if branch at line 30-31\n", "LOOP #3: Entered for loop at line 27-34\n", "BRANCH #2: Covered if branch at line 30-31\n", "LOOP #3: Entered for loop at line 27-34\n", "BRANCH #2: Covered if branch at line 30-31\n"], ["LOOP #3: Entered for loop at line 27-34\n", "BRANCH #2: Covered if branch at line 30-31\n", "LOOP #3: Entered for loop at line 27-34\n", "BRANCH #2: Covered if branch at line 30-31\n", "LOOP #3: Entered for loop at line 27-34\n"]], "sampled_condition_paths": [["Line 30: (i == len(indices) or indices[i] > r)", "Line 27: (num in range(1, 101))", "Line 30: (i == len(indices) or indices[i] > r)", "Line 27: (num in range(1, 101))", "Line 30: (i == len(indices) or indices[i] > r)"], ["Line 27: (num in range(1, 101))", "Line 30: (i == len(indices) or indices[i] > r)", "Line 27: (num in range(1, 101))", "Line 30: (i == len(indices) or indices[i] > r)", "Line 27: (num in range(1, 101))"]]}
{"task_num": 1923, "task_title": "Longest Common Subpath", "sampled_paths": [["BRANCH #6: Covered if branch at line 49-50\n", "LOOP #3: Entered for loop at line 43-51\n", "BRANCH #4: Covered if branch at line 45-46\n", "BRANCH #6: Covered if branch at line 49-50\n", "LOOP #2: Entered for loop at line 32-35\n"], ["BRANCH #4: Covered if branch at line 45-46\n", "BRANCH #6: Covered if branch at line 49-50\n", "LOOP #3: Entered for loop at line 43-51\n", "BRANCH #4: Covered if branch at line 45-46\n", "BRANCH #6: Covered if branch at line 49-50\n"], ["BRANCH #4: Covered if branch at line 45-46\n", "BRANCH #6: Covered if branch at line 49-50\n", "LOOP #3: Entered for loop at line 43-51\n", "BRANCH #5: Covered else branch at line 47-48\n", "LOOP #3: Entered for loop at line 43-51\n"], ["BRANCH #6: Covered if branch at line 49-50\n", "LOOP #3: Entered for loop at line 43-51\n", "BRANCH #5: Covered else branch at line 47-48\n", "BRANCH #6: Covered if branch at line 49-50\n", "LOOP #2: Entered for loop at line 32-35\n"], ["LOOP #3: Entered for loop at line 43-51\n", "BRANCH #5: Covered else branch at line 47-48\n", "BRANCH #6: Covered if branch at line 49-50\n", "LOOP #3: Entered for loop at line 43-51\n", "BRANCH #5: Covered else branch at line 47-48\n"]], "sampled_condition_paths": [["Line 49: (i >= m - 1)", "Line 43: (i, num in enumerate(path))", "Line 45: (i >= m)", "Line 49: (i >= m - 1)", "Line 32: (subpathHash in hashSets[0])"], ["Line 45: (i >= m)", "Line 49: (i >= m - 1)", "Line 43: (i, num in enumerate(path))", "Line 45: (i >= m)", "Line 49: (i >= m - 1)"], ["Line 45: (i >= m)", "Line 49: (i >= m - 1)", "Line 43: (i, num in enumerate(path))", "Line 45: NOT (i >= m)", "Line 47: ", "Line 43: (i, num in enumerate(path))"], ["Line 49: (i >= m - 1)", "Line 43: (i, num in enumerate(path))", "Line 45: NOT (i >= m)", "Line 47: ", "Line 49: (i >= m - 1)", "Line 32: (subpathHash in hashSets[0])"], ["Line 43: (i, num in enumerate(path))", "Line 45: NOT (i >= m)", "Line 47: ", "Line 49: (i >= m - 1)", "Line 43: (i, num in enumerate(path))", "Line 45: NOT (i >= m)", "Line 47: "]]}
{"task_num": 1926, "task_title": "Nearest Exit from Entrance in Maze", "sampled_paths": [["LOOP #3: Entered for loop at line 24-35\n", "BRANCH #1: Covered if branch at line 27-28\n", "LOOP #3: Entered for loop at line 24-35\n", "BRANCH #2: Covered if branch at line 29-30\n", "LOOP #1: Entered while loop at line 20-35\n"], ["LOOP #3: Entered for loop at line 24-35\n", "BRANCH #1: Covered if branch at line 27-28\n", "LOOP #3: Entered for loop at line 24-35\n", "BRANCH #2: Covered if branch at line 29-30\n", "LOOP #3: Entered for loop at line 24-35\n"], ["LOOP #3: Entered for loop at line 24-35\n", "BRANCH #1: Covered if branch at line 27-28\n", "LOOP #3: Entered for loop at line 24-35\n", "BRANCH #1: Covered if branch at line 27-28\n", "LOOP #3: Entered for loop at line 24-35\n"], ["BRANCH #1: Covered if branch at line 27-28\n", "LOOP #3: Entered for loop at line 24-35\n", "BRANCH #1: Covered if branch at line 27-28\n", "LOOP #3: Entered for loop at line 24-35\n", "BRANCH #1: Covered if branch at line 27-28\n"], ["LOOP #2: Entered for loop at line 22-35\n", "LOOP #3: Entered for loop at line 24-35\n", "LOOP #3: Entered for loop at line 24-35\n", "BRANCH #2: Covered if branch at line 29-30\n", "LOOP #3: Entered for loop at line 24-35\n"], ["BRANCH #1: Covered if branch at line 27-28\n", "LOOP #3: Entered for loop at line 24-35\n", "BRANCH #2: Covered if branch at line 29-30\n", "LOOP #3: Entered for loop at line 24-35\n", "LOOP #3: Entered for loop at line 24-35\n"]], "sampled_condition_paths": [["Line 24: (dx, dy in dirs)", "Line 27: (x < 0 or x == m or y < 0 or y == n)", "Line 24: (dx, dy in dirs)", "Line 29: ((x, y) in seen or maze[x][y] == '+')", "Line 20: (q)"], ["Line 24: (dx, dy in dirs)", "Line 27: (x < 0 or x == m or y < 0 or y == n)", "Line 24: (dx, dy in dirs)", "Line 29: ((x, y) in seen or maze[x][y] == '+')", "Line 24: (dx, dy in dirs)"], ["Line 24: (dx, dy in dirs)", "Line 27: (x < 0 or x == m or y < 0 or y == n)", "Line 24: (dx, dy in dirs)", "Line 27: (x < 0 or x == m or y < 0 or y == n)", "Line 24: (dx, dy in dirs)"], ["Line 27: (x < 0 or x == m or y < 0 or y == n)", "Line 24: (dx, dy in dirs)", "Line 27: (x < 0 or x == m or y < 0 or y == n)", "Line 24: (dx, dy in dirs)", "Line 27: (x < 0 or x == m or y < 0 or y == n)"], ["Line 22: (_ in range(len(q)))", "Line 24: (dx, dy in dirs)", "Line 24: (dx, dy in dirs)", "Line 29: ((x, y) in seen or maze[x][y] == '+')", "Line 24: (dx, dy in dirs)"], ["Line 27: (x < 0 or x == m or y < 0 or y == n)", "Line 24: (dx, dy in dirs)", "Line 29: ((x, y) in seen or maze[x][y] == '+')", "Line 24: (dx, dy in dirs)", "Line 24: (dx, dy in dirs)"]]}
{"task_num": 1928, "task_title": "Minimum Cost to Reach Destination in Time", "sampled_paths": [["LOOP #2: Entered while loop at line 30-46\n", "LOOP #3: Entered for loop at line 36-46\n", "LOOP #3: Entered for loop at line 36-46\n", "BRANCH #4: Covered if branch at line 39-42\n", "LOOP #2: Entered while loop at line 30-46\n"], ["BRANCH #3: Covered if branch at line 37-38\n", "LOOP #2: Entered while loop at line 30-46\n", "LOOP #3: Entered for loop at line 36-46\n", "LOOP #3: Entered for loop at line 36-46\n", "BRANCH #4: Covered if branch at line 39-42\n"], ["LOOP #3: Entered for loop at line 36-46\n", "BRANCH #4: Covered if branch at line 39-42\n", "LOOP #3: Entered for loop at line 36-46\n", "BRANCH #4: Covered if branch at line 39-42\n", "LOOP #2: Entered while loop at line 30-46\n"], ["LOOP #3: Entered for loop at line 36-46\n", "LOOP #3: Entered for loop at line 36-46\n", "BRANCH #4: Covered if branch at line 39-42\n", "LOOP #2: Entered while loop at line 30-46\n", "LOOP #3: Entered for loop at line 36-46\n"], ["BRANCH #4: Covered if branch at line 39-42\n", "LOOP #2: Entered while loop at line 30-46\n", "LOOP #3: Entered for loop at line 36-46\n", "BRANCH #3: Covered if branch at line 37-38\n", "LOOP #3: Entered for loop at line 36-46\n"], ["BRANCH #4: Covered if branch at line 39-42\n", "LOOP #2: Entered while loop at line 30-46\n", "LOOP #3: Entered for loop at line 36-46\n", "LOOP #3: Entered for loop at line 36-46\n", "BRANCH #4: Covered if branch at line 39-42\n"]], "sampled_condition_paths": [["Line 30: (minHeap)", "Line 36: (v, w in graph[u])", "Line 36: (v, w in graph[u])", "Line 39: (currCost + passingFees[v] < cost[v])", "Line 30: (minHeap)"], ["Line 37: (d + w > maxTime)", "Line 30: (minHeap)", "Line 36: (v, w in graph[u])", "Line 36: (v, w in graph[u])", "Line 39: (currCost + passingFees[v] < cost[v])"], ["Line 36: (v, w in graph[u])", "Line 39: (currCost + passingFees[v] < cost[v])", "Line 36: (v, w in graph[u])", "Line 39: (currCost + passingFees[v] < cost[v])", "Line 30: (minHeap)"], ["Line 36: (v, w in graph[u])", "Line 36: (v, w in graph[u])", "Line 39: (currCost + passingFees[v] < cost[v])", "Line 30: (minHeap)", "Line 36: (v, w in graph[u])"], ["Line 39: (currCost + passingFees[v] < cost[v])", "Line 30: (minHeap)", "Line 36: (v, w in graph[u])", "Line 37: (d + w > maxTime)", "Line 36: (v, w in graph[u])"], ["Line 39: (currCost + passingFees[v] < cost[v])", "Line 30: (minHeap)", "Line 36: (v, w in graph[u])", "Line 36: (v, w in graph[u])", "Line 39: (currCost + passingFees[v] < cost[v])"]]}
{"task_num": 1938, "task_title": "Maximum Genetic Difference Query", "sampled_paths": [["LOOP #2: Entered for loop at line 34-41\n", "BRANCH #3: Covered else branch at line 40-41\n", "LOOP #2: Entered for loop at line 34-41\n", "BRANCH #3: Covered else branch at line 40-41\n", "LOOP #2: Entered for loop at line 34-41\n"], ["BRANCH #3: Covered else branch at line 40-41\n", "LOOP #2: Entered for loop at line 34-41\n", "BRANCH #3: Covered else branch at line 40-41\n", "LOOP #2: Entered for loop at line 34-41\n", "BRANCH #3: Covered else branch at line 40-41\n"], ["LOOP #1: Entered for loop at line 24-30\n", "LOOP #1: Entered for loop at line 24-30\n", "LOOP #1: Entered for loop at line 24-30\n", "LOOP #1: Entered for loop at line 24-30\n", "LOOP #1: Entered for loop at line 24-30\n"]], "sampled_condition_paths": [["Line 34: (i in range(self.kHeight, -1, -1))", "Line 37: NOT (node.children[targetBit] and node.children[targetBit].count > 0)", "Line 40: ", "Line 34: (i in range(self.kHeight, -1, -1))", "Line 37: NOT (node.children[targetBit] and node.children[targetBit].count > 0)", "Line 40: ", "Line 34: (i in range(self.kHeight, -1, -1))"], ["Line 37: NOT (node.children[targetBit] and node.children[targetBit].count > 0)", "Line 40: ", "Line 34: (i in range(self.kHeight, -1, -1))", "Line 37: NOT (node.children[targetBit] and node.children[targetBit].count > 0)", "Line 40: ", "Line 34: (i in range(self.kHeight, -1, -1))", "Line 37: NOT (node.children[targetBit] and node.children[targetBit].count > 0)", "Line 40: "], ["Line 24: (i in range(self.kHeight, -1, -1))", "Line 24: (i in range(self.kHeight, -1, -1))", "Line 24: (i in range(self.kHeight, -1, -1))", "Line 24: (i in range(self.kHeight, -1, -1))", "Line 24: (i in range(self.kHeight, -1, -1))"]]}
{"task_num": 1971, "task_title": "Find if Path Exists in Graph", "sampled_paths": [["BRANCH #3: Covered elif branch at line 23-24\n", "LOOP #1: Entered for loop at line 39-41\n", "BRANCH #4: Covered else branch at line 25-27\n", "LOOP #1: Entered for loop at line 39-41\n", "BRANCH #3: Covered elif branch at line 23-24\n"], ["LOOP #1: Entered for loop at line 39-41\n", "BRANCH #5: Covered if branch at line 30-31\n", "BRANCH #5: Covered if branch at line 30-31\n", "BRANCH #1: Covered if branch at line 19-20\n", "BRANCH #5: Covered if branch at line 30-31\n"], ["LOOP #1: Entered for loop at line 39-41\n", "BRANCH #3: Covered elif branch at line 23-24\n", "LOOP #1: Entered for loop at line 39-41\n", "BRANCH #5: Covered if branch at line 30-31\n", "BRANCH #5: Covered if branch at line 30-31\n"]], "sampled_condition_paths": [["Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: (self.rank[i] > self.rank[j])", "Line 39: (u, v in edges)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: NOT (self.rank[i] > self.rank[j])", "Line 25: ", "Line 39: (u, v in edges)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: (self.rank[i] > self.rank[j])"], ["Line 39: (u, v in edges)", "Line 30: (self.id[u] != u)", "Line 30: (self.id[u] != u)", "Line 19: (i == j)", "Line 30: (self.id[u] != u)"], ["Line 39: (u, v in edges)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: (self.rank[i] > self.rank[j])", "Line 39: (u, v in edges)", "Line 30: (self.id[u] != u)", "Line 30: (self.id[u] != u)"]]}
{"task_num": 1976, "task_title": "Number of Ways to Arrive at Destination", "sampled_paths": [["LOOP #2: Entered while loop at line 30-42\n", "LOOP #3: Entered for loop at line 34-42\n", "BRANCH #2: Covered if branch at line 35-38\n", "LOOP #2: Entered while loop at line 30-42\n", "LOOP #3: Entered for loop at line 34-42\n"], ["LOOP #3: Entered for loop at line 34-42\n", "BRANCH #2: Covered if branch at line 35-38\n", "LOOP #3: Entered for loop at line 34-42\n", "BRANCH #2: Covered if branch at line 35-38\n", "LOOP #2: Entered while loop at line 30-42\n"], ["LOOP #1: Entered for loop at line 15-18\n", "LOOP #1: Entered for loop at line 15-18\n", "LOOP #1: Entered for loop at line 15-18\n", "LOOP #1: Entered for loop at line 15-18\n", "LOOP #2: Entered while loop at line 30-42\n"]], "sampled_condition_paths": [["Line 30: (minHeap)", "Line 34: (v, w in graph[u])", "Line 35: (d + w < dist[v])", "Line 30: (minHeap)", "Line 34: (v, w in graph[u])"], ["Line 34: (v, w in graph[u])", "Line 35: (d + w < dist[v])", "Line 34: (v, w in graph[u])", "Line 35: (d + w < dist[v])", "Line 30: (minHeap)"], ["Line 15: (u, v, w in roads)", "Line 15: (u, v, w in roads)", "Line 15: (u, v, w in roads)", "Line 15: (u, v, w in roads)", "Line 30: (minHeap)"]]}
{"task_num": 1977, "task_title": "Number of Ways to Separate Numbers", "sampled_paths": [["BRANCH #4: Covered if branch at line 33-35\n", "LOOP #3: Entered for loop at line 26-44\n", "LOOP #4: Entered for loop at line 27-44\n", "BRANCH #7: Covered else branch at line 42-43\n", "LOOP #4: Entered for loop at line 27-44\n"], ["BRANCH #1: Covered if branch at line 13-14\n"], ["LOOP #4: Entered for loop at line 27-44\n", "BRANCH #7: Covered else branch at line 42-43\n", "LOOP #4: Entered for loop at line 27-44\n", "BRANCH #4: Covered if branch at line 33-35\n", "LOOP #3: Entered for loop at line 26-44\n"]], "sampled_condition_paths": [["Line 33: (s == 0)", "Line 26: (i in range(n))", "Line 27: (k in range(1, i + 2))", "Line 40: NOT (l >= k or num[s - k + l] <= num[s + l])", "Line 42: ", "Line 27: (k in range(1, i + 2))"], ["Line 13: (num[0] == '0')"], ["Line 27: (k in range(1, i + 2))", "Line 40: NOT (l >= k or num[s - k + l] <= num[s + l])", "Line 42: ", "Line 27: (k in range(1, i + 2))", "Line 33: (s == 0)", "Line 26: (i in range(n))"]]}
{"task_num": 1994, "task_title": "The Number of Good Subsets", "sampled_paths": [["LOOP #3: Entered for loop at line 28-34\n", "BRANCH #4: Covered if branch at line 29-30\n", "LOOP #3: Entered for loop at line 28-34\n", "LOOP #3: Entered for loop at line 28-34\n", "BRANCH #4: Covered if branch at line 29-30\n"], ["LOOP #3: Entered for loop at line 28-34\n", "LOOP #3: Entered for loop at line 28-34\n", "BRANCH #4: Covered if branch at line 29-30\n", "LOOP #3: Entered for loop at line 28-34\n", "LOOP #3: Entered for loop at line 28-34\n"]], "sampled_condition_paths": [["Line 28: (primesMask in range(n))", "Line 29: (primesMask & numPrimesMask > 0)", "Line 28: (primesMask in range(n))", "Line 28: (primesMask in range(n))", "Line 29: (primesMask & numPrimesMask > 0)"], ["Line 28: (primesMask in range(n))", "Line 28: (primesMask in range(n))", "Line 29: (primesMask & numPrimesMask > 0)", "Line 28: (primesMask in range(n))", "Line 28: (primesMask in range(n))"]]}
{"task_num": 1998, "task_title": "GCD Sort of an Array", "sampled_paths": [["LOOP #6: Entered while loop at line 62-66\n", "LOOP #7: Entered while loop at line 65-66\n", "LOOP #7: Entered while loop at line 65-66\n", "LOOP #2: Entered for loop at line 43-45\n", "BRANCH #4: Covered else branch at line 25-27\n"], ["LOOP #5: Entered for loop at line 56-57\n", "LOOP #5: Entered for loop at line 56-57\n", "LOOP #4: Entered for loop at line 54-57\n", "BRANCH #7: Covered if branch at line 55-57\n", "LOOP #5: Entered for loop at line 56-57\n"], ["LOOP #6: Entered while loop at line 62-66\n", "LOOP #7: Entered while loop at line 65-66\n", "LOOP #2: Entered for loop at line 43-45\n", "BRANCH #1: Covered if branch at line 19-20\n", "LOOP #3: Entered for loop at line 46-49\n"], ["LOOP #2: Entered for loop at line 43-45\n", "BRANCH #5: Covered if branch at line 31-32\n", "BRANCH #3: Covered elif branch at line 23-24\n", "LOOP #1: Entered for loop at line 42-45\n", "LOOP #6: Entered while loop at line 62-66\n"], ["LOOP #5: Entered for loop at line 56-57\n", "LOOP #1: Entered for loop at line 42-45\n", "LOOP #6: Entered while loop at line 62-66\n", "LOOP #7: Entered while loop at line 65-66\n", "LOOP #2: Entered for loop at line 43-45\n"], ["BRANCH #5: Covered if branch at line 31-32\n", "LOOP #3: Entered for loop at line 46-49\n", "BRANCH #5: Covered if branch at line 31-32\n", "BRANCH #5: Covered if branch at line 31-32\n", "LOOP #3: Entered for loop at line 46-49\n"]], "sampled_condition_paths": [["Line 62: (num > 1)", "Line 65: (num % divisor == 0)", "Line 65: (num % divisor == 0)", "Line 43: (primeFactor in self._getPrimeFactors(num, minPrimeFactors))", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: NOT (self.rank[i] > self.rank[j])", "Line 25: "], ["Line 56: (j in range(i * i, n, i))", "Line 56: (j in range(i * i, n, i))", "Line 54: (i in range(2, int(n**0.5) + 1))", "Line 55: (minPrimeFactors[i] == i)", "Line 56: (j in range(i * i, n, i))"], ["Line 62: (num > 1)", "Line 65: (num % divisor == 0)", "Line 43: (primeFactor in self._getPrimeFactors(num, minPrimeFactors))", "Line 19: (i == j)", "Line 46: (a, b in zip(nums, sorted(nums)))"], ["Line 43: (primeFactor in self._getPrimeFactors(num, minPrimeFactors))", "Line 31: (self.id[u] != u)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: (self.rank[i] > self.rank[j])", "Line 42: (num in nums)", "Line 62: (num > 1)"], ["Line 56: (j in range(i * i, n, i))", "Line 42: (num in nums)", "Line 62: (num > 1)", "Line 65: (num % divisor == 0)", "Line 43: (primeFactor in self._getPrimeFactors(num, minPrimeFactors))"], ["Line 31: (self.id[u] != u)", "Line 46: (a, b in zip(nums, sorted(nums)))", "Line 31: (self.id[u] != u)", "Line 31: (self.id[u] != u)", "Line 46: (a, b in zip(nums, sorted(nums)))"]]}
{"task_num": 2019, "task_title": "The Score of Students Solving Math Expression", "sampled_paths": [["LOOP #3: Entered for loop at line 23-32\n", "LOOP #4: Entered for loop at line 25-32\n", "LOOP #5: Entered for loop at line 27-32\n", "LOOP #6: Entered for loop at line 28-32\n", "BRANCH #1: Covered if branch at line 30-31\n"], ["LOOP #6: Entered for loop at line 28-32\n", "BRANCH #1: Covered if branch at line 30-31\n", "LOOP #3: Entered for loop at line 23-32\n", "LOOP #4: Entered for loop at line 25-32\n", "LOOP #5: Entered for loop at line 27-32\n"], ["BRANCH #1: Covered if branch at line 30-31\n", "LOOP #7: Entered for loop at line 35-40\n", "BRANCH #2: Covered if branch at line 36-37\n", "LOOP #7: Entered for loop at line 35-40\n", "LOOP #7: Entered for loop at line 35-40\n"], ["LOOP #2: Entered for loop at line 22-32\n", "LOOP #3: Entered for loop at line 23-32\n", "LOOP #4: Entered for loop at line 25-32\n", "LOOP #5: Entered for loop at line 27-32\n", "LOOP #6: Entered for loop at line 28-32\n"], ["LOOP #6: Entered for loop at line 28-32\n", "BRANCH #1: Covered if branch at line 30-31\n", "LOOP #2: Entered for loop at line 22-32\n", "LOOP #3: Entered for loop at line 23-32\n", "LOOP #4: Entered for loop at line 25-32\n"], ["LOOP #4: Entered for loop at line 25-32\n", "LOOP #5: Entered for loop at line 27-32\n", "LOOP #6: Entered for loop at line 28-32\n", "BRANCH #1: Covered if branch at line 30-31\n", "LOOP #4: Entered for loop at line 25-32\n"]], "sampled_condition_paths": [["Line 23: (i in range(n - d))", "Line 25: (k in range(i, j))", "Line 27: (a in dp[i][k])", "Line 28: (b in dp[k + 1][j])", "Line 30: (res <= 1000)"], ["Line 28: (b in dp[k + 1][j])", "Line 30: (res <= 1000)", "Line 23: (i in range(n - d))", "Line 25: (k in range(i, j))", "Line 27: (a in dp[i][k])"], ["Line 30: (res <= 1000)", "Line 35: (answer, freq in collections.Counter(answers).items())", "Line 36: (answer == correctAnswer)", "Line 35: (answer, freq in collections.Counter(answers).items())", "Line 35: (answer, freq in collections.Counter(answers).items())"], ["Line 22: (d in range(1, n))", "Line 23: (i in range(n - d))", "Line 25: (k in range(i, j))", "Line 27: (a in dp[i][k])", "Line 28: (b in dp[k + 1][j])"], ["Line 28: (b in dp[k + 1][j])", "Line 30: (res <= 1000)", "Line 22: (d in range(1, n))", "Line 23: (i in range(n - d))", "Line 25: (k in range(i, j))"], ["Line 25: (k in range(i, j))", "Line 27: (a in dp[i][k])", "Line 28: (b in dp[k + 1][j])", "Line 30: (res <= 1000)", "Line 25: (k in range(i, j))"]]}
{"task_num": 2030, "task_title": "Smallest K-Length Subsequence With Occurrences of a Letter", "sampled_paths": [["BRANCH #3: Covered if branch at line 22-24\n", "BRANCH #5: Covered if branch at line 27-28\n", "LOOP #1: Entered for loop at line 17-29\n", "BRANCH #2: Covered if branch at line 21-26\n", "BRANCH #3: Covered if branch at line 22-24\n"], ["LOOP #1: Entered for loop at line 17-29\n", "BRANCH #2: Covered if branch at line 21-26\n", "BRANCH #3: Covered if branch at line 22-24\n", "BRANCH #5: Covered if branch at line 27-28\n", "LOOP #1: Entered for loop at line 17-29\n"], ["LOOP #1: Entered for loop at line 17-29\n", "BRANCH #2: Covered if branch at line 21-26\n", "BRANCH #4: Covered elif branch at line 25-26\n", "LOOP #1: Entered for loop at line 17-29\n", "LOOP #2: Entered while loop at line 18-20\n"], ["BRANCH #5: Covered if branch at line 27-28\n", "LOOP #1: Entered for loop at line 17-29\n", "BRANCH #2: Covered if branch at line 21-26\n", "BRANCH #3: Covered if branch at line 22-24\n", "BRANCH #5: Covered if branch at line 27-28\n"], ["BRANCH #2: Covered if branch at line 21-26\n", "BRANCH #3: Covered if branch at line 22-24\n", "BRANCH #5: Covered if branch at line 27-28\n", "LOOP #1: Entered for loop at line 17-29\n", "BRANCH #2: Covered if branch at line 21-26\n"]], "sampled_condition_paths": [["Line 22: (c == letter)", "Line 27: (c == letter)", "Line 17: (i, c in enumerate(s))", "Line 21: (len(stack) < k)", "Line 22: (c == letter)"], ["Line 17: (i, c in enumerate(s))", "Line 21: (len(stack) < k)", "Line 22: (c == letter)", "Line 27: (c == letter)", "Line 17: (i, c in enumerate(s))"], ["Line 17: (i, c in enumerate(s))", "Line 21: (len(stack) < k)", "Line 22: NOT (c == letter)", "Line 25: (k - len(stack) > required)", "Line 17: (i, c in enumerate(s))", "Line 18: (stack and stack[-1] > c  and len(stack) + len(s) - i - 1 >= k and (stack[-1] != letter or nLetters > required))"], ["Line 27: (c == letter)", "Line 17: (i, c in enumerate(s))", "Line 21: (len(stack) < k)", "Line 22: (c == letter)", "Line 27: (c == letter)"], ["Line 21: (len(stack) < k)", "Line 22: (c == letter)", "Line 27: (c == letter)", "Line 17: (i, c in enumerate(s))", "Line 21: (len(stack) < k)"]]}
{"task_num": 2040, "task_title": "Kth Smallest Product of Two Sorted Arrays", "sampled_paths": [["LOOP #1: Entered for loop at line 31-34\n", "LOOP #1: Entered for loop at line 31-34\n", "BRANCH #3: Covered if branch at line 42-43\n", "LOOP #3: Entered while loop at line 40-46\n", "LOOP #1: Entered for loop at line 31-34\n"], ["LOOP #1: Entered for loop at line 31-34\n", "LOOP #1: Entered for loop at line 31-34\n", "LOOP #1: Entered for loop at line 31-34\n", "BRANCH #3: Covered if branch at line 42-43\n", "LOOP #3: Entered while loop at line 40-46\n"], ["BRANCH #3: Covered if branch at line 42-43\n", "LOOP #3: Entered while loop at line 40-46\n", "LOOP #1: Entered for loop at line 31-34\n", "LOOP #1: Entered for loop at line 31-34\n", "BRANCH #3: Covered if branch at line 42-43\n"]], "sampled_condition_paths": [["Line 31: (i in range(len(A)))", "Line 31: (i in range(len(A)))", "Line 42: (numProductNoGreaterThan(A1, B1, m) + numProductNoGreaterThan(A2, B2, m) >= k)", "Line 40: (l < r)", "Line 31: (i in range(len(A)))"], ["Line 31: (i in range(len(A)))", "Line 31: (i in range(len(A)))", "Line 31: (i in range(len(A)))", "Line 42: (numProductNoGreaterThan(A1, B1, m) + numProductNoGreaterThan(A2, B2, m) >= k)", "Line 40: (l < r)"], ["Line 42: (numProductNoGreaterThan(A1, B1, m) + numProductNoGreaterThan(A2, B2, m) >= k)", "Line 40: (l < r)", "Line 31: (i in range(len(A)))", "Line 31: (i in range(len(A)))", "Line 42: (numProductNoGreaterThan(A1, B1, m) + numProductNoGreaterThan(A2, B2, m) >= k)"]]}
{"task_num": 2045, "task_title": "Second Minimum Time to Reach Destination", "sampled_paths": [["LOOP #1: Entered for loop at line 18-21\n", "LOOP #1: Entered for loop at line 18-21\n", "LOOP #1: Entered for loop at line 18-21\n", "LOOP #2: Entered while loop at line 22-37\n", "LOOP #3: Entered for loop at line 28-37\n"], ["BRANCH #2: Covered elif branch at line 32-36\n", "LOOP #2: Entered while loop at line 22-37\n", "LOOP #3: Entered for loop at line 28-37\n", "BRANCH #2: Covered elif branch at line 32-36\n", "BRANCH #3: Covered if branch at line 33-34\n"], ["LOOP #2: Entered while loop at line 22-37\n", "LOOP #3: Entered for loop at line 28-37\n", "LOOP #3: Entered for loop at line 28-37\n", "BRANCH #2: Covered elif branch at line 32-36\n", "LOOP #2: Entered while loop at line 22-37\n"], ["LOOP #3: Entered for loop at line 28-37\n", "BRANCH #2: Covered elif branch at line 32-36\n", "LOOP #2: Entered while loop at line 22-37\n", "LOOP #3: Entered for loop at line 28-37\n", "BRANCH #2: Covered elif branch at line 32-36\n"]], "sampled_condition_paths": [["Line 18: (u, v in edges)", "Line 18: (u, v in edges)", "Line 18: (u, v in edges)", "Line 22: (q)", "Line 28: (j in graph[i])"], ["Line 29: NOT (newTime < minTime[j][0])", "Line 32: (minTime[j][0] < newTime < minTime[j][1])", "Line 22: (q)", "Line 28: (j in graph[i])", "Line 29: NOT (newTime < minTime[j][0])", "Line 32: (minTime[j][0] < newTime < minTime[j][1])", "Line 33: (j == n)"], ["Line 22: (q)", "Line 28: (j in graph[i])", "Line 28: (j in graph[i])", "Line 29: NOT (newTime < minTime[j][0])", "Line 32: (minTime[j][0] < newTime < minTime[j][1])", "Line 22: (q)"], ["Line 28: (j in graph[i])", "Line 29: NOT (newTime < minTime[j][0])", "Line 32: (minTime[j][0] < newTime < minTime[j][1])", "Line 22: (q)", "Line 28: (j in graph[i])", "Line 29: NOT (newTime < minTime[j][0])", "Line 32: (minTime[j][0] < newTime < minTime[j][1])"]]}
{"task_num": 2059, "task_title": "Minimum Operations to Convert Number", "sampled_paths": [["LOOP #4: Entered for loop at line 22-29\n", "BRANCH #2: Covered if branch at line 25-26\n", "LOOP #3: Entered for loop at line 21-29\n", "LOOP #4: Entered for loop at line 22-29\n", "LOOP #4: Entered for loop at line 22-29\n"], ["LOOP #4: Entered for loop at line 22-29\n", "BRANCH #2: Covered if branch at line 25-26\n", "LOOP #4: Entered for loop at line 22-29\n", "BRANCH #2: Covered if branch at line 25-26\n", "LOOP #3: Entered for loop at line 21-29\n"], ["LOOP #4: Entered for loop at line 22-29\n", "BRANCH #2: Covered if branch at line 25-26\n", "LOOP #4: Entered for loop at line 22-29\n", "BRANCH #2: Covered if branch at line 25-26\n", "LOOP #2: Entered for loop at line 19-29\n"], ["LOOP #3: Entered for loop at line 21-29\n", "LOOP #4: Entered for loop at line 22-29\n", "LOOP #4: Entered for loop at line 22-29\n", "BRANCH #2: Covered if branch at line 25-26\n", "LOOP #4: Entered for loop at line 22-29\n"], ["BRANCH #2: Covered if branch at line 25-26\n", "LOOP #4: Entered for loop at line 22-29\n", "BRANCH #2: Covered if branch at line 25-26\n", "LOOP #1: Entered while loop at line 17-29\n", "LOOP #2: Entered for loop at line 19-29\n"], ["BRANCH #2: Covered if branch at line 25-26\n", "LOOP #3: Entered for loop at line 21-29\n", "LOOP #4: Entered for loop at line 22-29\n", "LOOP #4: Entered for loop at line 22-29\n", "BRANCH #2: Covered if branch at line 25-26\n"]], "sampled_condition_paths": [["Line 22: (res in (x + num, x - num, x ^ num))", "Line 25: (res < 0 or res > 1000 or res in seen)", "Line 21: (num in nums)", "Line 22: (res in (x + num, x - num, x ^ num))", "Line 22: (res in (x + num, x - num, x ^ num))"], ["Line 22: (res in (x + num, x - num, x ^ num))", "Line 25: (res < 0 or res > 1000 or res in seen)", "Line 22: (res in (x + num, x - num, x ^ num))", "Line 25: (res < 0 or res > 1000 or res in seen)", "Line 21: (num in nums)"], ["Line 22: (res in (x + num, x - num, x ^ num))", "Line 25: (res < 0 or res > 1000 or res in seen)", "Line 22: (res in (x + num, x - num, x ^ num))", "Line 25: (res < 0 or res > 1000 or res in seen)", "Line 19: (_ in range(len(q)))"], ["Line 21: (num in nums)", "Line 22: (res in (x + num, x - num, x ^ num))", "Line 22: (res in (x + num, x - num, x ^ num))", "Line 25: (res < 0 or res > 1000 or res in seen)", "Line 22: (res in (x + num, x - num, x ^ num))"], ["Line 25: (res < 0 or res > 1000 or res in seen)", "Line 22: (res in (x + num, x - num, x ^ num))", "Line 25: (res < 0 or res > 1000 or res in seen)", "Line 17: (q)", "Line 19: (_ in range(len(q)))"], ["Line 25: (res < 0 or res > 1000 or res in seen)", "Line 21: (num in nums)", "Line 22: (res in (x + num, x - num, x ^ num))", "Line 22: (res in (x + num, x - num, x ^ num))", "Line 25: (res < 0 or res > 1000 or res in seen)"]]}
{"task_num": 2076, "task_title": "Process Restricted Friend Requests", "sampled_paths": [["LOOP #1: Entered for loop at line 40-54\n", "BRANCH #6: Covered if branch at line 44-50\n", "LOOP #2: Entered for loop at line 45-50\n", "BRANCH #5: Covered if branch at line 30-31\n", "BRANCH #7: Covered if branch at line 48-50\n"], ["BRANCH #5: Covered if branch at line 30-31\n", "BRANCH #6: Covered if branch at line 44-50\n", "LOOP #2: Entered for loop at line 45-50\n", "BRANCH #5: Covered if branch at line 30-31\n", "BRANCH #7: Covered if branch at line 48-50\n"], ["LOOP #2: Entered for loop at line 45-50\n", "LOOP #2: Entered for loop at line 45-50\n", "BRANCH #8: Covered if branch at line 52-53\n", "BRANCH #4: Covered else branch at line 25-27\n", "LOOP #1: Entered for loop at line 40-54\n"]], "sampled_condition_paths": [["Line 40: (u, v in requests)", "Line 44: (pu != pv)", "Line 45: (x, y in restrictions)", "Line 30: (self.id[u] != u)", "Line 48: ((pu, pv) in [(px, py), (py, px)])"], ["Line 30: (self.id[u] != u)", "Line 44: (pu != pv)", "Line 45: (x, y in restrictions)", "Line 30: (self.id[u] != u)", "Line 48: ((pu, pv) in [(px, py), (py, px)])"], ["Line 45: (x, y in restrictions)", "Line 45: (x, y in restrictions)", "Line 52: (isValid)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: NOT (self.rank[i] > self.rank[j])", "Line 25: ", "Line 40: (u, v in requests)"]]}
{"task_num": 2086, "task_title": "Minimum Number of Food Buckets to Feed the Hamsters", "sampled_paths": [["LOOP #1: Entered for loop at line 15-25\n", "BRANCH #1: Covered if branch at line 16-24\n", "BRANCH #4: Covered elif branch at line 21-22\n", "LOOP #1: Entered for loop at line 15-25\n", "BRANCH #1: Covered if branch at line 16-24\n"], ["LOOP #1: Entered for loop at line 15-25\n", "LOOP #1: Entered for loop at line 15-25\n", "BRANCH #1: Covered if branch at line 16-24\n", "BRANCH #2: Covered if branch at line 17-18\n", "LOOP #1: Entered for loop at line 15-25\n"], ["BRANCH #3: Covered if branch at line 19-20\n", "LOOP #1: Entered for loop at line 15-25\n", "LOOP #1: Entered for loop at line 15-25\n", "LOOP #1: Entered for loop at line 15-25\n", "BRANCH #1: Covered if branch at line 16-24\n"], ["BRANCH #1: Covered if branch at line 16-24\n", "BRANCH #4: Covered elif branch at line 21-22\n", "LOOP #1: Entered for loop at line 15-25\n", "BRANCH #1: Covered if branch at line 16-24\n", "BRANCH #5: Covered else branch at line 23-24\n"]], "sampled_condition_paths": [["Line 15: (i, c in enumerate(A))", "Line 16: (c == 'H')", "Line 19: NOT (i + 1 < len(A) and A[i + 1] == '.')", "Line 21: (i > 0 and A[i - 1] == '.')", "Line 15: (i, c in enumerate(A))", "Line 16: (c == 'H')"], ["Line 15: (i, c in enumerate(A))", "Line 15: (i, c in enumerate(A))", "Line 16: (c == 'H')", "Line 17: (i > 0 and A[i - 1] == 'B')", "Line 15: (i, c in enumerate(A))"], ["Line 19: (i + 1 < len(A) and A[i + 1] == '.')", "Line 15: (i, c in enumerate(A))", "Line 15: (i, c in enumerate(A))", "Line 15: (i, c in enumerate(A))", "Line 16: (c == 'H')"], ["Line 16: (c == 'H')", "Line 19: NOT (i + 1 < len(A) and A[i + 1] == '.')", "Line 21: (i > 0 and A[i - 1] == '.')", "Line 15: (i, c in enumerate(A))", "Line 16: (c == 'H')", "Line 19: NOT (i + 1 < len(A) and A[i + 1] == '.')", "Line 21: NOT (i > 0 and A[i - 1] == '.')", "Line 23: "]]}
{"task_num": 2092, "task_title": "Find All People With Secret", "sampled_paths": [["LOOP #4: Entered for loop at line 57-60\n", "BRANCH #6: Covered if branch at line 58-59\n", "LOOP #2: Entered for loop at line 51-60\n", "LOOP #3: Entered for loop at line 53-56\n", "BRANCH #3: Covered elif branch at line 23-24\n"], ["BRANCH #7: Covered if branch at line 63-64\n", "LOOP #5: Entered for loop at line 62-64\n", "BRANCH #7: Covered if branch at line 63-64\n", "LOOP #5: Entered for loop at line 62-64\n", "LOOP #5: Entered for loop at line 62-64\n"], ["LOOP #4: Entered for loop at line 57-60\n", "LOOP #2: Entered for loop at line 51-60\n", "LOOP #3: Entered for loop at line 53-56\n", "BRANCH #5: Covered if branch at line 36-37\n", "BRANCH #3: Covered elif branch at line 23-24\n"], ["BRANCH #3: Covered elif branch at line 23-24\n", "LOOP #4: Entered for loop at line 57-60\n", "LOOP #4: Entered for loop at line 57-60\n", "LOOP #4: Entered for loop at line 57-60\n", "LOOP #2: Entered for loop at line 51-60\n"], ["BRANCH #5: Covered if branch at line 36-37\n", "BRANCH #3: Covered elif branch at line 23-24\n", "LOOP #4: Entered for loop at line 57-60\n", "LOOP #4: Entered for loop at line 57-60\n", "LOOP #5: Entered for loop at line 62-64\n"]], "sampled_condition_paths": [["Line 57: (person in peopleUnioned)", "Line 58: (not uf.connected(person, 0))", "Line 51: (_, pairs in sorted(timeToPairs.items(), key=lambda x: x[0]))", "Line 53: (x, y in pairs)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: (self.rank[i] > self.rank[j])"], ["Line 63: (uf.connected(i, 0))", "Line 62: (i in range(n))", "Line 63: (uf.connected(i, 0))", "Line 62: (i in range(n))", "Line 62: (i in range(n))"], ["Line 57: (person in peopleUnioned)", "Line 51: (_, pairs in sorted(timeToPairs.items(), key=lambda x: x[0]))", "Line 53: (x, y in pairs)", "Line 36: (self.id[u] != u)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: (self.rank[i] > self.rank[j])"], ["Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: (self.rank[i] > self.rank[j])", "Line 57: (person in peopleUnioned)", "Line 57: (person in peopleUnioned)", "Line 57: (person in peopleUnioned)", "Line 51: (_, pairs in sorted(timeToPairs.items(), key=lambda x: x[0]))"], ["Line 36: (self.id[u] != u)", "Line 21: NOT (self.rank[i] < self.rank[j])", "Line 23: (self.rank[i] > self.rank[j])", "Line 57: (person in peopleUnioned)", "Line 57: (person in peopleUnioned)", "Line 62: (i in range(n))"]]}
{"task_num": 2115, "task_title": "Find All Possible Recipes from Given Supplies", "sampled_paths": [["BRANCH #1: Covered if branch at line 21-23\n", "LOOP #2: Entered for loop at line 20-24\n", "LOOP #3: Entered for loop at line 25-28\n", "BRANCH #2: Covered if branch at line 26-27\n", "LOOP #3: Entered for loop at line 25-28\n"], ["LOOP #2: Entered for loop at line 20-24\n", "BRANCH #1: Covered if branch at line 21-23\n", "LOOP #2: Entered for loop at line 20-24\n", "LOOP #3: Entered for loop at line 25-28\n", "BRANCH #2: Covered if branch at line 26-27\n"], ["LOOP #3: Entered for loop at line 25-28\n", "LOOP #4: Entered while loop at line 29-36\n", "LOOP #5: Entered for loop at line 32-36\n", "BRANCH #3: Covered if branch at line 34-35\n", "LOOP #5: Entered for loop at line 32-36\n"], ["LOOP #4: Entered while loop at line 29-36\n", "LOOP #5: Entered for loop at line 32-36\n", "BRANCH #3: Covered if branch at line 34-35\n", "LOOP #5: Entered for loop at line 32-36\n", "LOOP #4: Entered while loop at line 29-36\n"], ["LOOP #2: Entered for loop at line 20-24\n", "LOOP #2: Entered for loop at line 20-24\n", "LOOP #3: Entered for loop at line 25-28\n", "BRANCH #2: Covered if branch at line 26-27\n", "LOOP #4: Entered while loop at line 29-36\n"]], "sampled_condition_paths": [["Line 21: (ingredient not in supplies)", "Line 20: (ingredient in ingredients[i])", "Line 25: (recipe in recipes)", "Line 26: (inDegrees[recipe] == 0)", "Line 25: (recipe in recipes)"], ["Line 20: (ingredient in ingredients[i])", "Line 21: (ingredient not in supplies)", "Line 20: (ingredient in ingredients[i])", "Line 25: (recipe in recipes)", "Line 26: (inDegrees[recipe] == 0)"], ["Line 25: (recipe in recipes)", "Line 29: (q)", "Line 32: (v in graph[u])", "Line 34: (inDegrees[v] == 0)", "Line 32: (v in graph[u])"], ["Line 29: (q)", "Line 32: (v in graph[u])", "Line 34: (inDegrees[v] == 0)", "Line 32: (v in graph[u])", "Line 29: (q)"], ["Line 20: (ingredient in ingredients[i])", "Line 20: (ingredient in ingredients[i])", "Line 25: (recipe in recipes)", "Line 26: (inDegrees[recipe] == 0)", "Line 29: (q)"]]}
{"task_num": 2127, "task_title": "Maximum Employees to Be Invited to a Meeting", "sampled_paths": [["LOOP #6: Entered while loop at line 62-64\n", "LOOP #6: Entered while loop at line 62-64\n", "LOOP #7: Entered for loop at line 68-71\n", "LOOP #7: Entered for loop at line 68-71\n", "BRANCH #5: Covered if branch at line 69-70\n"], ["LOOP #7: Entered for loop at line 68-71\n", "BRANCH #5: Covered if branch at line 69-70\n", "LOOP #5: Entered for loop at line 55-65\n", "BRANCH #3: Covered if branch at line 56-58\n", "LOOP #5: Entered for loop at line 55-65\n"], ["LOOP #4: Entered for loop at line 42-45\n", "LOOP #4: Entered for loop at line 42-45\n", "LOOP #7: Entered for loop at line 68-71\n", "BRANCH #5: Covered if branch at line 69-70\n", "LOOP #5: Entered for loop at line 55-65\n"], ["LOOP #4: Entered for loop at line 42-45\n", "LOOP #4: Entered for loop at line 42-45\n", "BRANCH #2: Covered if branch at line 43-44\n", "LOOP #4: Entered for loop at line 42-45\n", "BRANCH #2: Covered if branch at line 43-44\n"], ["LOOP #4: Entered for loop at line 42-45\n", "BRANCH #2: Covered if branch at line 43-44\n", "LOOP #4: Entered for loop at line 42-45\n", "BRANCH #2: Covered if branch at line 43-44\n", "LOOP #4: Entered for loop at line 42-45\n"]], "sampled_condition_paths": [["Line 62: (curr != v)", "Line 62: (curr != v)", "Line 68: (i in range(n))", "Line 68: (i in range(n))", "Line 69: (i not in seen)"], ["Line 68: (i in range(n))", "Line 69: (i not in seen)", "Line 55: (v in graph[u])", "Line 56: (v not in seen)", "Line 55: (v in graph[u])"], ["Line 42: (i in range(n))", "Line 42: (i in range(n))", "Line 68: (i in range(n))", "Line 69: (i not in seen)", "Line 55: (v in graph[u])"], ["Line 42: (i in range(n))", "Line 42: (i in range(n))", "Line 43: (favorite[favorite[i]] == i)", "Line 42: (i in range(n))", "Line 43: (favorite[favorite[i]] == i)"], ["Line 42: (i in range(n))", "Line 43: (favorite[favorite[i]] == i)", "Line 42: (i in range(n))", "Line 43: (favorite[favorite[i]] == i)", "Line 42: (i in range(n))"]]}
{"task_num": 2132, "task_title": "Stamping the Grid", "sampled_paths": [["LOOP #4: Entered for loop at line 29-31\n", "LOOP #3: Entered for loop at line 28-31\n", "LOOP #4: Entered for loop at line 29-31\n", "LOOP #4: Entered for loop at line 29-31\n", "LOOP #4: Entered for loop at line 29-31\n"], ["LOOP #2: Entered for loop at line 20-27\n", "BRANCH #1: Covered if branch at line 22-26\n", "BRANCH #2: Covered if branch at line 25-26\n", "LOOP #1: Entered for loop at line 19-27\n", "LOOP #2: Entered for loop at line 20-27\n"], ["LOOP #2: Entered for loop at line 20-27\n", "LOOP #2: Entered for loop at line 20-27\n", "BRANCH #1: Covered if branch at line 22-26\n", "LOOP #2: Entered for loop at line 20-27\n", "BRANCH #1: Covered if branch at line 22-26\n"], ["LOOP #2: Entered for loop at line 20-27\n", "BRANCH #1: Covered if branch at line 22-26\n", "LOOP #2: Entered for loop at line 20-27\n", "BRANCH #1: Covered if branch at line 22-26\n", "BRANCH #2: Covered if branch at line 25-26\n"]], "sampled_condition_paths": [["Line 29: (j in range(n))", "Line 28: (i in range(m))", "Line 29: (j in range(n))", "Line 29: (j in range(n))", "Line 29: (j in range(n))"], ["Line 20: (j in range(n))", "Line 22: (i + 1 >= stampHeight and j + 1 >= stampWidth)", "Line 25: (A[i + 1][j + 1] - A[x][j + 1] - A[i + 1][y] + A[x][y] == 0)", "Line 19: (i in range(m))", "Line 20: (j in range(n))"], ["Line 20: (j in range(n))", "Line 20: (j in range(n))", "Line 22: (i + 1 >= stampHeight and j + 1 >= stampWidth)", "Line 20: (j in range(n))", "Line 22: (i + 1 >= stampHeight and j + 1 >= stampWidth)"], ["Line 20: (j in range(n))", "Line 22: (i + 1 >= stampHeight and j + 1 >= stampWidth)", "Line 20: (j in range(n))", "Line 22: (i + 1 >= stampHeight and j + 1 >= stampWidth)", "Line 25: (A[i + 1][j + 1] - A[x][j + 1] - A[i + 1][y] + A[x][y] == 0)"]]}
{"task_num": 2146, "task_title": "K Highest Ranked Items Within a Price Range", "sampled_paths": [["BRANCH #3: Covered if branch at line 35-36\n", "LOOP #3: Entered for loop at line 32-42\n", "BRANCH #5: Covered if branch at line 39-40\n", "LOOP #3: Entered for loop at line 32-42\n", "BRANCH #5: Covered if branch at line 39-40\n"], ["LOOP #2: Entered for loop at line 30-42\n", "LOOP #3: Entered for loop at line 32-42\n", "BRANCH #3: Covered if branch at line 35-36\n", "LOOP #3: Entered for loop at line 32-42\n", "LOOP #3: Entered for loop at line 32-42\n"], ["LOOP #3: Entered for loop at line 32-42\n", "BRANCH #3: Covered if branch at line 35-36\n", "LOOP #3: Entered for loop at line 32-42\n", "LOOP #3: Entered for loop at line 32-42\n", "BRANCH #4: Covered if branch at line 37-38\n"], ["LOOP #3: Entered for loop at line 32-42\n", "BRANCH #3: Covered if branch at line 35-36\n", "LOOP #3: Entered for loop at line 32-42\n", "BRANCH #3: Covered if branch at line 35-36\n", "LOOP #4: Entered for loop at line 44-49\n"], ["BRANCH #3: Covered if branch at line 35-36\n", "LOOP #3: Entered for loop at line 32-42\n", "BRANCH #4: Covered if branch at line 37-38\n", "LOOP #4: Entered for loop at line 44-49\n", "BRANCH #6: Covered if branch at line 45-46\n"], ["LOOP #1: Entered while loop at line 28-49\n", "LOOP #2: Entered for loop at line 30-42\n", "LOOP #3: Entered for loop at line 32-42\n", "BRANCH #4: Covered if branch at line 37-38\n", "LOOP #3: Entered for loop at line 32-42\n"]], "sampled_condition_paths": [["Line 35: (x < 0 or x == m or y < 0 or y == n)", "Line 32: (t in range(4))", "Line 39: (low <= grid[x][y] <= high)", "Line 32: (t in range(4))", "Line 39: (low <= grid[x][y] <= high)"], ["Line 30: (_ in range(len(q)))", "Line 32: (t in range(4))", "Line 35: (x < 0 or x == m or y < 0 or y == n)", "Line 32: (t in range(4))", "Line 32: (t in range(4))"], ["Line 32: (t in range(4))", "Line 35: (x < 0 or x == m or y < 0 or y == n)", "Line 32: (t in range(4))", "Line 32: (t in range(4))", "Line 37: (not grid[x][y] or (x, y) in seen)"], ["Line 32: (t in range(4))", "Line 35: (x < 0 or x == m or y < 0 or y == n)", "Line 32: (t in range(4))", "Line 35: (x < 0 or x == m or y < 0 or y == n)", "Line 44: (neighbor in neighbors)"], ["Line 35: (x < 0 or x == m or y < 0 or y == n)", "Line 32: (t in range(4))", "Line 37: (not grid[x][y] or (x, y) in seen)", "Line 44: (neighbor in neighbors)", "Line 45: (len(ans) < k)"], ["Line 28: (q)", "Line 30: (_ in range(len(q)))", "Line 32: (t in range(4))", "Line 37: (not grid[x][y] or (x, y) in seen)", "Line 32: (t in range(4))"]]}
{"task_num": 2157, "task_title": "Groups of Strings", "sampled_paths": [["LOOP #5: Entered for loop at line 61-63\n", "LOOP #2: Entered for loop at line 47-50\n", "BRANCH #5: Covered if branch at line 48-49\n", "LOOP #5: Entered for loop at line 61-63\n", "LOOP #2: Entered for loop at line 47-50\n"], ["LOOP #2: Entered for loop at line 47-50\n", "BRANCH #5: Covered if branch at line 48-49\n", "LOOP #5: Entered for loop at line 61-63\n", "LOOP #2: Entered for loop at line 47-50\n", "BRANCH #5: Covered if branch at line 48-49\n"], ["LOOP #3: Entered for loop at line 52-55\n", "LOOP #3: Entered for loop at line 52-55\n", "LOOP #3: Entered for loop at line 52-55\n", "LOOP #3: Entered for loop at line 52-55\n", "LOOP #3: Entered for loop at line 52-55\n"]], "sampled_condition_paths": [["Line 61: (m in getAddedMasks(mask))", "Line 47: (i in range(26))", "Line 48: (not (mask >> i & 1))", "Line 61: (m in getAddedMasks(mask))", "Line 47: (i in range(26))"], ["Line 47: (i in range(26))", "Line 48: (not (mask >> i & 1))", "Line 61: (m in getAddedMasks(mask))", "Line 47: (i in range(26))", "Line 48: (not (mask >> i & 1))"], ["Line 52: (i in range(26))", "Line 52: (i in range(26))", "Line 52: (i in range(26))", "Line 52: (i in range(26))", "Line 52: (i in range(26))"]]}
{"task_num": 2182, "task_title": "Construct String With Repeat Limit", "sampled_paths": [["LOOP #2: Entered for loop at line 28-30\n", "LOOP #2: Entered for loop at line 28-30\n", "LOOP #2: Entered for loop at line 28-30\n", "LOOP #2: Entered for loop at line 28-30\n", "LOOP #2: Entered for loop at line 28-30\n"], ["LOOP #3: Entered for loop at line 34-36\n", "LOOP #3: Entered for loop at line 34-36\n", "LOOP #3: Entered for loop at line 34-36\n", "LOOP #3: Entered for loop at line 34-36\n", "LOOP #3: Entered for loop at line 34-36\n"], ["BRANCH #3: Covered if branch at line 35-36\n", "LOOP #1: Entered while loop at line 16-24\n", "LOOP #2: Entered for loop at line 28-30\n", "LOOP #2: Entered for loop at line 28-30\n", "LOOP #2: Entered for loop at line 28-30\n"], ["BRANCH #2: Covered if branch at line 29-30\n", "LOOP #3: Entered for loop at line 34-36\n", "LOOP #3: Entered for loop at line 34-36\n", "LOOP #3: Entered for loop at line 34-36\n", "LOOP #3: Entered for loop at line 34-36\n"]], "sampled_condition_paths": [["Line 28: (c in reversed(string.ascii_lowercase))", "Line 28: (c in reversed(string.ascii_lowercase))", "Line 28: (c in reversed(string.ascii_lowercase))", "Line 28: (c in reversed(string.ascii_lowercase))", "Line 28: (c in reversed(string.ascii_lowercase))"], ["Line 34: (c in reversed(string.ascii_lowercase))", "Line 34: (c in reversed(string.ascii_lowercase))", "Line 34: (c in reversed(string.ascii_lowercase))", "Line 34: (c in reversed(string.ascii_lowercase))", "Line 34: (c in reversed(string.ascii_lowercase))"], ["Line 35: (count[c] and (not ans or ans[-1] != c))", "Line 16: (True)", "Line 28: (c in reversed(string.ascii_lowercase))", "Line 28: (c in reversed(string.ascii_lowercase))", "Line 28: (c in reversed(string.ascii_lowercase))"], ["Line 29: (count[c])", "Line 34: (c in reversed(string.ascii_lowercase))", "Line 34: (c in reversed(string.ascii_lowercase))", "Line 34: (c in reversed(string.ascii_lowercase))", "Line 34: (c in reversed(string.ascii_lowercase))"]]}
{"task_num": 2203, "task_title": "Minimum Weighted Subgraph With the Required Paths", "sampled_paths": [["LOOP #2: Entered while loop at line 35-43\n", "LOOP #2: Entered while loop at line 35-43\n", "LOOP #3: Entered for loop at line 39-43\n", "LOOP #2: Entered while loop at line 35-43\n", "BRANCH #3: Covered if branch at line 37-38\n"], ["BRANCH #4: Covered if branch at line 40-42\n", "LOOP #2: Entered while loop at line 35-43\n", "LOOP #2: Entered while loop at line 35-43\n", "LOOP #2: Entered while loop at line 35-43\n", "BRANCH #1: Covered if branch at line 24-25\n"], ["LOOP #1: Entered for loop at line 16-19\n", "LOOP #1: Entered for loop at line 16-19\n", "LOOP #1: Entered for loop at line 16-19\n", "LOOP #1: Entered for loop at line 16-19\n", "LOOP #1: Entered for loop at line 16-19\n"]], "sampled_condition_paths": [["Line 35: (minHeap)", "Line 35: (minHeap)", "Line 39: (v, w in graph[u])", "Line 35: (minHeap)", "Line 37: (d > dist[u])"], ["Line 40: (d + w < dist[v])", "Line 35: (minHeap)", "Line 35: (minHeap)", "Line 35: (minHeap)", "Line 24: (minWeight == math.inf)"], ["Line 16: (u, v, w in edges)", "Line 16: (u, v, w in edges)", "Line 16: (u, v, w in edges)", "Line 16: (u, v, w in edges)", "Line 16: (u, v, w in edges)"]]}
{"task_num": 2242, "task_title": "Maximum Score of a Node Sequence", "sampled_paths": [["LOOP #3: Entered for loop at line 24-29\n", "LOOP #4: Entered for loop at line 25-29\n", "LOOP #5: Entered for loop at line 26-29\n", "LOOP #5: Entered for loop at line 26-29\n", "LOOP #5: Entered for loop at line 26-29\n"], ["LOOP #5: Entered for loop at line 26-29\n", "LOOP #5: Entered for loop at line 26-29\n", "LOOP #3: Entered for loop at line 24-29\n", "LOOP #4: Entered for loop at line 25-29\n", "LOOP #5: Entered for loop at line 26-29\n"], ["LOOP #1: Entered for loop at line 17-20\n", "LOOP #1: Entered for loop at line 17-20\n", "LOOP #1: Entered for loop at line 17-20\n", "LOOP #1: Entered for loop at line 17-20\n", "LOOP #1: Entered for loop at line 17-20\n"], ["LOOP #4: Entered for loop at line 25-29\n", "LOOP #5: Entered for loop at line 26-29\n", "LOOP #5: Entered for loop at line 26-29\n", "BRANCH #1: Covered if branch at line 27-28\n", "LOOP #3: Entered for loop at line 24-29\n"]], "sampled_condition_paths": [["Line 24: (u, v in edges)", "Line 25: (scoreA, a in graph[u])", "Line 26: (scoreB, b in graph[v])", "Line 26: (scoreB, b in graph[v])", "Line 26: (scoreB, b in graph[v])"], ["Line 26: (scoreB, b in graph[v])", "Line 26: (scoreB, b in graph[v])", "Line 24: (u, v in edges)", "Line 25: (scoreA, a in graph[u])", "Line 26: (scoreB, b in graph[v])"], ["Line 17: (u, v in edges)", "Line 17: (u, v in edges)", "Line 17: (u, v in edges)", "Line 17: (u, v in edges)", "Line 17: (u, v in edges)"], ["Line 25: (scoreA, a in graph[u])", "Line 26: (scoreB, b in graph[v])", "Line 26: (scoreB, b in graph[v])", "Line 27: (a != b and a != v and b != u)", "Line 24: (u, v in edges)"]]}
{"task_num": 2245, "task_title": "Maximum Trailing Zeros in a Cornered Path", "sampled_paths": [["LOOP #1: Entered while loop at line 22-24\n", "LOOP #1: Entered while loop at line 22-24\n", "LOOP #1: Entered while loop at line 22-24\n", "LOOP #5: Entered for loop at line 36-42\n", "BRANCH #2: Covered if branch at line 39-41\n"], ["LOOP #5: Entered for loop at line 36-42\n", "LOOP #1: Entered while loop at line 22-24\n", "LOOP #1: Entered while loop at line 22-24\n", "LOOP #1: Entered while loop at line 22-24\n", "BRANCH #2: Covered if branch at line 39-41\n"], ["LOOP #7: Entered for loop at line 45-57\n", "LOOP #7: Entered for loop at line 45-57\n", "LOOP #1: Entered while loop at line 22-24\n", "LOOP #7: Entered for loop at line 45-57\n", "LOOP #6: Entered for loop at line 44-57\n"], ["LOOP #1: Entered while loop at line 22-24\n", "LOOP #7: Entered for loop at line 45-57\n", "LOOP #1: Entered while loop at line 22-24\n", "LOOP #1: Entered while loop at line 22-24\n", "LOOP #1: Entered while loop at line 22-24\n"]], "sampled_condition_paths": [["Line 22: (num % factor == 0)", "Line 22: (num % factor == 0)", "Line 22: (num % factor == 0)", "Line 36: (i in range(m))", "Line 39: (i)"], ["Line 36: (i in range(m))", "Line 22: (num % factor == 0)", "Line 22: (num % factor == 0)", "Line 22: (num % factor == 0)", "Line 39: (i)"], ["Line 45: (j in range(n))", "Line 45: (j in range(n))", "Line 22: (num % factor == 0)", "Line 45: (j in range(n))", "Line 44: (i in range(m))"], ["Line 22: (num % factor == 0)", "Line 45: (j in range(n))", "Line 22: (num % factor == 0)", "Line 22: (num % factor == 0)", "Line 22: (num % factor == 0)"]]}
{"task_num": 2257, "task_title": "Count Unguarded Cells in the Grid", "sampled_paths": [["BRANCH #4: Covered else branch at line 37-38\n", "LOOP #5: Entered for loop at line 34-39\n", "BRANCH #4: Covered else branch at line 37-38\n", "LOOP #5: Entered for loop at line 34-39\n", "BRANCH #3: Covered if branch at line 35-36\n"], ["LOOP #5: Entered for loop at line 34-39\n", "BRANCH #3: Covered if branch at line 35-36\n", "LOOP #3: Entered for loop at line 26-39\n", "LOOP #4: Entered for loop at line 28-32\n", "BRANCH #2: Covered else branch at line 31-32\n"], ["BRANCH #5: Covered if branch at line 43-44\n", "LOOP #8: Entered for loop at line 48-53\n", "BRANCH #7: Covered if branch at line 49-50\n", "LOOP #8: Entered for loop at line 48-53\n", "BRANCH #7: Covered if branch at line 49-50\n"], ["LOOP #4: Entered for loop at line 28-32\n", "BRANCH #2: Covered else branch at line 31-32\n", "LOOP #4: Entered for loop at line 28-32\n", "BRANCH #2: Covered else branch at line 31-32\n", "LOOP #4: Entered for loop at line 28-32\n"]], "sampled_condition_paths": [["Line 35: NOT (grid[i][j] == 'G' or grid[i][j] == 'W')", "Line 37: ", "Line 34: (j in range(n - 1, -1, -1))", "Line 35: NOT (grid[i][j] == 'G' or grid[i][j] == 'W')", "Line 37: ", "Line 34: (j in range(n - 1, -1, -1))", "Line 35: (grid[i][j] == 'G' or grid[i][j] == 'W')"], ["Line 34: (j in range(n - 1, -1, -1))", "Line 35: (grid[i][j] == 'G' or grid[i][j] == 'W')", "Line 26: (i in range(m))", "Line 28: (j in range(n))", "Line 29: NOT (grid[i][j] == 'G' or grid[i][j] == 'W')", "Line 31: "], ["Line 43: (grid[i][j] == 'G' or grid[i][j] == 'W')", "Line 48: (i in range(m - 1, -1, -1))", "Line 49: (grid[i][j] == 'G' or grid[i][j] == 'W')", "Line 48: (i in range(m - 1, -1, -1))", "Line 49: (grid[i][j] == 'G' or grid[i][j] == 'W')"], ["Line 28: (j in range(n))", "Line 29: NOT (grid[i][j] == 'G' or grid[i][j] == 'W')", "Line 31: ", "Line 28: (j in range(n))", "Line 29: NOT (grid[i][j] == 'G' or grid[i][j] == 'W')", "Line 31: ", "Line 28: (j in range(n))"]]}
{"task_num": 2258, "task_title": "Escape the Spreading Fire", "sampled_paths": [["BRANCH #6: Covered if branch at line 52-53\n", "LOOP #6: Entered for loop at line 45-56\n", "BRANCH #4: Covered if branch at line 48-49\n", "LOOP #6: Entered for loop at line 45-56\n", "BRANCH #4: Covered if branch at line 48-49\n"], ["LOOP #6: Entered for loop at line 45-56\n", "BRANCH #5: Covered if branch at line 50-51\n", "LOOP #6: Entered for loop at line 45-56\n", "BRANCH #5: Covered if branch at line 50-51\n", "LOOP #1: Entered while loop at line 22-29\n"], ["LOOP #7: Entered while loop at line 61-82\n", "LOOP #8: Entered for loop at line 63-82\n", "LOOP #9: Entered for loop at line 65-82\n", "BRANCH #7: Covered if branch at line 68-69\n", "LOOP #9: Entered for loop at line 65-82\n"], ["BRANCH #3: Covered if branch at line 38-40\n", "LOOP #3: Entered for loop at line 37-40\n", "LOOP #3: Entered for loop at line 37-40\n", "LOOP #2: Entered for loop at line 36-40\n", "LOOP #3: Entered for loop at line 37-40\n"], ["LOOP #9: Entered for loop at line 65-82\n", "BRANCH #11: Covered if branch at line 76-77\n", "LOOP #7: Entered while loop at line 61-82\n", "LOOP #8: Entered for loop at line 63-82\n", "LOOP #9: Entered for loop at line 65-82\n"], ["LOOP #9: Entered for loop at line 65-82\n", "BRANCH #9: Covered if branch at line 72-75\n", "BRANCH #1: Covered if branch at line 24-26\n", "LOOP #1: Entered while loop at line 22-29\n", "LOOP #7: Entered while loop at line 61-82\n"]], "sampled_condition_paths": [["Line 52: (fireMinute[x][y] != -1)", "Line 45: (dx, dy in dirs)", "Line 48: (x < 0 or x == len(grid) or y < 0 or y == len(grid[0]))", "Line 45: (dx, dy in dirs)", "Line 48: (x < 0 or x == len(grid) or y < 0 or y == len(grid[0]))"], ["Line 45: (dx, dy in dirs)", "Line 50: (grid[x][y] == 2)", "Line 45: (dx, dy in dirs)", "Line 50: (grid[x][y] == 2)", "Line 22: (l <= r)"], ["Line 61: (q)", "Line 63: (_ in range(len(q)))", "Line 65: (dx, dy in dirs)", "Line 68: (x < 0 or x == len(grid) or y < 0 or y == len(grid[0]))", "Line 65: (dx, dy in dirs)"], ["Line 38: (grid[i][j] == 1)", "Line 37: (j in range(len(grid[0])))", "Line 37: (j in range(len(grid[0])))", "Line 36: (i in range(len(grid)))", "Line 37: (j in range(len(grid[0])))"], ["Line 65: (dx, dy in dirs)", "Line 76: (fireMinute[x][y] != -1 and fireMinute[x][y] <= minute)", "Line 61: (q)", "Line 63: (_ in range(len(q)))", "Line 65: (dx, dy in dirs)"], ["Line 65: (dx, dy in dirs)", "Line 72: (x == len(grid) - 1 and y == len(grid[0]) - 1)", "Line 24: (self._canStayFor(grid, fireGrid, m, dirs))", "Line 22: (l <= r)", "Line 61: (q)"]]}
{"task_num": 2290, "task_title": "Minimum Obstacle Removal to Reach Corner", "sampled_paths": [["LOOP #1: Entered while loop at line 20-33\n", "LOOP #2: Entered for loop at line 24-33\n", "LOOP #2: Entered for loop at line 24-33\n", "BRANCH #2: Covered if branch at line 27-28\n", "LOOP #2: Entered for loop at line 24-33\n"], ["BRANCH #3: Covered if branch at line 30-32\n", "LOOP #2: Entered for loop at line 24-33\n", "LOOP #2: Entered for loop at line 24-33\n", "LOOP #1: Entered while loop at line 20-33\n", "LOOP #2: Entered for loop at line 24-33\n"], ["LOOP #2: Entered for loop at line 24-33\n", "LOOP #2: Entered for loop at line 24-33\n", "BRANCH #3: Covered if branch at line 30-32\n", "LOOP #1: Entered while loop at line 20-33\n", "LOOP #2: Entered for loop at line 24-33\n"], ["LOOP #2: Entered for loop at line 24-33\n", "LOOP #1: Entered while loop at line 20-33\n", "LOOP #2: Entered for loop at line 24-33\n", "BRANCH #2: Covered if branch at line 27-28\n", "LOOP #2: Entered for loop at line 24-33\n"]], "sampled_condition_paths": [["Line 20: (minHeap)", "Line 24: (dx, dy in dirs)", "Line 24: (dx, dy in dirs)", "Line 27: (x < 0 or x == m or y < 0 or y == n)", "Line 24: (dx, dy in dirs)"], ["Line 30: (newDist < dist[x][y])", "Line 24: (dx, dy in dirs)", "Line 24: (dx, dy in dirs)", "Line 20: (minHeap)", "Line 24: (dx, dy in dirs)"], ["Line 24: (dx, dy in dirs)", "Line 24: (dx, dy in dirs)", "Line 30: (newDist < dist[x][y])", "Line 20: (minHeap)", "Line 24: (dx, dy in dirs)"], ["Line 24: (dx, dy in dirs)", "Line 20: (minHeap)", "Line 24: (dx, dy in dirs)", "Line 27: (x < 0 or x == m or y < 0 or y == n)", "Line 24: (dx, dy in dirs)"]]}
{"task_num": 2299, "task_title": "Strong Password Checker II", "sampled_paths": [[], ["BRANCH #4: Covered if branch at line 19-20\n"], ["BRANCH #1: Covered if branch at line 13-14\n"]], "sampled_condition_paths": [[], ["Line 19: (not any(c.isdigit() for c in password))"], ["Line 13: (len(password) < 8)"]]}
{"task_num": 2301, "task_title": "Match Substring After Replacement", "sampled_paths": [["BRANCH #3: Covered if branch at line 31-32\n", "LOOP #2: Entered for loop at line 18-21\n", "LOOP #3: Entered for loop at line 28-33\n", "BRANCH #3: Covered if branch at line 31-32\n", "LOOP #2: Entered for loop at line 18-21\n"], ["LOOP #1: Entered for loop at line 15-17\n", "LOOP #1: Entered for loop at line 15-17\n", "LOOP #1: Entered for loop at line 15-17\n", "LOOP #1: Entered for loop at line 15-17\n", "LOOP #2: Entered for loop at line 18-21\n"], ["LOOP #2: Entered for loop at line 18-21\n", "LOOP #3: Entered for loop at line 28-33\n", "BRANCH #3: Covered if branch at line 31-32\n", "LOOP #2: Entered for loop at line 18-21\n", "BRANCH #2: Covered if branch at line 25-26\n"], ["BRANCH #3: Covered if branch at line 31-32\n", "LOOP #2: Entered for loop at line 18-21\n", "LOOP #3: Entered for loop at line 28-33\n", "LOOP #3: Entered for loop at line 28-33\n", "LOOP #3: Entered for loop at line 28-33\n"], ["LOOP #2: Entered for loop at line 18-21\n", "LOOP #3: Entered for loop at line 28-33\n", "BRANCH #3: Covered if branch at line 31-32\n", "LOOP #2: Entered for loop at line 18-21\n", "LOOP #3: Entered for loop at line 28-33\n"]], "sampled_condition_paths": [["Line 31: (a != b and not isMapped[ord(a)][ord(b)])", "Line 18: (i in range(len(s)))", "Line 28: (i in range(len(sub)))", "Line 31: (a != b and not isMapped[ord(a)][ord(b)])", "Line 18: (i in range(len(s)))"], ["Line 15: (old, new in mappings)", "Line 15: (old, new in mappings)", "Line 15: (old, new in mappings)", "Line 15: (old, new in mappings)", "Line 18: (i in range(len(s)))"], ["Line 18: (i in range(len(s)))", "Line 28: (i in range(len(sub)))", "Line 31: (a != b and not isMapped[ord(a)][ord(b)])", "Line 18: (i in range(len(s)))", "Line 25: (start + len(sub) > len(s))"], ["Line 31: (a != b and not isMapped[ord(a)][ord(b)])", "Line 18: (i in range(len(s)))", "Line 28: (i in range(len(sub)))", "Line 28: (i in range(len(sub)))", "Line 28: (i in range(len(sub)))"], ["Line 18: (i in range(len(s)))", "Line 28: (i in range(len(sub)))", "Line 31: (a != b and not isMapped[ord(a)][ord(b)])", "Line 18: (i in range(len(s)))", "Line 28: (i in range(len(sub)))"]]}
{"task_num": 2322, "task_title": "Minimum Score After Removals on a Tree", "sampled_paths": [["BRANCH #3: Covered if branch at line 41-42\n", "BRANCH #6: Covered else branch at line 48-49\n", "LOOP #4: Entered for loop at line 39-51\n", "BRANCH #3: Covered if branch at line 41-42\n", "BRANCH #5: Covered elif branch at line 46-47\n"], ["LOOP #1: Entered for loop at line 19-22\n", "LOOP #1: Entered for loop at line 19-22\n", "LOOP #2: Entered for loop at line 24-29\n", "LOOP #2: Entered for loop at line 24-29\n", "BRANCH #1: Covered if branch at line 25-26\n"], ["BRANCH #6: Covered else branch at line 48-49\n", "LOOP #3: Entered for loop at line 35-51\n", "BRANCH #2: Covered if branch at line 37-38\n", "LOOP #4: Entered for loop at line 39-51\n", "BRANCH #3: Covered if branch at line 41-42\n"], ["LOOP #2: Entered for loop at line 24-29\n", "BRANCH #1: Covered if branch at line 25-26\n", "LOOP #2: Entered for loop at line 24-29\n", "LOOP #2: Entered for loop at line 24-29\n", "BRANCH #1: Covered if branch at line 25-26\n"]], "sampled_condition_paths": [["Line 41: (d in children[c])", "Line 44: NOT (c in children[a] and a != c)", "Line 46: NOT (a in children[c] and a != c)", "Line 48: ", "Line 39: (j in range(i))", "Line 41: (d in children[c])", "Line 44: NOT (c in children[a] and a != c)", "Line 46: (a in children[c] and a != c)"], ["Line 19: (u, v in edges)", "Line 19: (u, v in edges)", "Line 24: (v in tree[u])", "Line 24: (v in tree[u])", "Line 25: (v == parent)"], ["Line 44: NOT (c in children[a] and a != c)", "Line 46: NOT (a in children[c] and a != c)", "Line 48: ", "Line 35: (i in range(len(edges)))", "Line 37: (b in children[a])", "Line 39: (j in range(i))", "Line 41: (d in children[c])"], ["Line 24: (v in tree[u])", "Line 25: (v == parent)", "Line 24: (v in tree[u])", "Line 24: (v in tree[u])", "Line 25: (v == parent)"]]}
{"task_num": 2332, "task_title": "The Latest Time to Catch a Bus", "sampled_paths": [["BRANCH #3: Covered if branch at line 30-31\n", "LOOP #1: Entered while loop at line 22-33\n", "LOOP #2: Entered while loop at line 24-29\n", "BRANCH #2: Covered if branch at line 25-26\n", "LOOP #2: Entered while loop at line 24-29\n"], ["LOOP #1: Entered while loop at line 22-33\n", "LOOP #2: Entered while loop at line 24-29\n", "BRANCH #2: Covered if branch at line 25-26\n", "LOOP #2: Entered while loop at line 24-29\n", "BRANCH #2: Covered if branch at line 25-26\n"], ["BRANCH #2: Covered if branch at line 25-26\n", "LOOP #1: Entered while loop at line 22-33\n", "LOOP #2: Entered while loop at line 24-29\n", "BRANCH #2: Covered if branch at line 25-26\n", "LOOP #2: Entered while loop at line 24-29\n"], ["LOOP #2: Entered while loop at line 24-29\n", "BRANCH #3: Covered if branch at line 30-31\n", "LOOP #1: Entered while loop at line 22-33\n", "LOOP #2: Entered while loop at line 24-29\n", "BRANCH #2: Covered if branch at line 25-26\n"]], "sampled_condition_paths": [["Line 30: (arrived < capacity and j > 0 and passengers[j - 1] != buses[i])", "Line 22: (i < len(buses))", "Line 24: (arrived < capacity and j < len(passengers) and passengers[j] <= buses[i])", "Line 25: (j > 0 and passengers[j] != passengers[j - 1] + 1)", "Line 24: (arrived < capacity and j < len(passengers) and passengers[j] <= buses[i])"], ["Line 22: (i < len(buses))", "Line 24: (arrived < capacity and j < len(passengers) and passengers[j] <= buses[i])", "Line 25: (j > 0 and passengers[j] != passengers[j - 1] + 1)", "Line 24: (arrived < capacity and j < len(passengers) and passengers[j] <= buses[i])", "Line 25: (j > 0 and passengers[j] != passengers[j - 1] + 1)"], ["Line 25: (j > 0 and passengers[j] != passengers[j - 1] + 1)", "Line 22: (i < len(buses))", "Line 24: (arrived < capacity and j < len(passengers) and passengers[j] <= buses[i])", "Line 25: (j > 0 and passengers[j] != passengers[j - 1] + 1)", "Line 24: (arrived < capacity and j < len(passengers) and passengers[j] <= buses[i])"], ["Line 24: (arrived < capacity and j < len(passengers) and passengers[j] <= buses[i])", "Line 30: (arrived < capacity and j > 0 and passengers[j - 1] != buses[i])", "Line 22: (i < len(buses))", "Line 24: (arrived < capacity and j < len(passengers) and passengers[j] <= buses[i])", "Line 25: (j > 0 and passengers[j] != passengers[j - 1] + 1)"]]}
{"task_num": 2337, "task_title": "Move Pieces to Obtain a String", "sampled_paths": [["LOOP #1: Entered while loop at line 17-32\n", "LOOP #2: Entered while loop at line 18-19\n", "BRANCH #3: Covered if branch at line 26-27\n"], ["LOOP #1: Entered while loop at line 17-32\n", "LOOP #3: Entered while loop at line 20-21\n", "LOOP #3: Entered while loop at line 20-21\n", "BRANCH #2: Covered if branch at line 24-25\n"], ["LOOP #2: Entered while loop at line 18-19\n", "LOOP #1: Entered while loop at line 17-32\n", "LOOP #2: Entered while loop at line 18-19\n", "LOOP #2: Entered while loop at line 18-19\n", "LOOP #3: Entered while loop at line 20-21\n"], ["LOOP #3: Entered while loop at line 20-21\n", "LOOP #3: Entered while loop at line 20-21\n", "LOOP #3: Entered while loop at line 20-21\n", "LOOP #3: Entered while loop at line 20-21\n", "LOOP #3: Entered while loop at line 20-21\n"]], "sampled_condition_paths": [["Line 17: (i <= n and j <= n)", "Line 18: (i < n and start[i] == '_')", "Line 26: (start[i] == 'R' and i > j)"], ["Line 17: (i <= n and j <= n)", "Line 20: (j < n and target[j] == '_')", "Line 20: (j < n and target[j] == '_')", "Line 24: (start[i] != target[j])"], ["Line 18: (i < n and start[i] == '_')", "Line 17: (i <= n and j <= n)", "Line 18: (i < n and start[i] == '_')", "Line 18: (i < n and start[i] == '_')", "Line 20: (j < n and target[j] == '_')"], ["Line 20: (j < n and target[j] == '_')", "Line 20: (j < n and target[j] == '_')", "Line 20: (j < n and target[j] == '_')", "Line 20: (j < n and target[j] == '_')", "Line 20: (j < n and target[j] == '_')"]]}
{"task_num": 2392, "task_title": "Build a Matrix With Conditions", "sampled_paths": [["BRANCH #3: Covered if branch at line 49-50\n", "LOOP #4: Entered while loop at line 44-51\n", "LOOP #5: Entered for loop at line 47-51\n", "BRANCH #3: Covered if branch at line 49-50\n", "LOOP #4: Entered while loop at line 44-51\n"], ["LOOP #4: Entered while loop at line 44-51\n", "LOOP #5: Entered for loop at line 47-51\n", "BRANCH #3: Covered if branch at line 49-50\n", "LOOP #4: Entered while loop at line 44-51\n", "LOOP #5: Entered for loop at line 47-51\n"], ["LOOP #3: Entered for loop at line 38-41\n", "LOOP #3: Entered for loop at line 38-41\n", "LOOP #3: Entered for loop at line 38-41\n", "BRANCH #5: Covered else branch at line 54-55\n", "BRANCH #1: Covered if branch at line 14-15\n"]], "sampled_condition_paths": [["Line 49: (inDegrees[v] == 0)", "Line 44: (q)", "Line 47: (v in graph[u])", "Line 49: (inDegrees[v] == 0)", "Line 44: (q)"], ["Line 44: (q)", "Line 47: (v in graph[u])", "Line 49: (inDegrees[v] == 0)", "Line 44: (q)", "Line 47: (v in graph[u])"], ["Line 38: (u, v in conditions)", "Line 38: (u, v in conditions)", "Line 38: (u, v in conditions)", "Line 52: NOT (len(order) == n)", "Line 54: ", "Line 14: (not rowOrder)"]]}
{"task_num": 2437, "task_title": "Number of Valid Clock Times", "sampled_paths": [["BRANCH #1: Covered if branch at line 14-15\n", "BRANCH #2: Covered if branch at line 16-17\n", "BRANCH #3: Covered if branch at line 19-20\n"], ["BRANCH #4: Covered if branch at line 21-25\n", "BRANCH #6: Covered else branch at line 24-25\n"], ["BRANCH #2: Covered if branch at line 16-17\n", "BRANCH #7: Covered if branch at line 26-30\n", "BRANCH #9: Covered else branch at line 29-30\n"]], "sampled_condition_paths": [["Line 14: (time[3] == '?')", "Line 16: (time[4] == '?')", "Line 19: (time[0] == '?' and time[1] == '?')"], ["Line 21: (time[0] == '?')", "Line 22: NOT (time[1] < '4')", "Line 24: "], ["Line 16: (time[4] == '?')", "Line 26: (time[1] == '?')", "Line 27: NOT (time[0] == '2')", "Line 29: "]]}
{"task_num": 2456, "task_title": "Most Popular Video Creator", "sampled_paths": [["LOOP #1: Entered for loop at line 24-35\n", "LOOP #1: Entered for loop at line 24-35\n", "BRANCH #1: Covered if branch at line 25-28\n", "LOOP #2: Entered for loop at line 36-39\n", "BRANCH #3: Covered if branch at line 37-38\n"], ["LOOP #2: Entered for loop at line 36-39\n", "BRANCH #3: Covered if branch at line 37-38\n", "LOOP #2: Entered for loop at line 36-39\n", "BRANCH #3: Covered if branch at line 37-38\n", "LOOP #2: Entered for loop at line 36-39\n"], ["LOOP #1: Entered for loop at line 24-35\n", "BRANCH #2: Covered if branch at line 32-34\n", "LOOP #1: Entered for loop at line 24-35\n", "LOOP #2: Entered for loop at line 36-39\n", "BRANCH #3: Covered if branch at line 37-38\n"]], "sampled_condition_paths": [["Line 24: (name, id, view in zip(creators, ids, views))", "Line 24: (name, id, view in zip(creators, ids, views))", "Line 25: (name not in nameToCreator)", "Line 36: (name, creator in nameToCreator.items())", "Line 37: (creator.popularity == maxPopularity)"], ["Line 36: (name, creator in nameToCreator.items())", "Line 37: (creator.popularity == maxPopularity)", "Line 36: (name, creator in nameToCreator.items())", "Line 37: (creator.popularity == maxPopularity)", "Line 36: (name, creator in nameToCreator.items())"], ["Line 24: (name, id, view in zip(creators, ids, views))", "Line 32: (creator.maxView < view or creator.maxView == view and creator.videoId > id)", "Line 24: (name, id, view in zip(creators, ids, views))", "Line 36: (name, creator in nameToCreator.items())", "Line 37: (creator.popularity == maxPopularity)"]]}
{"task_num": 2462, "task_title": "Total Cost to Hire K Workers", "sampled_paths": [["LOOP #3: Entered while loop at line 23-25\n", "LOOP #3: Entered while loop at line 23-25\n", "LOOP #3: Entered while loop at line 23-25\n", "LOOP #3: Entered while loop at line 23-25\n", "BRANCH #3: Covered elif branch at line 30-31\n"], ["LOOP #2: Entered while loop at line 20-22\n", "LOOP #2: Entered while loop at line 20-22\n", "LOOP #2: Entered while loop at line 20-22\n", "LOOP #3: Entered while loop at line 23-25\n", "BRANCH #3: Covered elif branch at line 30-31\n"], ["LOOP #2: Entered while loop at line 20-22\n", "LOOP #3: Entered while loop at line 23-25\n", "BRANCH #3: Covered elif branch at line 30-31\n", "LOOP #1: Entered for loop at line 19-34\n", "BRANCH #4: Covered else branch at line 32-33\n"], ["LOOP #3: Entered while loop at line 23-25\n", "LOOP #3: Entered while loop at line 23-25\n", "BRANCH #3: Covered elif branch at line 30-31\n", "LOOP #1: Entered for loop at line 19-34\n", "LOOP #2: Entered while loop at line 20-22\n"]], "sampled_condition_paths": [["Line 23: (len(minHeapR) < candidates and i <= j)", "Line 23: (len(minHeapR) < candidates and i <= j)", "Line 23: (len(minHeapR) < candidates and i <= j)", "Line 23: (len(minHeapR) < candidates and i <= j)", "Line 26: NOT (not minHeapL)", "Line 28: NOT (not minHeapR)", "Line 30: (minHeapL[0] <= minHeapR[0])"], ["Line 20: (len(minHeapL) < candidates and i <= j)", "Line 20: (len(minHeapL) < candidates and i <= j)", "Line 20: (len(minHeapL) < candidates and i <= j)", "Line 23: (len(minHeapR) < candidates and i <= j)", "Line 26: NOT (not minHeapL)", "Line 28: NOT (not minHeapR)", "Line 30: (minHeapL[0] <= minHeapR[0])"], ["Line 20: (len(minHeapL) < candidates and i <= j)", "Line 23: (len(minHeapR) < candidates and i <= j)", "Line 26: NOT (not minHeapL)", "Line 28: NOT (not minHeapR)", "Line 30: (minHeapL[0] <= minHeapR[0])", "Line 19: (_ in range(k))", "Line 26: NOT (not minHeapL)", "Line 28: NOT (not minHeapR)", "Line 30: NOT (minHeapL[0] <= minHeapR[0])", "Line 32: "], ["Line 23: (len(minHeapR) < candidates and i <= j)", "Line 23: (len(minHeapR) < candidates and i <= j)", "Line 26: NOT (not minHeapL)", "Line 28: NOT (not minHeapR)", "Line 30: (minHeapL[0] <= minHeapR[0])", "Line 19: (_ in range(k))", "Line 20: (len(minHeapL) < candidates and i <= j)"]]}
{"task_num": 2467, "task_title": "Most Profitable Path in a Tree", "sampled_paths": [["LOOP #1: Entered for loop at line 18-21\n", "LOOP #1: Entered for loop at line 18-21\n", "LOOP #1: Entered for loop at line 18-21\n", "LOOP #2: Entered for loop at line 25-28\n", "BRANCH #1: Covered if branch at line 26-27\n"], ["LOOP #2: Entered for loop at line 25-28\n", "BRANCH #1: Covered if branch at line 26-27\n", "LOOP #2: Entered for loop at line 25-28\n", "LOOP #3: Entered while loop at line 33-40\n", "BRANCH #2: Covered if branch at line 34-35\n"], ["LOOP #2: Entered for loop at line 25-28\n", "LOOP #3: Entered while loop at line 33-40\n", "BRANCH #2: Covered if branch at line 34-35\n", "LOOP #4: Entered for loop at line 48-51\n", "BRANCH #5: Covered if branch at line 49-50\n"], ["LOOP #3: Entered while loop at line 33-40\n", "BRANCH #2: Covered if branch at line 34-35\n", "LOOP #3: Entered while loop at line 33-40\n", "BRANCH #3: Covered elif branch at line 36-37\n", "LOOP #4: Entered for loop at line 48-51\n"]], "sampled_condition_paths": [["Line 18: (u, v in edges)", "Line 18: (u, v in edges)", "Line 18: (u, v in edges)", "Line 25: (v in tree[u])", "Line 26: (aliceDist[v] == -1)"], ["Line 25: (v in tree[u])", "Line 26: (aliceDist[v] == -1)", "Line 25: (v in tree[u])", "Line 33: (u != 0)", "Line 34: (bobDist < aliceDist[u])"], ["Line 25: (v in tree[u])", "Line 33: (u != 0)", "Line 34: (bobDist < aliceDist[u])", "Line 48: (v in tree[u])", "Line 49: (v != prev)"], ["Line 33: (u != 0)", "Line 34: (bobDist < aliceDist[u])", "Line 33: (u != 0)", "Line 34: NOT (bobDist < aliceDist[u])", "Line 36: (bobDist == aliceDist[u])", "Line 48: (v in tree[u])"]]}
{"task_num": 2499, "task_title": "Minimum Total Cost to Make Arrays Unequal", "sampled_paths": [["BRANCH #1: Covered if branch at line 21-28\n", "BRANCH #2: Covered if branch at line 24-26\n", "LOOP #1: Entered for loop at line 20-29\n", "BRANCH #1: Covered if branch at line 21-28\n", "LOOP #1: Entered for loop at line 20-29\n"], ["BRANCH #5: Covered if branch at line 36-37\n", "LOOP #2: Entered for loop at line 30-40\n", "BRANCH #4: Covered if branch at line 33-34\n", "LOOP #2: Entered for loop at line 30-40\n", "BRANCH #4: Covered if branch at line 33-34\n"], ["BRANCH #2: Covered if branch at line 24-26\n", "LOOP #1: Entered for loop at line 20-29\n", "BRANCH #1: Covered if branch at line 21-28\n", "LOOP #1: Entered for loop at line 20-29\n", "BRANCH #1: Covered if branch at line 21-28\n"], ["LOOP #1: Entered for loop at line 20-29\n", "BRANCH #1: Covered if branch at line 21-28\n", "BRANCH #2: Covered if branch at line 24-26\n", "LOOP #1: Entered for loop at line 20-29\n", "LOOP #1: Entered for loop at line 20-29\n"], ["BRANCH #1: Covered if branch at line 21-28\n", "LOOP #1: Entered for loop at line 20-29\n", "BRANCH #1: Covered if branch at line 21-28\n", "LOOP #1: Entered for loop at line 20-29\n", "BRANCH #1: Covered if branch at line 21-28\n"]], "sampled_condition_paths": [["Line 21: (num1 == num2)", "Line 24: (conflictedNumCount[conflictedNum] > maxFreq)", "Line 20: (i, (num1, num2) in enumerate(zip(nums1, nums2)))", "Line 21: (num1 == num2)", "Line 20: (i, (num1, num2) in enumerate(zip(nums1, nums2)))"], ["Line 36: (num1 == maxFreqNum or num2 == maxFreqNum)", "Line 30: (i, (num1, num2) in enumerate(zip(nums1, nums2)))", "Line 33: (num1 == num2)", "Line 30: (i, (num1, num2) in enumerate(zip(nums1, nums2)))", "Line 33: (num1 == num2)"], ["Line 24: (conflictedNumCount[conflictedNum] > maxFreq)", "Line 20: (i, (num1, num2) in enumerate(zip(nums1, nums2)))", "Line 21: (num1 == num2)", "Line 20: (i, (num1, num2) in enumerate(zip(nums1, nums2)))", "Line 21: (num1 == num2)"], ["Line 20: (i, (num1, num2) in enumerate(zip(nums1, nums2)))", "Line 21: (num1 == num2)", "Line 24: (conflictedNumCount[conflictedNum] > maxFreq)", "Line 20: (i, (num1, num2) in enumerate(zip(nums1, nums2)))", "Line 20: (i, (num1, num2) in enumerate(zip(nums1, nums2)))"], ["Line 21: (num1 == num2)", "Line 20: (i, (num1, num2) in enumerate(zip(nums1, nums2)))", "Line 21: (num1 == num2)", "Line 20: (i, (num1, num2) in enumerate(zip(nums1, nums2)))", "Line 21: (num1 == num2)"]]}
{"task_num": 2503, "task_title": "Maximum Number of Points From Grid Queries", "sampled_paths": [["LOOP #3: Entered for loop at line 38-46\n", "LOOP #3: Entered for loop at line 38-46\n", "BRANCH #2: Covered if branch at line 41-42\n", "LOOP #3: Entered for loop at line 38-46\n", "BRANCH #2: Covered if branch at line 41-42\n"], ["LOOP #2: Entered while loop at line 32-46\n", "LOOP #3: Entered for loop at line 38-46\n", "BRANCH #2: Covered if branch at line 41-42\n", "LOOP #3: Entered for loop at line 38-46\n", "LOOP #3: Entered for loop at line 38-46\n"], ["LOOP #1: Entered for loop at line 31-48\n", "LOOP #2: Entered while loop at line 32-46\n", "BRANCH #1: Covered if branch at line 34-36\n"]], "sampled_condition_paths": [["Line 38: (dx, dy in dirs)", "Line 38: (dx, dy in dirs)", "Line 41: (x < 0 or x == m or y < 0 or y == n)", "Line 38: (dx, dy in dirs)", "Line 41: (x < 0 or x == m or y < 0 or y == n)"], ["Line 32: (minHeap)", "Line 38: (dx, dy in dirs)", "Line 41: (x < 0 or x == m or y < 0 or y == n)", "Line 38: (dx, dy in dirs)", "Line 38: (dx, dy in dirs)"], ["Line 31: (queryIndex, query in sorted([IndexedQuery(i, query) for i, query in enumerate(queries)], key=lambda iq: iq.query))", "Line 32: (minHeap)", "Line 34: (val >= query)"]]}
{"task_num": 2508, "task_title": "Add Edges to Make Degrees of All Nodes Even", "sampled_paths": [["LOOP #1: Entered for loop at line 15-18\n", "LOOP #1: Entered for loop at line 15-18\n", "LOOP #1: Entered for loop at line 15-18\n", "LOOP #1: Entered for loop at line 15-18\n", "LOOP #1: Entered for loop at line 15-18\n"], ["LOOP #1: Entered for loop at line 15-18\n", "LOOP #1: Entered for loop at line 15-18\n", "LOOP #1: Entered for loop at line 15-18\n", "BRANCH #3: Covered if branch at line 25-27\n"], ["LOOP #1: Entered for loop at line 15-18\n", "LOOP #1: Entered for loop at line 15-18\n", "BRANCH #3: Covered if branch at line 25-27\n"]], "sampled_condition_paths": [["Line 15: (u, v in edges)", "Line 15: (u, v in edges)", "Line 15: (u, v in edges)", "Line 15: (u, v in edges)", "Line 15: (u, v in edges)"], ["Line 15: (u, v in edges)", "Line 15: (u, v in edges)", "Line 15: (u, v in edges)", "Line 25: (len(oddNodes) == 4)"], ["Line 15: (u, v in edges)", "Line 15: (u, v in edges)", "Line 25: (len(oddNodes) == 4)"]]}
{"task_num": 2523, "task_title": "Closest Prime Numbers in Range", "sampled_paths": [["BRANCH #4: Covered if branch at line 40-42\n", "LOOP #4: Entered for loop at line 41-42\n", "LOOP #4: Entered for loop at line 41-42\n", "LOOP #1: Entered for loop at line 15-18\n", "LOOP #1: Entered for loop at line 15-18\n"], ["LOOP #4: Entered for loop at line 41-42\n", "LOOP #4: Entered for loop at line 41-42\n", "LOOP #4: Entered for loop at line 41-42\n", "LOOP #4: Entered for loop at line 41-42\n", "LOOP #4: Entered for loop at line 41-42\n"], ["LOOP #4: Entered for loop at line 41-42\n", "LOOP #4: Entered for loop at line 41-42\n", "LOOP #1: Entered for loop at line 15-18\n", "LOOP #1: Entered for loop at line 15-18\n", "BRANCH #1: Covered if branch at line 16-17\n"], ["LOOP #3: Entered for loop at line 39-42\n", "LOOP #1: Entered for loop at line 15-18\n", "LOOP #1: Entered for loop at line 15-18\n", "BRANCH #1: Covered if branch at line 16-17\n", "LOOP #1: Entered for loop at line 15-18\n"]], "sampled_condition_paths": [["Line 40: (isPrime[i])", "Line 41: (j in range(i * i, n, i))", "Line 41: (j in range(i * i, n, i))", "Line 15: (i in range(left, right+1))", "Line 15: (i in range(left, right+1))"], ["Line 41: (j in range(i * i, n, i))", "Line 41: (j in range(i * i, n, i))", "Line 41: (j in range(i * i, n, i))", "Line 41: (j in range(i * i, n, i))", "Line 41: (j in range(i * i, n, i))"], ["Line 41: (j in range(i * i, n, i))", "Line 41: (j in range(i * i, n, i))", "Line 15: (i in range(left, right+1))", "Line 15: (i in range(left, right+1))", "Line 16: (isPrime[i])"], ["Line 39: (i in range(2, int(n**0.5) + 1))", "Line 15: (i in range(left, right+1))", "Line 15: (i in range(left, right+1))", "Line 16: (isPrime[i])", "Line 15: (i in range(left, right+1))"]]}
{"task_num": 2532, "task_title": "Time to Cross a Bridge", "sampled_paths": [["BRANCH #3: Covered else branch at line 37-46\n", "BRANCH #5: Covered else branch at line 40-41\n", "BRANCH #6: Covered if branch at line 42-43\n", "LOOP #1: Entered while loop at line 21-47\n", "LOOP #3: Entered while loop at line 25-27\n"], ["BRANCH #3: Covered else branch at line 37-46\n", "BRANCH #4: Covered if branch at line 38-39\n", "BRANCH #7: Covered else branch at line 44-45\n", "LOOP #1: Entered while loop at line 21-47\n", "LOOP #2: Entered while loop at line 22-24\n"]], "sampled_condition_paths": [["Line 28: NOT (rightBridgeQueue)", "Line 32: NOT (leftBridgeQueue and n > 0)", "Line 37: ", "Line 38: NOT (leftWorkers and n > 0)", "Line 40: ", "Line 42: (rightWorkers)", "Line 21: (n > 0 or rightBridgeQueue or rightWorkers)", "Line 25: (rightWorkers and rightWorkers[0][0] <= ans)"], ["Line 28: NOT (rightBridgeQueue)", "Line 32: NOT (leftBridgeQueue and n > 0)", "Line 37: ", "Line 38: (leftWorkers and n > 0)", "Line 42: NOT (rightWorkers)", "Line 44: ", "Line 21: (n > 0 or rightBridgeQueue or rightWorkers)", "Line 22: (leftWorkers and leftWorkers[0][0] <= ans)"]]}
{"task_num": 2577, "task_title": "Minimum Time to Visit a Cell In a Grid", "sampled_paths": [["BRANCH #3: Covered if branch at line 29-30\n", "LOOP #2: Entered for loop at line 26-40\n", "BRANCH #4: Covered if branch at line 31-32\n", "LOOP #1: Entered while loop at line 22-40\n", "LOOP #2: Entered for loop at line 26-40\n"], ["BRANCH #1: Covered if branch at line 13-14\n"], ["BRANCH #6: Covered else branch at line 35-36\n", "LOOP #2: Entered for loop at line 26-40\n", "BRANCH #4: Covered if branch at line 31-32\n", "LOOP #2: Entered for loop at line 26-40\n", "BRANCH #4: Covered if branch at line 31-32\n"]], "sampled_condition_paths": [["Line 29: (x < 0 or x == m or y < 0 or y == n)", "Line 26: (dx, dy in dirs)", "Line 31: ((x, y) in seen)", "Line 22: (minHeap)", "Line 26: (dx, dy in dirs)"], ["Line 13: (grid[0][1] > 1 and grid[1][0] > 1)"], ["Line 33: NOT ((grid[x][y] - time) % 2 == 0)", "Line 35: ", "Line 26: (dx, dy in dirs)", "Line 31: ((x, y) in seen)", "Line 26: (dx, dy in dirs)", "Line 31: ((x, y) in seen)"]]}
{"task_num": 2601, "task_title": "Prime Subtraction Operation", "sampled_paths": [["LOOP #3: Entered for loop at line 33-34\n", "LOOP #3: Entered for loop at line 33-34\n", "LOOP #3: Entered for loop at line 33-34\n", "LOOP #3: Entered for loop at line 33-34\n", "LOOP #3: Entered for loop at line 33-34\n"]], "sampled_condition_paths": [["Line 33: (j in range(i * i, n, i))", "Line 33: (j in range(i * i, n, i))", "Line 33: (j in range(i * i, n, i))", "Line 33: (j in range(i * i, n, i))", "Line 33: (j in range(i * i, n, i))"]]}
{"task_num": 2603, "task_title": "Collect Coins in a Tree", "sampled_paths": [["LOOP #2: Entered for loop at line 21-28\n", "LOOP #2: Entered for loop at line 21-28\n", "BRANCH #1: Covered if branch at line 26-27\n", "LOOP #4: Entered for loop at line 29-37\n", "LOOP #5: Entered for loop at line 30-37\n"], ["LOOP #4: Entered for loop at line 29-37\n", "LOOP #5: Entered for loop at line 30-37\n", "BRANCH #2: Covered if branch at line 32-36\n", "LOOP #5: Entered for loop at line 30-37\n", "BRANCH #2: Covered if branch at line 32-36\n"], ["LOOP #1: Entered for loop at line 17-20\n", "LOOP #1: Entered for loop at line 17-20\n", "LOOP #1: Entered for loop at line 17-20\n", "LOOP #1: Entered for loop at line 17-20\n", "LOOP #2: Entered for loop at line 21-28\n"], ["LOOP #1: Entered for loop at line 17-20\n", "LOOP #1: Entered for loop at line 17-20\n", "LOOP #1: Entered for loop at line 17-20\n", "LOOP #2: Entered for loop at line 21-28\n", "LOOP #2: Entered for loop at line 21-28\n"]], "sampled_condition_paths": [["Line 21: (u in range(n))", "Line 21: (u in range(n))", "Line 26: (len(tree[u]) == 1)", "Line 29: (_ in range(2))", "Line 30: (_ in range(len(leavesToBeRemoved)))"], ["Line 29: (_ in range(2))", "Line 30: (_ in range(len(leavesToBeRemoved)))", "Line 32: (tree[u])", "Line 30: (_ in range(len(leavesToBeRemoved)))", "Line 32: (tree[u])"], ["Line 17: (u, v in edges)", "Line 17: (u, v in edges)", "Line 17: (u, v in edges)", "Line 17: (u, v in edges)", "Line 21: (u in range(n))"], ["Line 17: (u, v in edges)", "Line 17: (u, v in edges)", "Line 17: (u, v in edges)", "Line 21: (u in range(n))", "Line 21: (u in range(n))"]]}
{"task_num": 2653, "task_title": "Sliding Subarray Beauty", "sampled_paths": [["LOOP #2: Entered for loop at line 28-31\n", "LOOP #2: Entered for loop at line 28-31\n", "LOOP #2: Entered for loop at line 28-31\n", "LOOP #2: Entered for loop at line 28-31\n", "LOOP #2: Entered for loop at line 28-31\n"], ["LOOP #2: Entered for loop at line 28-31\n", "LOOP #2: Entered for loop at line 28-31\n", "LOOP #2: Entered for loop at line 28-31\n", "LOOP #2: Entered for loop at line 28-31\n", "BRANCH #4: Covered if branch at line 30-31\n"]], "sampled_condition_paths": [["Line 28: (i in range(50))", "Line 28: (i in range(50))", "Line 28: (i in range(50))", "Line 28: (i in range(50))", "Line 28: (i in range(50))"], ["Line 28: (i in range(50))", "Line 28: (i in range(50))", "Line 28: (i in range(50))", "Line 28: (i in range(50))", "Line 30: (prefix >= x)"]]}
{"task_num": 2662, "task_title": "Minimum Cost of a Path With Special Roads", "sampled_paths": [["LOOP #3: Entered for loop at line 30-38\n", "BRANCH #2: Covered if branch at line 31-32\n", "LOOP #3: Entered for loop at line 30-38\n", "LOOP #3: Entered for loop at line 30-38\n", "LOOP #2: Entered while loop at line 25-38\n"], ["LOOP #2: Entered while loop at line 25-38\n", "LOOP #3: Entered for loop at line 30-38\n", "BRANCH #2: Covered if branch at line 31-32\n", "LOOP #3: Entered for loop at line 30-38\n", "BRANCH #3: Covered if branch at line 35-37\n"], ["BRANCH #2: Covered if branch at line 31-32\n", "LOOP #3: Entered for loop at line 30-38\n", "BRANCH #3: Covered if branch at line 35-37\n", "LOOP #2: Entered while loop at line 25-38\n", "LOOP #3: Entered for loop at line 30-38\n"], ["LOOP #3: Entered for loop at line 30-38\n", "BRANCH #2: Covered if branch at line 31-32\n", "LOOP #3: Entered for loop at line 30-38\n", "LOOP #2: Entered while loop at line 25-38\n", "LOOP #3: Entered for loop at line 30-38\n"]], "sampled_condition_paths": [["Line 30: (v in range(n))", "Line 31: (v == u)", "Line 30: (v in range(n))", "Line 30: (v in range(n))", "Line 25: (minHeap)"], ["Line 25: (minHeap)", "Line 30: (v in range(n))", "Line 31: (v == u)", "Line 30: (v in range(n))", "Line 35: (newDist < dist[v])"], ["Line 31: (v == u)", "Line 30: (v in range(n))", "Line 35: (newDist < dist[v])", "Line 25: (minHeap)", "Line 30: (v in range(n))"], ["Line 30: (v in range(n))", "Line 31: (v == u)", "Line 30: (v in range(n))", "Line 25: (minHeap)", "Line 30: (v in range(n))"]]}
{"task_num": 2663, "task_title": "Lexicographically Smallest Beautiful String", "sampled_paths": [["LOOP #1: Entered for loop at line 15-21\n", "LOOP #1: Entered for loop at line 15-21\n", "BRANCH #1: Covered if branch at line 19-20\n", "LOOP #3: Entered for loop at line 28-31\n"], ["LOOP #1: Entered for loop at line 15-21\n", "LOOP #2: Entered while loop at line 17-18\n", "LOOP #1: Entered for loop at line 15-21\n"]], "sampled_condition_paths": [["Line 15: (i in reversed(range(len(chars))))", "Line 15: (i in reversed(range(len(chars))))", "Line 19: (chars[i] < chr(ord('a') + k))", "Line 28: (j in range(i, len(chars)))"], ["Line 15: (i in reversed(range(len(chars))))", "Line 17: (self._containsPalindrome(chars, i))", "Line 15: (i in reversed(range(len(chars))))"]]}
{"task_num": 2672, "task_title": "Number of Adjacent Elements With the Same Color", "sampled_paths": [["BRANCH #1: Covered if branch at line 18-22\n", "LOOP #1: Entered for loop at line 17-30\n", "BRANCH #1: Covered if branch at line 18-22\n", "BRANCH #4: Covered if branch at line 23-27\n", "BRANCH #6: Covered if branch at line 26-27\n"], ["LOOP #1: Entered for loop at line 17-30\n"], ["BRANCH #4: Covered if branch at line 23-27\n", "BRANCH #5: Covered if branch at line 24-25\n", "LOOP #1: Entered for loop at line 17-30\n", "BRANCH #1: Covered if branch at line 18-22\n", "BRANCH #3: Covered if branch at line 21-22\n"]], "sampled_condition_paths": [["Line 18: (i + 1 < n)", "Line 17: (i, color in queries)", "Line 18: (i + 1 < n)", "Line 23: (i > 0)", "Line 26: (arr[i - 1] == color)"], ["Line 17: (i, color in queries)"], ["Line 23: (i > 0)", "Line 24: (arr[i - 1] > 0 and arr[i - 1] == arr[i])", "Line 17: (i, color in queries)", "Line 18: (i + 1 < n)", "Line 21: (arr[i + 1] == color)"]]}
{"task_num": 2684, "task_title": "Maximum Number of Moves in a Grid", "sampled_paths": [["BRANCH #2: Covered if branch at line 21-22\n", "BRANCH #3: Covered if branch at line 23-24\n", "LOOP #2: Entered for loop at line 18-25\n", "BRANCH #1: Covered if branch at line 19-20\n", "BRANCH #2: Covered if branch at line 21-22\n"], ["LOOP #2: Entered for loop at line 18-25\n", "BRANCH #1: Covered if branch at line 19-20\n", "BRANCH #3: Covered if branch at line 23-24\n", "LOOP #2: Entered for loop at line 18-25\n", "LOOP #2: Entered for loop at line 18-25\n"], ["LOOP #2: Entered for loop at line 18-25\n", "BRANCH #1: Covered if branch at line 19-20\n", "LOOP #2: Entered for loop at line 18-25\n", "BRANCH #2: Covered if branch at line 21-22\n", "BRANCH #3: Covered if branch at line 23-24\n"], ["BRANCH #1: Covered if branch at line 19-20\n", "BRANCH #2: Covered if branch at line 21-22\n", "LOOP #1: Entered for loop at line 17-25\n", "LOOP #2: Entered for loop at line 18-25\n", "LOOP #2: Entered for loop at line 18-25\n"]], "sampled_condition_paths": [["Line 21: (i > 0 and grid[i - 1][j + 1] > grid[i][j])", "Line 23: (i + 1 < m and grid[i + 1][j + 1] > grid[i][j])", "Line 18: (i in range(m))", "Line 19: (grid[i][j + 1] > grid[i][j])", "Line 21: (i > 0 and grid[i - 1][j + 1] > grid[i][j])"], ["Line 18: (i in range(m))", "Line 19: (grid[i][j + 1] > grid[i][j])", "Line 23: (i + 1 < m and grid[i + 1][j + 1] > grid[i][j])", "Line 18: (i in range(m))", "Line 18: (i in range(m))"], ["Line 18: (i in range(m))", "Line 19: (grid[i][j + 1] > grid[i][j])", "Line 18: (i in range(m))", "Line 21: (i > 0 and grid[i - 1][j + 1] > grid[i][j])", "Line 23: (i + 1 < m and grid[i + 1][j + 1] > grid[i][j])"], ["Line 19: (grid[i][j + 1] > grid[i][j])", "Line 21: (i > 0 and grid[i - 1][j + 1] > grid[i][j])", "Line 17: (j in range(n - 2, -1, -1))", "Line 18: (i in range(m))", "Line 18: (i in range(m))"]]}
{"task_num": 2685, "task_title": "Count the Number of Complete Components", "sampled_paths": [["BRANCH #5: Covered if branch at line 39-40\n", "BRANCH #6: Covered if branch at line 58-60\n", "LOOP #2: Entered for loop at line 56-61\n", "LOOP #2: Entered for loop at line 56-61\n", "BRANCH #5: Covered if branch at line 39-40\n"], ["BRANCH #3: Covered elif branch at line 28-31\n", "LOOP #2: Entered for loop at line 56-61\n", "BRANCH #5: Covered if branch at line 39-40\n", "BRANCH #6: Covered if branch at line 58-60\n", "LOOP #2: Entered for loop at line 56-61\n"], ["BRANCH #5: Covered if branch at line 39-40\n", "BRANCH #3: Covered elif branch at line 28-31\n", "LOOP #1: Entered for loop at line 53-55\n", "BRANCH #5: Covered if branch at line 39-40\n", "BRANCH #1: Covered if branch at line 22-23\n"], ["BRANCH #5: Covered if branch at line 39-40\n", "BRANCH #6: Covered if branch at line 58-60\n", "LOOP #2: Entered for loop at line 56-61\n", "LOOP #2: Entered for loop at line 56-61\n", "BRANCH #6: Covered if branch at line 58-60\n"]], "sampled_condition_paths": [["Line 39: (self.id[u] != u)", "Line 58: (parent not in parents and uf.isComplete(parent))", "Line 56: (i in range(n))", "Line 56: (i in range(n))", "Line 39: (self.id[u] != u)"], ["Line 24: NOT (self.rank[i] < self.rank[j])", "Line 28: (self.rank[i] > self.rank[j])", "Line 56: (i in range(n))", "Line 39: (self.id[u] != u)", "Line 58: (parent not in parents and uf.isComplete(parent))", "Line 56: (i in range(n))"], ["Line 39: (self.id[u] != u)", "Line 24: NOT (self.rank[i] < self.rank[j])", "Line 28: (self.rank[i] > self.rank[j])", "Line 53: (u, v in edges)", "Line 39: (self.id[u] != u)", "Line 22: (i == j)"], ["Line 39: (self.id[u] != u)", "Line 58: (parent not in parents and uf.isComplete(parent))", "Line 56: (i in range(n))", "Line 56: (i in range(n))", "Line 58: (parent not in parents and uf.isComplete(parent))"]]}
{"task_num": 2699, "task_title": "Modify Graph Edge Weights", "sampled_paths": [["BRANCH #9: Covered if branch at line 59-61\n", "LOOP #5: Entered while loop at line 54-62\n", "LOOP #6: Entered for loop at line 58-62\n", "LOOP #5: Entered while loop at line 54-62\n", "LOOP #6: Entered for loop at line 58-62\n"], ["BRANCH #1: Covered if branch at line 18-19\n", "LOOP #5: Entered while loop at line 54-62\n", "LOOP #3: Entered for loop at line 32-45\n", "LOOP #5: Entered while loop at line 54-62\n", "LOOP #3: Entered for loop at line 32-45\n"], ["BRANCH #9: Covered if branch at line 59-61\n", "LOOP #6: Entered for loop at line 58-62\n", "BRANCH #9: Covered if branch at line 59-61\n", "LOOP #5: Entered while loop at line 54-62\n", "LOOP #6: Entered for loop at line 58-62\n"], ["LOOP #6: Entered for loop at line 58-62\n", "BRANCH #9: Covered if branch at line 59-61\n", "LOOP #5: Entered while loop at line 54-62\n", "LOOP #6: Entered for loop at line 58-62\n", "BRANCH #2: Covered if branch at line 24-25\n"], ["LOOP #1: Entered for loop at line 17-22\n", "LOOP #1: Entered for loop at line 17-22\n", "LOOP #1: Entered for loop at line 17-22\n", "BRANCH #1: Covered if branch at line 18-19\n", "LOOP #5: Entered while loop at line 54-62\n"], ["LOOP #5: Entered while loop at line 54-62\n", "LOOP #6: Entered for loop at line 58-62\n", "BRANCH #9: Covered if branch at line 59-61\n", "LOOP #5: Entered while loop at line 54-62\n", "LOOP #6: Entered for loop at line 58-62\n"]], "sampled_condition_paths": [["Line 59: (d + w < dist[v])", "Line 54: (minHeap)", "Line 58: (v, w in graph[u])", "Line 54: (minHeap)", "Line 58: (v, w in graph[u])"], ["Line 18: (w == -1)", "Line 54: (minHeap)", "Line 32: (i, (u, v, w) in enumerate(edges))", "Line 54: (minHeap)", "Line 32: (i, (u, v, w) in enumerate(edges))"], ["Line 59: (d + w < dist[v])", "Line 58: (v, w in graph[u])", "Line 59: (d + w < dist[v])", "Line 54: (minHeap)", "Line 58: (v, w in graph[u])"], ["Line 58: (v, w in graph[u])", "Line 59: (d + w < dist[v])", "Line 54: (minHeap)", "Line 58: (v, w in graph[u])", "Line 24: (distToDestination < target)"], ["Line 17: (u, v, w in edges)", "Line 17: (u, v, w in edges)", "Line 17: (u, v, w in edges)", "Line 18: (w == -1)", "Line 54: (minHeap)"], ["Line 54: (minHeap)", "Line 58: (v, w in graph[u])", "Line 59: (d + w < dist[v])", "Line 54: (minHeap)", "Line 58: (v, w in graph[u])"]]}
{"task_num": 2708, "task_title": "Maximum Strength of a Group", "sampled_paths": [["BRANCH #2: Covered elif branch at line 24-27\n", "LOOP #1: Entered for loop at line 20-30\n", "BRANCH #2: Covered elif branch at line 24-27\n", "LOOP #1: Entered for loop at line 20-30\n", "BRANCH #2: Covered elif branch at line 24-27\n"], ["BRANCH #2: Covered elif branch at line 24-27\n", "LOOP #1: Entered for loop at line 20-30\n", "BRANCH #2: Covered elif branch at line 24-27\n", "LOOP #1: Entered for loop at line 20-30\n", "BRANCH #1: Covered if branch at line 21-23\n"], ["LOOP #1: Entered for loop at line 20-30\n", "BRANCH #2: Covered elif branch at line 24-27\n", "LOOP #1: Entered for loop at line 20-30\n", "BRANCH #2: Covered elif branch at line 24-27\n", "BRANCH #6: Covered if branch at line 35-36\n"], ["LOOP #1: Entered for loop at line 20-30\n", "BRANCH #1: Covered if branch at line 21-23\n", "LOOP #1: Entered for loop at line 20-30\n", "BRANCH #2: Covered elif branch at line 24-27\n", "BRANCH #6: Covered if branch at line 35-36\n"]], "sampled_condition_paths": [["Line 21: NOT (num > 0)", "Line 24: (num < 0)", "Line 20: (num in nums)", "Line 21: NOT (num > 0)", "Line 24: (num < 0)", "Line 20: (num in nums)", "Line 21: NOT (num > 0)", "Line 24: (num < 0)"], ["Line 21: NOT (num > 0)", "Line 24: (num < 0)", "Line 20: (num in nums)", "Line 21: NOT (num > 0)", "Line 24: (num < 0)", "Line 20: (num in nums)", "Line 21: (num > 0)"], ["Line 20: (num in nums)", "Line 21: NOT (num > 0)", "Line 24: (num < 0)", "Line 20: (num in nums)", "Line 21: NOT (num > 0)", "Line 24: (num < 0)", "Line 35: (negCount >= 3)"], ["Line 20: (num in nums)", "Line 21: (num > 0)", "Line 20: (num in nums)", "Line 21: NOT (num > 0)", "Line 24: (num < 0)", "Line 35: (negCount >= 3)"]]}
{"task_num": 2709, "task_title": "Greatest Common Divisor Traversal", "sampled_paths": [["LOOP #6: Entered while loop at line 67-68\n", "LOOP #2: Entered for loop at line 46-51\n", "BRANCH #5: Covered if branch at line 47-48\n", "BRANCH #3: Covered else branch at line 24-26\n", "LOOP #2: Entered for loop at line 46-51\n"], ["LOOP #5: Entered while loop at line 64-68\n", "LOOP #6: Entered while loop at line 67-68\n", "LOOP #2: Entered for loop at line 46-51\n", "BRANCH #6: Covered else branch at line 49-50\n", "LOOP #1: Entered for loop at line 45-51\n"], ["LOOP #2: Entered for loop at line 46-51\n", "BRANCH #5: Covered if branch at line 47-48\n", "BRANCH #4: Covered if branch at line 32-33\n", "BRANCH #2: Covered if branch at line 21-23\n", "LOOP #1: Entered for loop at line 45-51\n"], ["LOOP #2: Entered for loop at line 46-51\n", "BRANCH #5: Covered if branch at line 47-48\n", "BRANCH #3: Covered else branch at line 24-26\n", "LOOP #1: Entered for loop at line 45-51\n", "LOOP #5: Entered while loop at line 64-68\n"], ["BRANCH #5: Covered if branch at line 47-48\n", "BRANCH #3: Covered else branch at line 24-26\n", "LOOP #2: Entered for loop at line 46-51\n", "BRANCH #5: Covered if branch at line 47-48\n", "BRANCH #4: Covered if branch at line 32-33\n"], ["BRANCH #3: Covered else branch at line 24-26\n", "LOOP #2: Entered for loop at line 46-51\n", "BRANCH #5: Covered if branch at line 47-48\n", "BRANCH #4: Covered if branch at line 32-33\n", "BRANCH #2: Covered if branch at line 21-23\n"]], "sampled_condition_paths": [["Line 67: (num % divisor == 0)", "Line 46: (prime_factor in self._getPrimeFactors(num, maxPrimeFactor))", "Line 47: (prime_factor in primeToFirstIndex)", "Line 21: NOT (self.sz[i] < self.sz[j])", "Line 24: ", "Line 46: (prime_factor in self._getPrimeFactors(num, maxPrimeFactor))"], ["Line 64: (num > 1)", "Line 67: (num % divisor == 0)", "Line 46: (prime_factor in self._getPrimeFactors(num, maxPrimeFactor))", "Line 47: NOT (prime_factor in primeToFirstIndex)", "Line 49: ", "Line 45: (i, num in enumerate(nums))"], ["Line 46: (prime_factor in self._getPrimeFactors(num, maxPrimeFactor))", "Line 47: (prime_factor in primeToFirstIndex)", "Line 32: (self.id[u] != u)", "Line 21: (self.sz[i] < self.sz[j])", "Line 45: (i, num in enumerate(nums))"], ["Line 46: (prime_factor in self._getPrimeFactors(num, maxPrimeFactor))", "Line 47: (prime_factor in primeToFirstIndex)", "Line 21: NOT (self.sz[i] < self.sz[j])", "Line 24: ", "Line 45: (i, num in enumerate(nums))", "Line 64: (num > 1)"], ["Line 47: (prime_factor in primeToFirstIndex)", "Line 21: NOT (self.sz[i] < self.sz[j])", "Line 24: ", "Line 46: (prime_factor in self._getPrimeFactors(num, maxPrimeFactor))", "Line 47: (prime_factor in primeToFirstIndex)", "Line 32: (self.id[u] != u)"], ["Line 21: NOT (self.sz[i] < self.sz[j])", "Line 24: ", "Line 46: (prime_factor in self._getPrimeFactors(num, maxPrimeFactor))", "Line 47: (prime_factor in primeToFirstIndex)", "Line 32: (self.id[u] != u)", "Line 21: (self.sz[i] < self.sz[j])"]]}
{"task_num": 2736, "task_title": "Maximum Sum Queries", "sampled_paths": [["BRANCH #1: Covered if branch at line 46-47\n", "LOOP #2: Entered while loop at line 42-48\n", "LOOP #3: Entered while loop at line 44-45\n", "BRANCH #1: Covered if branch at line 46-47\n", "LOOP #4: Entered while loop at line 60-65\n"], ["LOOP #2: Entered while loop at line 42-48\n", "LOOP #4: Entered while loop at line 60-65\n", "BRANCH #4: Covered if branch at line 62-63\n", "BRANCH #3: Covered else branch at line 52-53\n", "LOOP #1: Entered for loop at line 41-54\n"], ["LOOP #3: Entered while loop at line 44-45\n", "BRANCH #1: Covered if branch at line 46-47\n", "LOOP #4: Entered while loop at line 60-65\n", "BRANCH #4: Covered if branch at line 62-63\n", "BRANCH #3: Covered else branch at line 52-53\n"], ["BRANCH #3: Covered else branch at line 52-53\n", "LOOP #1: Entered for loop at line 41-54\n", "LOOP #2: Entered while loop at line 42-48\n", "LOOP #4: Entered while loop at line 60-65\n", "BRANCH #4: Covered if branch at line 62-63\n"], ["LOOP #1: Entered for loop at line 41-54\n", "BRANCH #2: Covered if branch at line 50-51\n"]], "sampled_condition_paths": [["Line 46: (not stack or y > stack[-1][0])", "Line 42: (pairsIndex < len(pairs) and pairs[pairsIndex].x >= minX)", "Line 44: (stack and x + y >= stack[-1][1])", "Line 46: (not stack or y > stack[-1][0])", "Line 60: (l < r)"], ["Line 42: (pairsIndex < len(pairs) and pairs[pairsIndex].x >= minX)", "Line 60: (l < r)", "Line 62: (A[m][0] >= target)", "Line 50: NOT (j == len(stack))", "Line 52: ", "Line 41: (queryIndex, minX, minY in sorted([IndexedQuery(i, query[0], query[1]) for i, query in enumerate(queries)], key=lambda iq: -iq.minX))"], ["Line 44: (stack and x + y >= stack[-1][1])", "Line 46: (not stack or y > stack[-1][0])", "Line 60: (l < r)", "Line 62: (A[m][0] >= target)", "Line 50: NOT (j == len(stack))", "Line 52: "], ["Line 50: NOT (j == len(stack))", "Line 52: ", "Line 41: (queryIndex, minX, minY in sorted([IndexedQuery(i, query[0], query[1]) for i, query in enumerate(queries)], key=lambda iq: -iq.minX))", "Line 42: (pairsIndex < len(pairs) and pairs[pairsIndex].x >= minX)", "Line 60: (l < r)", "Line 62: (A[m][0] >= target)"], ["Line 41: (queryIndex, minX, minY in sorted([IndexedQuery(i, query[0], query[1]) for i, query in enumerate(queries)], key=lambda iq: -iq.minX))", "Line 50: (j == len(stack))"]]}
{"task_num": 2747, "task_title": "Count Zero Request Servers", "sampled_paths": [["BRANCH #1: Covered if branch at line 35-36\n", "LOOP #2: Entered while loop at line 33-37\n", "BRANCH #1: Covered if branch at line 35-36\n", "LOOP #2: Entered while loop at line 33-37\n", "BRANCH #1: Covered if branch at line 35-36\n"], ["LOOP #1: Entered for loop at line 32-44\n", "LOOP #2: Entered while loop at line 33-37\n", "LOOP #3: Entered while loop at line 38-42\n", "LOOP #3: Entered while loop at line 38-42\n", "BRANCH #2: Covered if branch at line 40-41\n"], ["LOOP #2: Entered while loop at line 33-37\n", "LOOP #2: Entered while loop at line 33-37\n", "BRANCH #1: Covered if branch at line 35-36\n", "LOOP #3: Entered while loop at line 38-42\n", "LOOP #1: Entered for loop at line 32-44\n"], ["LOOP #2: Entered while loop at line 33-37\n", "BRANCH #1: Covered if branch at line 35-36\n", "LOOP #2: Entered while loop at line 33-37\n", "LOOP #2: Entered while loop at line 33-37\n", "BRANCH #1: Covered if branch at line 35-36\n"]], "sampled_condition_paths": [["Line 35: (count[logs[j][0]] == 1)", "Line 33: (j < len(logs) and logs[j][1] <= query)", "Line 35: (count[logs[j][0]] == 1)", "Line 33: (j < len(logs) and logs[j][1] <= query)", "Line 35: (count[logs[j][0]] == 1)"], ["Line 32: (queryIndex, query in sorted([IndexedQuery(i, query) for i, query in enumerate(queries)], key=lambda iq: iq.query))", "Line 33: (j < len(logs) and logs[j][1] <= query)", "Line 38: (i < len(logs) and logs[i][1] < query - x)", "Line 38: (i < len(logs) and logs[i][1] < query - x)", "Line 40: (count[logs[i][0]] == 0)"], ["Line 33: (j < len(logs) and logs[j][1] <= query)", "Line 33: (j < len(logs) and logs[j][1] <= query)", "Line 35: (count[logs[j][0]] == 1)", "Line 38: (i < len(logs) and logs[i][1] < query - x)", "Line 32: (queryIndex, query in sorted([IndexedQuery(i, query) for i, query in enumerate(queries)], key=lambda iq: iq.query))"], ["Line 33: (j < len(logs) and logs[j][1] <= query)", "Line 35: (count[logs[j][0]] == 1)", "Line 33: (j < len(logs) and logs[j][1] <= query)", "Line 33: (j < len(logs) and logs[j][1] <= query)", "Line 35: (count[logs[j][0]] == 1)"]]}
{"task_num": 2751, "task_title": "Robot Collisions", "sampled_paths": [["LOOP #2: Entered while loop at line 29-38\n", "BRANCH #2: Covered if branch at line 30-32\n", "LOOP #1: Entered for loop at line 25-41\n", "LOOP #2: Entered while loop at line 29-38\n", "BRANCH #4: Covered else branch at line 36-38\n"], ["LOOP #1: Entered for loop at line 25-41\n", "BRANCH #1: Covered if branch at line 26-28\n", "LOOP #1: Entered for loop at line 25-41\n", "LOOP #2: Entered while loop at line 29-38\n", "BRANCH #2: Covered if branch at line 30-32\n"], ["LOOP #1: Entered for loop at line 25-41\n", "BRANCH #1: Covered if branch at line 26-28\n", "LOOP #1: Entered for loop at line 25-41\n", "BRANCH #1: Covered if branch at line 26-28\n", "LOOP #1: Entered for loop at line 25-41\n"], ["BRANCH #2: Covered if branch at line 30-32\n", "LOOP #1: Entered for loop at line 25-41\n", "BRANCH #1: Covered if branch at line 26-28\n", "LOOP #1: Entered for loop at line 25-41\n", "LOOP #2: Entered while loop at line 29-38\n"], ["LOOP #1: Entered for loop at line 25-41\n", "LOOP #2: Entered while loop at line 29-38\n", "BRANCH #2: Covered if branch at line 30-32\n", "LOOP #1: Entered for loop at line 25-41\n", "LOOP #2: Entered while loop at line 29-38\n"]], "sampled_condition_paths": [["Line 29: (stack and stack[-1].direction == 'R' and robot.health > 0)", "Line 30: (stack[-1].health == robot.health)", "Line 25: (robot in robots)", "Line 29: (stack and stack[-1].direction == 'R' and robot.health > 0)", "Line 30: NOT (stack[-1].health == robot.health)", "Line 33: NOT (stack[-1].health < robot.health)", "Line 36: "], ["Line 25: (robot in robots)", "Line 26: (robot.direction == 'R')", "Line 25: (robot in robots)", "Line 29: (stack and stack[-1].direction == 'R' and robot.health > 0)", "Line 30: (stack[-1].health == robot.health)"], ["Line 25: (robot in robots)", "Line 26: (robot.direction == 'R')", "Line 25: (robot in robots)", "Line 26: (robot.direction == 'R')", "Line 25: (robot in robots)"], ["Line 30: (stack[-1].health == robot.health)", "Line 25: (robot in robots)", "Line 26: (robot.direction == 'R')", "Line 25: (robot in robots)", "Line 29: (stack and stack[-1].direction == 'R' and robot.health > 0)"], ["Line 25: (robot in robots)", "Line 29: (stack and stack[-1].direction == 'R' and robot.health > 0)", "Line 30: (stack[-1].health == robot.health)", "Line 25: (robot in robots)", "Line 29: (stack and stack[-1].direction == 'R' and robot.health > 0)"]]}
{"task_num": 2812, "task_title": "Find the Safest Path in a Grid", "sampled_paths": [["LOOP #7: Entered for loop at line 61-69\n", "BRANCH #7: Covered if branch at line 64-65\n", "LOOP #7: Entered for loop at line 61-69\n", "BRANCH #8: Covered if branch at line 66-67\n", "BRANCH #1: Covered if branch at line 18-19\n"], ["BRANCH #4: Covered if branch at line 33-34\n", "LOOP #2: Entered for loop at line 30-39\n", "LOOP #2: Entered for loop at line 30-39\n", "BRANCH #5: Covered if branch at line 35-36\n", "LOOP #2: Entered for loop at line 30-39\n"], ["LOOP #4: Entered for loop at line 51-55\n", "LOOP #3: Entered for loop at line 50-55\n", "LOOP #4: Entered for loop at line 51-55\n", "LOOP #4: Entered for loop at line 51-55\n", "LOOP #4: Entered for loop at line 51-55\n"], ["BRANCH #8: Covered if branch at line 66-67\n", "LOOP #7: Entered for loop at line 61-69\n", "BRANCH #7: Covered if branch at line 64-65\n", "LOOP #7: Entered for loop at line 61-69\n", "BRANCH #7: Covered if branch at line 64-65\n"], ["BRANCH #8: Covered if branch at line 66-67\n", "LOOP #7: Entered for loop at line 61-69\n", "BRANCH #7: Covered if branch at line 64-65\n", "LOOP #7: Entered for loop at line 61-69\n", "BRANCH #8: Covered if branch at line 66-67\n"], ["LOOP #7: Entered for loop at line 61-69\n", "BRANCH #8: Covered if branch at line 66-67\n", "LOOP #6: Entered for loop at line 58-69\n", "LOOP #7: Entered for loop at line 61-69\n", "BRANCH #8: Covered if branch at line 66-67\n"]], "sampled_condition_paths": [["Line 61: (dx, dy in self.dirs)", "Line 64: (x < 0 or x == n or y < 0 or y == n)", "Line 61: (dx, dy in self.dirs)", "Line 66: ((x, y) in seen)", "Line 18: (distToThief[0][0] < safeness)"], ["Line 33: (x < 0 or x == n or y < 0 or y == n)", "Line 30: (dx, dy in self.dirs)", "Line 30: (dx, dy in self.dirs)", "Line 35: ((x, y) in seen)", "Line 30: (dx, dy in self.dirs)"], ["Line 51: (j in range(n))", "Line 50: (i in range(n))", "Line 51: (j in range(n))", "Line 51: (j in range(n))", "Line 51: (j in range(n))"], ["Line 66: ((x, y) in seen)", "Line 61: (dx, dy in self.dirs)", "Line 64: (x < 0 or x == n or y < 0 or y == n)", "Line 61: (dx, dy in self.dirs)", "Line 64: (x < 0 or x == n or y < 0 or y == n)"], ["Line 66: ((x, y) in seen)", "Line 61: (dx, dy in self.dirs)", "Line 64: (x < 0 or x == n or y < 0 or y == n)", "Line 61: (dx, dy in self.dirs)", "Line 66: ((x, y) in seen)"], ["Line 61: (dx, dy in self.dirs)", "Line 66: ((x, y) in seen)", "Line 58: (_ in range(len(q)))", "Line 61: (dx, dy in self.dirs)", "Line 66: ((x, y) in seen)"]]}
{"task_num": 2818, "task_title": "Apply Operations to Maximize Score", "sampled_paths": [["LOOP #8: Entered while loop at line 62-66\n", "LOOP #9: Entered while loop at line 65-66\n", "LOOP #8: Entered while loop at line 62-66\n", "LOOP #9: Entered while loop at line 65-66\n", "LOOP #9: Entered while loop at line 65-66\n"], ["LOOP #8: Entered while loop at line 62-66\n", "LOOP #9: Entered while loop at line 65-66\n", "LOOP #8: Entered while loop at line 62-66\n", "LOOP #9: Entered while loop at line 65-66\n", "LOOP #8: Entered while loop at line 62-66\n"], ["BRANCH #1: Covered if branch at line 37-38\n", "LOOP #5: Entered for loop at line 43-49\n", "BRANCH #2: Covered if branch at line 39-40\n", "BRANCH #1: Covered if branch at line 37-38\n", "LOOP #5: Entered for loop at line 43-49\n"], ["LOOP #1: Entered for loop at line 22-26\n", "LOOP #1: Entered for loop at line 22-26\n", "LOOP #2: Entered while loop at line 23-24\n", "LOOP #1: Entered for loop at line 22-26\n", "LOOP #2: Entered while loop at line 23-24\n"]], "sampled_condition_paths": [["Line 62: (num > 1)", "Line 65: (num % divisor == 0)", "Line 62: (num > 1)", "Line 65: (num % divisor == 0)", "Line 65: (num % divisor == 0)"], ["Line 62: (num > 1)", "Line 65: (num % divisor == 0)", "Line 62: (num > 1)", "Line 65: (num % divisor == 0)", "Line 62: (num > 1)"], ["Line 37: (n == 0)", "Line 43: (num, i in sorted(numAndIndexes, key=lambda x: (-x[0], x[1])))", "Line 39: (n & 1)", "Line 37: (n == 0)", "Line 43: (num, i in sorted(numAndIndexes, key=lambda x: (-x[0], x[1])))"], ["Line 22: (i in reversed(range(n)))", "Line 22: (i in reversed(range(n)))", "Line 23: (stack and primeScores[stack[-1]] <= primeScores[i])", "Line 22: (i in reversed(range(n)))", "Line 23: (stack and primeScores[stack[-1]] <= primeScores[i])"]]}
{"task_num": 2836, "task_title": "Maximize Value of Function in a Ball Passing Game", "sampled_paths": [["LOOP #3: Entered for loop at line 24-28\n", "LOOP #3: Entered for loop at line 24-28\n", "LOOP #4: Entered for loop at line 29-37\n", "LOOP #5: Entered for loop at line 32-35\n", "LOOP #5: Entered for loop at line 32-35\n"], ["LOOP #4: Entered for loop at line 29-37\n", "LOOP #5: Entered for loop at line 32-35\n", "LOOP #5: Entered for loop at line 32-35\n", "LOOP #5: Entered for loop at line 32-35\n", "BRANCH #1: Covered if branch at line 33-35\n"], ["BRANCH #1: Covered if branch at line 33-35\n", "LOOP #4: Entered for loop at line 29-37\n", "LOOP #5: Entered for loop at line 32-35\n", "BRANCH #1: Covered if branch at line 33-35\n", "LOOP #5: Entered for loop at line 32-35\n"], ["LOOP #5: Entered for loop at line 32-35\n", "BRANCH #1: Covered if branch at line 33-35\n", "LOOP #4: Entered for loop at line 29-37\n", "LOOP #5: Entered for loop at line 32-35\n", "BRANCH #1: Covered if branch at line 33-35\n"]], "sampled_condition_paths": [["Line 24: (i in range(n))", "Line 24: (i in range(n))", "Line 29: (i in range(n))", "Line 32: (j in range(m))", "Line 32: (j in range(m))"], ["Line 29: (i in range(n))", "Line 32: (j in range(m))", "Line 32: (j in range(m))", "Line 32: (j in range(m))", "Line 33: ((k >> j) & 1 == 1)"], ["Line 33: ((k >> j) & 1 == 1)", "Line 29: (i in range(n))", "Line 32: (j in range(m))", "Line 33: ((k >> j) & 1 == 1)", "Line 32: (j in range(m))"], ["Line 32: (j in range(m))", "Line 33: ((k >> j) & 1 == 1)", "Line 29: (i in range(n))", "Line 32: (j in range(m))", "Line 33: ((k >> j) & 1 == 1)"]]}
{"task_num": 2844, "task_title": "Minimum Operations to Make a Special Number", "sampled_paths": [["LOOP #1: Entered for loop at line 17-28\n", "LOOP #1: Entered for loop at line 17-28\n", "BRANCH #5: Covered if branch at line 29-30\n"], ["LOOP #1: Entered for loop at line 17-28\n", "LOOP #1: Entered for loop at line 17-28\n", "LOOP #1: Entered for loop at line 17-28\n", "LOOP #1: Entered for loop at line 17-28\n", "BRANCH #2: Covered if branch at line 20-21\n"], ["LOOP #1: Entered for loop at line 17-28\n", "LOOP #1: Entered for loop at line 17-28\n", "LOOP #1: Entered for loop at line 17-28\n", "LOOP #1: Entered for loop at line 17-28\n", "BRANCH #1: Covered if branch at line 18-19\n"]], "sampled_condition_paths": [["Line 17: (i in range(n - 1, -1, -1))", "Line 17: (i in range(n - 1, -1, -1))", "Line 29: (seenZero)"], ["Line 17: (i in range(n - 1, -1, -1))", "Line 17: (i in range(n - 1, -1, -1))", "Line 17: (i in range(n - 1, -1, -1))", "Line 17: (i in range(n - 1, -1, -1))", "Line 20: (seenZero and num[i] == '5')"], ["Line 17: (i in range(n - 1, -1, -1))", "Line 17: (i in range(n - 1, -1, -1))", "Line 17: (i in range(n - 1, -1, -1))", "Line 17: (i in range(n - 1, -1, -1))", "Line 18: (seenZero and num[i] == '0')"]]}
{"task_num": 2846, "task_title": "Minimum Edge Weight Equilibrium Queries in a Tree", "sampled_paths": [["LOOP #5: Entered for loop at line 46-48\n", "LOOP #5: Entered for loop at line 46-48\n", "LOOP #6: Entered for loop at line 51-54\n", "LOOP #6: Entered for loop at line 51-54\n", "LOOP #6: Entered for loop at line 51-54\n"], ["LOOP #4: Entered for loop at line 40-42\n", "LOOP #4: Entered for loop at line 40-42\n", "LOOP #4: Entered for loop at line 40-42\n", "LOOP #4: Entered for loop at line 40-42\n", "LOOP #4: Entered for loop at line 40-42\n"], ["BRANCH #1: Covered if branch at line 26-27\n", "LOOP #2: Entered for loop at line 29-35\n", "BRANCH #2: Covered if branch at line 30-31\n", "LOOP #2: Entered for loop at line 29-35\n", "BRANCH #1: Covered if branch at line 26-27\n"], ["LOOP #2: Entered for loop at line 29-35\n", "BRANCH #1: Covered if branch at line 26-27\n", "LOOP #2: Entered for loop at line 29-35\n", "BRANCH #2: Covered if branch at line 30-31\n", "LOOP #2: Entered for loop at line 29-35\n"]], "sampled_condition_paths": [["Line 46: (j in range(m))", "Line 46: (j in range(m))", "Line 51: (j in range(m - 1, -1, -1))", "Line 51: (j in range(m - 1, -1, -1))", "Line 51: (j in range(m - 1, -1, -1))"], ["Line 40: (i in range(n))", "Line 40: (i in range(n))", "Line 40: (i in range(n))", "Line 40: (i in range(n))", "Line 40: (i in range(n))"], ["Line 26: (prev != -1)", "Line 29: (v, w in graph[u])", "Line 30: (v == prev)", "Line 29: (v, w in graph[u])", "Line 26: (prev != -1)"], ["Line 29: (v, w in graph[u])", "Line 26: (prev != -1)", "Line 29: (v, w in graph[u])", "Line 30: (v == prev)", "Line 29: (v, w in graph[u])"]]}
{"task_num": 2850, "task_title": "Minimum Moves to Spread Stones Over Grid", "sampled_paths": [["LOOP #3: Entered for loop at line 21-29\n", "LOOP #4: Entered for loop at line 22-29\n", "LOOP #4: Entered for loop at line 22-29\n", "LOOP #4: Entered for loop at line 22-29\n", "LOOP #3: Entered for loop at line 21-29\n"], ["LOOP #4: Entered for loop at line 22-29\n", "LOOP #4: Entered for loop at line 22-29\n", "BRANCH #3: Covered if branch at line 23-28\n", "BRANCH #1: Covered if branch at line 13-14\n", "LOOP #4: Entered for loop at line 22-29\n"], ["BRANCH #3: Covered if branch at line 23-28\n", "BRANCH #1: Covered if branch at line 13-14\n", "LOOP #4: Entered for loop at line 22-29\n", "LOOP #1: Entered for loop at line 18-29\n", "LOOP #2: Entered for loop at line 19-29\n"]], "sampled_condition_paths": [["Line 21: (x in range(3))", "Line 22: (y in range(3))", "Line 22: (y in range(3))", "Line 22: (y in range(3))", "Line 21: (x in range(3))"], ["Line 22: (y in range(3))", "Line 22: (y in range(3))", "Line 23: (grid[x][y] > 1)", "Line 13: (sum(row.count(0) for row in grid) == 0)", "Line 22: (y in range(3))"], ["Line 23: (grid[x][y] > 1)", "Line 13: (sum(row.count(0) for row in grid) == 0)", "Line 22: (y in range(3))", "Line 18: (i in range(3))", "Line 19: (j in range(3))"]]}
{"task_num": 2851, "task_title": "String Transformation", "sampled_paths": [["BRANCH #3: Covered if branch at line 37-38\n", "LOOP #2: Entered for loop at line 36-43\n", "BRANCH #3: Covered if branch at line 37-38\n", "LOOP #2: Entered for loop at line 36-43\n", "BRANCH #3: Covered if branch at line 37-38\n"], ["BRANCH #3: Covered if branch at line 37-38\n", "LOOP #2: Entered for loop at line 36-43\n", "LOOP #3: Entered while loop at line 39-40\n", "LOOP #3: Entered while loop at line 39-40\n", "BRANCH #4: Covered if branch at line 41-43\n"], ["LOOP #3: Entered while loop at line 39-40\n", "LOOP #3: Entered while loop at line 39-40\n", "LOOP #3: Entered while loop at line 39-40\n", "BRANCH #4: Covered if branch at line 41-43\n", "LOOP #2: Entered for loop at line 36-43\n"], ["LOOP #2: Entered for loop at line 36-43\n", "BRANCH #3: Covered if branch at line 37-38\n", "LOOP #2: Entered for loop at line 36-43\n", "BRANCH #3: Covered if branch at line 37-38\n", "LOOP #2: Entered for loop at line 36-43\n"]], "sampled_condition_paths": [["Line 37: (i < r)", "Line 36: (i in range(1, n))", "Line 37: (i < r)", "Line 36: (i in range(1, n))", "Line 37: (i < r)"], ["Line 37: (i < r)", "Line 36: (i in range(1, n))", "Line 39: (i + z[i] < n and s[z[i]] == s[i + z[i]])", "Line 39: (i + z[i] < n and s[z[i]] == s[i + z[i]])", "Line 41: (i + z[i] > r)"], ["Line 39: (i + z[i] < n and s[z[i]] == s[i + z[i]])", "Line 39: (i + z[i] < n and s[z[i]] == s[i + z[i]])", "Line 39: (i + z[i] < n and s[z[i]] == s[i + z[i]])", "Line 41: (i + z[i] > r)", "Line 36: (i in range(1, n))"], ["Line 36: (i in range(1, n))", "Line 37: (i < r)", "Line 36: (i in range(1, n))", "Line 37: (i < r)", "Line 36: (i in range(1, n))"]]}
{"task_num": 2876, "task_title": "Count Visited Nodes in a Directed Graph", "sampled_paths": [["LOOP #6: Entered while loop at line 51-54\n", "LOOP #6: Entered while loop at line 51-54\n", "LOOP #6: Entered while loop at line 51-54\n", "LOOP #6: Entered while loop at line 51-54\n", "LOOP #3: Entered for loop at line 32-35\n"], ["LOOP #1: Entered for loop at line 19-21\n", "LOOP #1: Entered for loop at line 19-21\n", "LOOP #1: Entered for loop at line 19-21\n", "LOOP #2: Entered while loop at line 24-31\n", "LOOP #3: Entered for loop at line 32-35\n"], ["LOOP #5: Entered while loop at line 45-48\n", "LOOP #5: Entered while loop at line 45-48\n", "LOOP #5: Entered while loop at line 45-48\n", "LOOP #5: Entered while loop at line 45-48\n", "LOOP #6: Entered while loop at line 51-54\n"], ["LOOP #5: Entered while loop at line 45-48\n", "LOOP #5: Entered while loop at line 45-48\n", "LOOP #6: Entered while loop at line 51-54\n", "LOOP #6: Entered while loop at line 51-54\n", "LOOP #3: Entered for loop at line 32-35\n"]], "sampled_condition_paths": [["Line 51: (u != start)", "Line 51: (u != start)", "Line 51: (u != start)", "Line 51: (u != start)", "Line 32: (i in range(n))"], ["Line 19: (v in edges)", "Line 19: (v in edges)", "Line 19: (v in edges)", "Line 24: (q)", "Line 32: (i in range(n))"], ["Line 45: (not seen[u])", "Line 45: (not seen[u])", "Line 45: (not seen[u])", "Line 45: (not seen[u])", "Line 51: (u != start)"], ["Line 45: (not seen[u])", "Line 45: (not seen[u])", "Line 51: (u != start)", "Line 51: (u != start)", "Line 32: (i in range(n))"]]}
{"task_num": 2901, "task_title": "Longest Unequal Adjacent Groups Subsequence II", "sampled_paths": [["LOOP #2: Entered for loop at line 19-29\n", "BRANCH #4: Covered if branch at line 26-28\n", "LOOP #2: Entered for loop at line 19-29\n", "BRANCH #4: Covered if branch at line 26-28\n", "LOOP #1: Entered for loop at line 18-29\n"], ["LOOP #1: Entered for loop at line 18-29\n", "LOOP #2: Entered for loop at line 19-29\n", "BRANCH #4: Covered if branch at line 26-28\n", "LOOP #2: Entered for loop at line 19-29\n", "BRANCH #1: Covered if branch at line 20-21\n"], ["BRANCH #4: Covered if branch at line 26-28\n", "LOOP #1: Entered for loop at line 18-29\n", "LOOP #2: Entered for loop at line 19-29\n", "BRANCH #4: Covered if branch at line 26-28\n", "LOOP #2: Entered for loop at line 19-29\n"], ["LOOP #2: Entered for loop at line 19-29\n", "BRANCH #4: Covered if branch at line 26-28\n", "LOOP #1: Entered for loop at line 18-29\n", "LOOP #2: Entered for loop at line 19-29\n", "BRANCH #4: Covered if branch at line 26-28\n"]], "sampled_condition_paths": [["Line 19: (j in range(i))", "Line 26: (dp[i] < dp[j] + 1)", "Line 19: (j in range(i))", "Line 26: (dp[i] < dp[j] + 1)", "Line 18: (i in range(1, n))"], ["Line 18: (i in range(1, n))", "Line 19: (j in range(i))", "Line 26: (dp[i] < dp[j] + 1)", "Line 19: (j in range(i))", "Line 20: (groups[i] == groups[j])"], ["Line 26: (dp[i] < dp[j] + 1)", "Line 18: (i in range(1, n))", "Line 19: (j in range(i))", "Line 26: (dp[i] < dp[j] + 1)", "Line 19: (j in range(i))"], ["Line 19: (j in range(i))", "Line 26: (dp[i] < dp[j] + 1)", "Line 18: (i in range(1, n))", "Line 19: (j in range(i))", "Line 26: (dp[i] < dp[j] + 1)"]]}
{"task_num": 2904, "task_title": "Shortest and Lexicographically Smallest Beautiful String", "sampled_paths": [["LOOP #1: Entered for loop at line 18-30\n", "LOOP #1: Entered for loop at line 18-30\n", "LOOP #1: Entered for loop at line 18-30\n", "BRANCH #5: Covered if branch at line 31-32\n"], ["BRANCH #2: Covered if branch at line 22-24\n", "BRANCH #4: Covered if branch at line 27-28\n", "LOOP #1: Entered for loop at line 18-30\n", "LOOP #1: Entered for loop at line 18-30\n", "LOOP #1: Entered for loop at line 18-30\n"], ["LOOP #2: Entered while loop at line 21-30\n", "BRANCH #3: Covered elif branch at line 25-26\n", "LOOP #2: Entered while loop at line 21-30\n", "BRANCH #2: Covered if branch at line 22-24\n", "BRANCH #4: Covered if branch at line 27-28\n"], ["BRANCH #3: Covered elif branch at line 25-26\n", "LOOP #2: Entered while loop at line 21-30\n", "BRANCH #2: Covered if branch at line 22-24\n", "BRANCH #4: Covered if branch at line 27-28\n", "BRANCH #6: Covered else branch at line 33-34\n"], ["BRANCH #1: Covered if branch at line 19-20\n", "LOOP #2: Entered while loop at line 21-30\n", "BRANCH #2: Covered if branch at line 22-24\n", "BRANCH #4: Covered if branch at line 27-28\n", "LOOP #1: Entered for loop at line 18-30\n"]], "sampled_condition_paths": [["Line 18: (r, c in enumerate(s))", "Line 18: (r, c in enumerate(s))", "Line 18: (r, c in enumerate(s))", "Line 31: (bestLeft == -1)"], ["Line 22: (r - l + 1 < minLength)", "Line 27: (s[l] == '1')", "Line 18: (r, c in enumerate(s))", "Line 18: (r, c in enumerate(s))", "Line 18: (r, c in enumerate(s))"], ["Line 21: (ones == k)", "Line 22: NOT (r - l + 1 < minLength)", "Line 25: (r - l + 1 == minLength and s[l:l + minLength] < s[bestLeft:bestLeft + minLength])", "Line 21: (ones == k)", "Line 22: (r - l + 1 < minLength)", "Line 27: (s[l] == '1')"], ["Line 22: NOT (r - l + 1 < minLength)", "Line 25: (r - l + 1 == minLength and s[l:l + minLength] < s[bestLeft:bestLeft + minLength])", "Line 21: (ones == k)", "Line 22: (r - l + 1 < minLength)", "Line 27: (s[l] == '1')", "Line 31: NOT (bestLeft == -1)", "Line 33: "], ["Line 19: (c == '1')", "Line 21: (ones == k)", "Line 22: (r - l + 1 < minLength)", "Line 27: (s[l] == '1')", "Line 18: (r, c in enumerate(s))"]]}
{"task_num": 2911, "task_title": "Minimum Changes to Make K Semi-palindromes", "sampled_paths": [["LOOP #6: Entered for loop at line 36-42\n", "LOOP #7: Entered for loop at line 37-42\n", "LOOP #8: Entered for loop at line 40-41\n", "LOOP #9: Entered for loop at line 47-54\n", "LOOP #10: Entered while loop at line 50-54\n"], ["LOOP #2: Entered for loop at line 21-24\n", "LOOP #3: Entered for loop at line 22-24\n", "LOOP #3: Entered for loop at line 22-24\n", "LOOP #2: Entered for loop at line 21-24\n", "LOOP #3: Entered for loop at line 22-24\n"], ["LOOP #2: Entered for loop at line 21-24\n", "LOOP #3: Entered for loop at line 22-24\n", "LOOP #1: Entered for loop at line 20-24\n", "LOOP #2: Entered for loop at line 21-24\n", "LOOP #3: Entered for loop at line 22-24\n"], ["BRANCH #1: Covered if branch at line 51-52\n", "LOOP #7: Entered for loop at line 37-42\n", "LOOP #8: Entered for loop at line 40-41\n", "LOOP #9: Entered for loop at line 47-54\n", "LOOP #10: Entered while loop at line 50-54\n"], ["LOOP #10: Entered while loop at line 50-54\n", "BRANCH #1: Covered if branch at line 51-52\n", "LOOP #6: Entered for loop at line 36-42\n", "LOOP #7: Entered for loop at line 37-42\n", "LOOP #8: Entered for loop at line 40-41\n"], ["LOOP #10: Entered while loop at line 50-54\n", "BRANCH #1: Covered if branch at line 51-52\n", "LOOP #9: Entered for loop at line 47-54\n", "LOOP #10: Entered while loop at line 50-54\n", "LOOP #6: Entered for loop at line 36-42\n"]], "sampled_condition_paths": [["Line 36: (i in range(n))", "Line 37: (j in range(i + 1, n))", "Line 40: (d in factors[length])", "Line 47: (offset in range(d))", "Line 50: (l < r)"], ["Line 21: (j in range(1, k + 1))", "Line 22: (l in range(i + 1, n))", "Line 22: (l in range(i + 1, n))", "Line 21: (j in range(1, k + 1))", "Line 22: (l in range(i + 1, n))"], ["Line 21: (j in range(1, k + 1))", "Line 22: (l in range(i + 1, n))", "Line 20: (i in range(n - 1, -1, -1))", "Line 21: (j in range(1, k + 1))", "Line 22: (l in range(i + 1, n))"], ["Line 51: (s[l] != s[r])", "Line 37: (j in range(i + 1, n))", "Line 40: (d in factors[length])", "Line 47: (offset in range(d))", "Line 50: (l < r)"], ["Line 50: (l < r)", "Line 51: (s[l] != s[r])", "Line 36: (i in range(n))", "Line 37: (j in range(i + 1, n))", "Line 40: (d in factors[length])"], ["Line 50: (l < r)", "Line 51: (s[l] != s[r])", "Line 47: (offset in range(d))", "Line 50: (l < r)", "Line 36: (i in range(n))"]]}
{"task_num": 2932, "task_title": "Maximum Strong Pair XOR I", "sampled_paths": [["LOOP #3: Entered for loop at line 55-57\n", "LOOP #1: Entered for loop at line 25-32\n", "BRANCH #1: Covered if branch at line 27-28\n", "LOOP #1: Entered for loop at line 25-32\n", "BRANCH #1: Covered if branch at line 27-28\n"], ["LOOP #2: Entered for loop at line 36-45\n", "BRANCH #3: Covered elif branch at line 42-43\n", "LOOP #2: Entered for loop at line 36-45\n", "BRANCH #2: Covered if branch at line 39-41\n", "LOOP #2: Entered for loop at line 36-45\n"], ["BRANCH #3: Covered elif branch at line 42-43\n", "LOOP #2: Entered for loop at line 36-45\n", "BRANCH #3: Covered elif branch at line 42-43\n", "LOOP #2: Entered for loop at line 36-45\n", "BRANCH #3: Covered elif branch at line 42-43\n"], ["BRANCH #1: Covered if branch at line 27-28\n", "LOOP #1: Entered for loop at line 25-32\n", "BRANCH #1: Covered if branch at line 27-28\n", "LOOP #1: Entered for loop at line 25-32\n", "BRANCH #1: Covered if branch at line 27-28\n"], ["LOOP #2: Entered for loop at line 36-45\n", "BRANCH #3: Covered elif branch at line 42-43\n", "LOOP #2: Entered for loop at line 36-45\n", "BRANCH #3: Covered elif branch at line 42-43\n", "LOOP #2: Entered for loop at line 36-45\n"]], "sampled_condition_paths": [["Line 55: (num in nums)", "Line 25: (i in range(self.maxBit, -1, -1))", "Line 27: (not node.children[bit])", "Line 25: (i in range(self.maxBit, -1, -1))", "Line 27: (not node.children[bit])"], ["Line 36: (i in range(self.maxBit, -1, -1))", "Line 39: NOT (node.children[toggleBit] and node.children[toggleBit].max > x and node.children[toggleBit].min <= 2 * x)", "Line 42: (node.children[bit])", "Line 36: (i in range(self.maxBit, -1, -1))", "Line 39: (node.children[toggleBit] and node.children[toggleBit].max > x and node.children[toggleBit].min <= 2 * x)", "Line 36: (i in range(self.maxBit, -1, -1))"], ["Line 39: NOT (node.children[toggleBit] and node.children[toggleBit].max > x and node.children[toggleBit].min <= 2 * x)", "Line 42: (node.children[bit])", "Line 36: (i in range(self.maxBit, -1, -1))", "Line 39: NOT (node.children[toggleBit] and node.children[toggleBit].max > x and node.children[toggleBit].min <= 2 * x)", "Line 42: (node.children[bit])", "Line 36: (i in range(self.maxBit, -1, -1))", "Line 39: NOT (node.children[toggleBit] and node.children[toggleBit].max > x and node.children[toggleBit].min <= 2 * x)", "Line 42: (node.children[bit])"], ["Line 27: (not node.children[bit])", "Line 25: (i in range(self.maxBit, -1, -1))", "Line 27: (not node.children[bit])", "Line 25: (i in range(self.maxBit, -1, -1))", "Line 27: (not node.children[bit])"], ["Line 36: (i in range(self.maxBit, -1, -1))", "Line 39: NOT (node.children[toggleBit] and node.children[toggleBit].max > x and node.children[toggleBit].min <= 2 * x)", "Line 42: (node.children[bit])", "Line 36: (i in range(self.maxBit, -1, -1))", "Line 39: NOT (node.children[toggleBit] and node.children[toggleBit].max > x and node.children[toggleBit].min <= 2 * x)", "Line 42: (node.children[bit])", "Line 36: (i in range(self.maxBit, -1, -1))"]]}
{"task_num": 2940, "task_title": "Find Building Where Alice and Bob Can Meet", "sampled_paths": [["LOOP #1: Entered for loop at line 29-41\n", "BRANCH #2: Covered else branch at line 32-40\n", "LOOP #2: Entered while loop at line 33-37\n", "LOOP #4: Entered while loop at line 47-52\n", "BRANCH #4: Covered if branch at line 49-50\n"], ["BRANCH #3: Covered if branch at line 39-40\n", "LOOP #1: Entered for loop at line 29-41\n", "BRANCH #2: Covered else branch at line 32-40\n", "LOOP #2: Entered while loop at line 33-37\n", "LOOP #4: Entered while loop at line 47-52\n"], ["LOOP #1: Entered for loop at line 29-41\n", "BRANCH #2: Covered else branch at line 32-40\n", "LOOP #2: Entered while loop at line 33-37\n", "LOOP #2: Entered while loop at line 33-37\n", "LOOP #4: Entered while loop at line 47-52\n"], ["LOOP #4: Entered while loop at line 47-52\n", "BRANCH #4: Covered if branch at line 49-50\n", "LOOP #4: Entered while loop at line 47-52\n", "BRANCH #4: Covered if branch at line 49-50\n", "BRANCH #3: Covered if branch at line 39-40\n"]], "sampled_condition_paths": [["Line 29: (queryIndex, a, b in sorted([IndexedQuery(i, min(a, b), max(a, b)) for i, (a, b) in enumerate(queries)], key=lambda iq: -iq.b))", "Line 30: NOT (a == b or heights[a] < heights[b])", "Line 32: ", "Line 33: (heightsIndex > b)", "Line 47: (l < r)", "Line 49: (heights[A[m]] > heights[target])"], ["Line 39: (j != -1)", "Line 29: (queryIndex, a, b in sorted([IndexedQuery(i, min(a, b), max(a, b)) for i, (a, b) in enumerate(queries)], key=lambda iq: -iq.b))", "Line 30: NOT (a == b or heights[a] < heights[b])", "Line 32: ", "Line 33: (heightsIndex > b)", "Line 47: (l < r)"], ["Line 29: (queryIndex, a, b in sorted([IndexedQuery(i, min(a, b), max(a, b)) for i, (a, b) in enumerate(queries)], key=lambda iq: -iq.b))", "Line 30: NOT (a == b or heights[a] < heights[b])", "Line 32: ", "Line 33: (heightsIndex > b)", "Line 33: (heightsIndex > b)", "Line 47: (l < r)"], ["Line 47: (l < r)", "Line 49: (heights[A[m]] > heights[target])", "Line 47: (l < r)", "Line 49: (heights[A[m]] > heights[target])", "Line 39: (j != -1)"]]}
{"task_num": 2948, "task_title": "Make Lexicographically Smallest Array by Swapping Elements", "sampled_paths": [["BRANCH #1: Covered if branch at line 18-19\n", "LOOP #2: Entered for loop at line 23-28\n", "LOOP #3: Entered for loop at line 26-28\n", "LOOP #3: Entered for loop at line 26-28\n", "LOOP #3: Entered for loop at line 26-28\n"], ["LOOP #3: Entered for loop at line 26-28\n", "LOOP #3: Entered for loop at line 26-28\n", "LOOP #2: Entered for loop at line 23-28\n", "LOOP #3: Entered for loop at line 26-28\n", "LOOP #3: Entered for loop at line 26-28\n"], ["LOOP #2: Entered for loop at line 23-28\n", "LOOP #3: Entered for loop at line 26-28\n", "LOOP #3: Entered for loop at line 26-28\n", "LOOP #2: Entered for loop at line 23-28\n", "LOOP #3: Entered for loop at line 26-28\n"], ["LOOP #1: Entered for loop at line 17-22\n", "BRANCH #1: Covered if branch at line 18-19\n", "LOOP #1: Entered for loop at line 17-22\n", "BRANCH #2: Covered else branch at line 20-21\n", "LOOP #1: Entered for loop at line 17-22\n"], ["BRANCH #1: Covered if branch at line 18-19\n", "LOOP #1: Entered for loop at line 17-22\n", "BRANCH #2: Covered else branch at line 20-21\n", "LOOP #1: Entered for loop at line 17-22\n", "BRANCH #1: Covered if branch at line 18-19\n"], ["BRANCH #2: Covered else branch at line 20-21\n", "LOOP #2: Entered for loop at line 23-28\n", "LOOP #3: Entered for loop at line 26-28\n", "LOOP #3: Entered for loop at line 26-28\n", "LOOP #3: Entered for loop at line 26-28\n"]], "sampled_condition_paths": [["Line 18: (not numAndIndexesGroups or numAndIndex[0] - numAndIndexesGroups[-1][-1][0] > limit)", "Line 23: (numAndIndexesGroup in numAndIndexesGroups)", "Line 26: (num, index in zip(sortedNums, sortedIndices))", "Line 26: (num, index in zip(sortedNums, sortedIndices))", "Line 26: (num, index in zip(sortedNums, sortedIndices))"], ["Line 26: (num, index in zip(sortedNums, sortedIndices))", "Line 26: (num, index in zip(sortedNums, sortedIndices))", "Line 23: (numAndIndexesGroup in numAndIndexesGroups)", "Line 26: (num, index in zip(sortedNums, sortedIndices))", "Line 26: (num, index in zip(sortedNums, sortedIndices))"], ["Line 23: (numAndIndexesGroup in numAndIndexesGroups)", "Line 26: (num, index in zip(sortedNums, sortedIndices))", "Line 26: (num, index in zip(sortedNums, sortedIndices))", "Line 23: (numAndIndexesGroup in numAndIndexesGroups)", "Line 26: (num, index in zip(sortedNums, sortedIndices))"], ["Line 17: (numAndIndex in numAndIndexes)", "Line 18: (not numAndIndexesGroups or numAndIndex[0] - numAndIndexesGroups[-1][-1][0] > limit)", "Line 17: (numAndIndex in numAndIndexes)", "Line 18: NOT (not numAndIndexesGroups or numAndIndex[0] - numAndIndexesGroups[-1][-1][0] > limit)", "Line 20: ", "Line 17: (numAndIndex in numAndIndexes)"], ["Line 18: (not numAndIndexesGroups or numAndIndex[0] - numAndIndexesGroups[-1][-1][0] > limit)", "Line 17: (numAndIndex in numAndIndexes)", "Line 18: NOT (not numAndIndexesGroups or numAndIndex[0] - numAndIndexesGroups[-1][-1][0] > limit)", "Line 20: ", "Line 17: (numAndIndex in numAndIndexes)", "Line 18: (not numAndIndexesGroups or numAndIndex[0] - numAndIndexesGroups[-1][-1][0] > limit)"], ["Line 18: NOT (not numAndIndexesGroups or numAndIndex[0] - numAndIndexesGroups[-1][-1][0] > limit)", "Line 20: ", "Line 23: (numAndIndexesGroup in numAndIndexesGroups)", "Line 26: (num, index in zip(sortedNums, sortedIndices))", "Line 26: (num, index in zip(sortedNums, sortedIndices))", "Line 26: (num, index in zip(sortedNums, sortedIndices))"]]}
{"task_num": 2953, "task_title": "Count Complete Substrings", "sampled_paths": [["BRANCH #3: Covered if branch at line 31-32\n", "LOOP #1: Entered for loop at line 21-33\n", "BRANCH #2: Covered if branch at line 28-30\n", "BRANCH #3: Covered if branch at line 31-32\n", "LOOP #1: Entered for loop at line 21-33\n"], ["BRANCH #2: Covered if branch at line 28-30\n", "BRANCH #3: Covered if branch at line 31-32\n", "LOOP #1: Entered for loop at line 21-33\n", "LOOP #1: Entered for loop at line 21-33\n", "LOOP #1: Entered for loop at line 21-33\n"], ["LOOP #1: Entered for loop at line 21-33\n", "BRANCH #2: Covered if branch at line 28-30\n", "BRANCH #3: Covered if branch at line 31-32\n", "LOOP #1: Entered for loop at line 21-33\n", "BRANCH #2: Covered if branch at line 28-30\n"], ["BRANCH #2: Covered if branch at line 28-30\n", "BRANCH #3: Covered if branch at line 31-32\n", "LOOP #1: Entered for loop at line 21-33\n", "BRANCH #2: Covered if branch at line 28-30\n", "BRANCH #3: Covered if branch at line 31-32\n"]], "sampled_condition_paths": [["Line 31: (countLetters == windowSize)", "Line 21: (i, c in enumerate(word))", "Line 28: (countLetters == windowSize + 1)", "Line 31: (countLetters == windowSize)", "Line 21: (i, c in enumerate(word))"], ["Line 28: (countLetters == windowSize + 1)", "Line 31: (countLetters == windowSize)", "Line 21: (i, c in enumerate(word))", "Line 21: (i, c in enumerate(word))", "Line 21: (i, c in enumerate(word))"], ["Line 21: (i, c in enumerate(word))", "Line 28: (countLetters == windowSize + 1)", "Line 31: (countLetters == windowSize)", "Line 21: (i, c in enumerate(word))", "Line 28: (countLetters == windowSize + 1)"], ["Line 28: (countLetters == windowSize + 1)", "Line 31: (countLetters == windowSize)", "Line 21: (i, c in enumerate(word))", "Line 28: (countLetters == windowSize + 1)", "Line 31: (countLetters == windowSize)"]]}
{"task_num": 2959, "task_title": "Number of Possible Sets of Closing Branches", "sampled_paths": [["LOOP #5: Entered for loop at line 32-35\n", "LOOP #4: Entered for loop at line 30-35\n", "BRANCH #4: Covered if branch at line 31-34\n", "LOOP #5: Entered for loop at line 32-35\n", "BRANCH #5: Covered if branch at line 33-34\n"], ["LOOP #3: Entered for loop at line 28-35\n", "BRANCH #3: Covered if branch at line 29-34\n", "LOOP #4: Entered for loop at line 30-35\n", "BRANCH #4: Covered if branch at line 31-34\n", "LOOP #5: Entered for loop at line 32-35\n"], ["BRANCH #2: Covered if branch at line 24-26\n", "LOOP #3: Entered for loop at line 28-35\n", "BRANCH #3: Covered if branch at line 29-34\n", "LOOP #4: Entered for loop at line 30-35\n", "BRANCH #4: Covered if branch at line 31-34\n"], ["LOOP #2: Entered for loop at line 23-27\n", "BRANCH #2: Covered if branch at line 24-26\n", "LOOP #2: Entered for loop at line 23-27\n", "BRANCH #2: Covered if branch at line 24-26\n", "LOOP #3: Entered for loop at line 28-35\n"], ["LOOP #2: Entered for loop at line 23-27\n", "LOOP #2: Entered for loop at line 23-27\n", "LOOP #2: Entered for loop at line 23-27\n", "BRANCH #2: Covered if branch at line 24-26\n", "LOOP #3: Entered for loop at line 28-35\n"], ["LOOP #6: Entered for loop at line 36-41\n", "LOOP #1: Entered for loop at line 19-22\n", "BRANCH #1: Covered if branch at line 20-21\n", "LOOP #3: Entered for loop at line 28-35\n", "BRANCH #3: Covered if branch at line 29-34\n"]], "sampled_condition_paths": [["Line 32: (j in range(n))", "Line 30: (i in range(n))", "Line 31: (mask >> i & 1)", "Line 32: (j in range(n))", "Line 33: (mask >> j & 1)"], ["Line 28: (k in range(n))", "Line 29: (mask >> k & 1)", "Line 30: (i in range(n))", "Line 31: (mask >> i & 1)", "Line 32: (j in range(n))"], ["Line 24: (mask >> u & 1 and mask >> v & 1)", "Line 28: (k in range(n))", "Line 29: (mask >> k & 1)", "Line 30: (i in range(n))", "Line 31: (mask >> i & 1)"], ["Line 23: (u, v, w in roads)", "Line 24: (mask >> u & 1 and mask >> v & 1)", "Line 23: (u, v, w in roads)", "Line 24: (mask >> u & 1 and mask >> v & 1)", "Line 28: (k in range(n))"], ["Line 23: (u, v, w in roads)", "Line 23: (u, v, w in roads)", "Line 23: (u, v, w in roads)", "Line 24: (mask >> u & 1 and mask >> v & 1)", "Line 28: (k in range(n))"], ["Line 36: (i in range(n))", "Line 19: (i in range(n))", "Line 20: (mask >> i & 1)", "Line 28: (k in range(n))", "Line 29: (mask >> k & 1)"]]}
{"task_num": 2973, "task_title": "Find Number of Coins to Place in Tree Nodes", "sampled_paths": [[]], "sampled_condition_paths": [[]]}
{"task_num": 2976, "task_title": "Minimum Cost to Convert String I", "sampled_paths": [["LOOP #4: Entered for loop at line 24-27\n", "LOOP #4: Entered for loop at line 24-27\n", "LOOP #4: Entered for loop at line 24-27\n", "LOOP #4: Entered for loop at line 24-27\n", "LOOP #4: Entered for loop at line 24-27\n"], ["LOOP #3: Entered for loop at line 22-27\n", "LOOP #3: Entered for loop at line 22-27\n", "LOOP #3: Entered for loop at line 22-27\n", "LOOP #3: Entered for loop at line 22-27\n", "LOOP #3: Entered for loop at line 22-27\n"]], "sampled_condition_paths": [["Line 24: (j in range(26))", "Line 24: (j in range(26))", "Line 24: (j in range(26))", "Line 24: (j in range(26))", "Line 24: (j in range(26))"], ["Line 22: (i in range(26))", "Line 22: (i in range(26))", "Line 22: (i in range(26))", "Line 22: (i in range(26))", "Line 22: (i in range(26))"]]}
{"task_num": 2977, "task_title": "Minimum Cost to Convert String II", "sampled_paths": [["LOOP #3: Entered for loop at line 25-30\n", "LOOP #3: Entered for loop at line 25-30\n", "LOOP #3: Entered for loop at line 25-30\n", "LOOP #2: Entered for loop at line 24-30\n", "LOOP #3: Entered for loop at line 25-30\n"], ["LOOP #7: Entered for loop at line 57-59\n", "BRANCH #10: Covered if branch at line 58-59\n", "LOOP #7: Entered for loop at line 57-59\n", "LOOP #7: Entered for loop at line 57-59\n", "BRANCH #10: Covered if branch at line 58-59\n"], ["LOOP #1: Entered for loop at line 19-23\n", "LOOP #2: Entered for loop at line 24-30\n", "LOOP #3: Entered for loop at line 25-30\n", "LOOP #3: Entered for loop at line 25-30\n", "LOOP #3: Entered for loop at line 25-30\n"], ["LOOP #4: Entered for loop at line 27-30\n", "LOOP #4: Entered for loop at line 27-30\n", "LOOP #4: Entered for loop at line 27-30\n", "LOOP #3: Entered for loop at line 25-30\n", "LOOP #3: Entered for loop at line 25-30\n"], ["LOOP #7: Entered for loop at line 57-59\n", "LOOP #7: Entered for loop at line 57-59\n", "LOOP #7: Entered for loop at line 57-59\n", "LOOP #1: Entered for loop at line 19-23\n", "LOOP #1: Entered for loop at line 19-23\n"], ["LOOP #4: Entered for loop at line 27-30\n", "BRANCH #2: Covered if branch at line 28-29\n", "LOOP #4: Entered for loop at line 27-30\n", "BRANCH #2: Covered if branch at line 28-29\n", "LOOP #4: Entered for loop at line 27-30\n"]], "sampled_condition_paths": [["Line 25: (i in range(subCount))", "Line 25: (i in range(subCount))", "Line 25: (i in range(subCount))", "Line 24: (k in range(subCount))", "Line 25: (i in range(subCount))"], ["Line 57: (s in original + changed)", "Line 58: (s not in subToId)", "Line 57: (s in original + changed)", "Line 57: (s in original + changed)", "Line 58: (s not in subToId)"], ["Line 19: (a, b, c in zip(original, changed, cost))", "Line 24: (k in range(subCount))", "Line 25: (i in range(subCount))", "Line 25: (i in range(subCount))", "Line 25: (i in range(subCount))"], ["Line 27: (j in range(subCount))", "Line 27: (j in range(subCount))", "Line 27: (j in range(subCount))", "Line 25: (i in range(subCount))", "Line 25: (i in range(subCount))"], ["Line 57: (s in original + changed)", "Line 57: (s in original + changed)", "Line 57: (s in original + changed)", "Line 19: (a, b, c in zip(original, changed, cost))", "Line 19: (a, b, c in zip(original, changed, cost))"], ["Line 27: (j in range(subCount))", "Line 28: (dist[k][j] < math.inf)", "Line 27: (j in range(subCount))", "Line 28: (dist[k][j] < math.inf)", "Line 27: (j in range(subCount))"]]}
{"task_num": 2983, "task_title": "Palindrome Rearrangement Queries", "sampled_paths": [["LOOP #3: Entered for loop at line 63-65\n", "LOOP #3: Entered for loop at line 63-65\n", "LOOP #3: Entered for loop at line 63-65\n", "LOOP #1: Entered for loop at line 21-49\n", "BRANCH #1: Covered if branch at line 29-30\n"], ["LOOP #2: Entered for loop at line 54-57\n", "BRANCH #7: Covered if branch at line 55-56\n", "LOOP #3: Entered for loop at line 63-65\n", "LOOP #3: Entered for loop at line 63-65\n", "LOOP #3: Entered for loop at line 63-65\n"], ["LOOP #3: Entered for loop at line 63-65\n", "LOOP #3: Entered for loop at line 63-65\n", "LOOP #3: Entered for loop at line 63-65\n", "LOOP #3: Entered for loop at line 63-65\n", "LOOP #3: Entered for loop at line 63-65\n"], ["BRANCH #2: Covered else branch at line 31-48\n", "BRANCH #3: Covered if branch at line 34-36\n", "BRANCH #4: Covered if branch at line 37-39\n", "LOOP #1: Entered for loop at line 21-49\n", "BRANCH #2: Covered else branch at line 31-48\n"], ["LOOP #3: Entered for loop at line 63-65\n", "LOOP #3: Entered for loop at line 63-65\n", "LOOP #3: Entered for loop at line 63-65\n", "LOOP #1: Entered for loop at line 21-49\n", "BRANCH #2: Covered else branch at line 31-48\n"], ["LOOP #2: Entered for loop at line 54-57\n", "LOOP #2: Entered for loop at line 54-57\n", "LOOP #2: Entered for loop at line 54-57\n", "LOOP #2: Entered for loop at line 54-57\n", "BRANCH #7: Covered if branch at line 55-56\n"]], "sampled_condition_paths": [["Line 63: (c in s)", "Line 63: (c in s)", "Line 63: (c in s)", "Line 21: (a, b, c, d in queries)", "Line 29: ((min(a, rd) > 0 and mirroredDiffs[min(a, rd)] > 0) or (n // 2 > max(b, rc) and mirroredDiffs[n // 2] - mirroredDiffs[max(b, rc)] > 0) or (rd > b and mirroredDiffs[rd] - mirroredDiffs[b] > 0) or (a > rc and mirroredDiffs[a] - mirroredDiffs[rc] > 0))"], ["Line 54: (i, j in zip(range(len(s)), reversed(range(len(s)))))", "Line 55: (i >= j)", "Line 63: (c in s)", "Line 63: (c in s)", "Line 63: (c in s)"], ["Line 63: (c in s)", "Line 63: (c in s)", "Line 63: (c in s)", "Line 63: (c in s)", "Line 63: (c in s)"], ["Line 29: NOT ((min(a, rd) > 0 and mirroredDiffs[min(a, rd)] > 0) or (n // 2 > max(b, rc) and mirroredDiffs[n // 2] - mirroredDiffs[max(b, rc)] > 0) or (rd > b and mirroredDiffs[rd] - mirroredDiffs[b] > 0) or (a > rc and mirroredDiffs[a] - mirroredDiffs[rc] > 0))", "Line 31: ", "Line 34: (a > rd)", "Line 37: (rc > b)", "Line 21: (a, b, c, d in queries)", "Line 29: NOT ((min(a, rd) > 0 and mirroredDiffs[min(a, rd)] > 0) or (n // 2 > max(b, rc) and mirroredDiffs[n // 2] - mirroredDiffs[max(b, rc)] > 0) or (rd > b and mirroredDiffs[rd] - mirroredDiffs[b] > 0) or (a > rc and mirroredDiffs[a] - mirroredDiffs[rc] > 0))", "Line 31: "], ["Line 63: (c in s)", "Line 63: (c in s)", "Line 63: (c in s)", "Line 21: (a, b, c, d in queries)", "Line 29: NOT ((min(a, rd) > 0 and mirroredDiffs[min(a, rd)] > 0) or (n // 2 > max(b, rc) and mirroredDiffs[n // 2] - mirroredDiffs[max(b, rc)] > 0) or (rd > b and mirroredDiffs[rd] - mirroredDiffs[b] > 0) or (a > rc and mirroredDiffs[a] - mirroredDiffs[rc] > 0))", "Line 31: "], ["Line 54: (i, j in zip(range(len(s)), reversed(range(len(s)))))", "Line 54: (i, j in zip(range(len(s)), reversed(range(len(s)))))", "Line 54: (i, j in zip(range(len(s)), reversed(range(len(s)))))", "Line 54: (i, j in zip(range(len(s)), reversed(range(len(s)))))", "Line 55: (i >= j)"]]}
{"task_num": 3001, "task_title": "Minimum Moves to Capture The Queen", "sampled_paths": [[], ["BRANCH #1: Covered if branch at line 13-17\n", "BRANCH #3: Covered else branch at line 16-17\n"]], "sampled_condition_paths": [[], ["Line 13: (a == e)", "Line 14: NOT (c == a and (b < d < f or b > d > f))", "Line 16: "]]}
{"task_num": 3006, "task_title": "Find Beautiful Indices in the Given Array I", "sampled_paths": [["BRANCH #3: Covered if branch at line 43-48\n", "BRANCH #4: Covered if branch at line 46-48\n", "LOOP #5: Entered while loop at line 42-52\n", "BRANCH #6: Covered else branch at line 51-52\n", "LOOP #5: Entered while loop at line 42-52\n"], ["LOOP #3: Entered for loop at line 30-35\n", "LOOP #3: Entered for loop at line 30-35\n", "LOOP #3: Entered for loop at line 30-35\n", "LOOP #3: Entered for loop at line 30-35\n", "LOOP #3: Entered for loop at line 30-35\n"], ["LOOP #5: Entered while loop at line 42-52\n", "BRANCH #3: Covered if branch at line 43-48\n", "LOOP #5: Entered while loop at line 42-52\n", "BRANCH #3: Covered if branch at line 43-48\n", "LOOP #5: Entered while loop at line 42-52\n"]], "sampled_condition_paths": [["Line 43: (s[i] == pattern[j])", "Line 46: (j == len(pattern))", "Line 42: (i < len(s))", "Line 43: NOT (s[i] == pattern[j])", "Line 49: NOT (j != 0)", "Line 51: ", "Line 42: (i < len(s))"], ["Line 30: (i in range(1, len(pattern)))", "Line 30: (i in range(1, len(pattern)))", "Line 30: (i in range(1, len(pattern)))", "Line 30: (i in range(1, len(pattern)))", "Line 30: (i in range(1, len(pattern)))"], ["Line 42: (i < len(s))", "Line 43: (s[i] == pattern[j])", "Line 42: (i < len(s))", "Line 43: (s[i] == pattern[j])", "Line 42: (i < len(s))"]]}
{"task_num": 3029, "task_title": "Minimum Time to Revert Word to Initial State I", "sampled_paths": [["BRANCH #3: Covered if branch at line 33-35\n", "LOOP #2: Entered for loop at line 28-35\n", "LOOP #3: Entered while loop at line 31-32\n", "LOOP #3: Entered while loop at line 31-32\n", "LOOP #3: Entered while loop at line 31-32\n"], ["LOOP #3: Entered while loop at line 31-32\n", "BRANCH #3: Covered if branch at line 33-35\n", "LOOP #2: Entered for loop at line 28-35\n", "LOOP #2: Entered for loop at line 28-35\n", "LOOP #3: Entered while loop at line 31-32\n"], ["BRANCH #3: Covered if branch at line 33-35\n", "LOOP #2: Entered for loop at line 28-35\n", "BRANCH #3: Covered if branch at line 33-35\n", "LOOP #2: Entered for loop at line 28-35\n", "BRANCH #3: Covered if branch at line 33-35\n"], ["LOOP #2: Entered for loop at line 28-35\n", "LOOP #3: Entered while loop at line 31-32\n", "LOOP #3: Entered while loop at line 31-32\n", "LOOP #3: Entered while loop at line 31-32\n", "BRANCH #3: Covered if branch at line 33-35\n"], ["LOOP #3: Entered while loop at line 31-32\n", "LOOP #3: Entered while loop at line 31-32\n", "BRANCH #3: Covered if branch at line 33-35\n", "LOOP #2: Entered for loop at line 28-35\n", "BRANCH #2: Covered if branch at line 29-30\n"]], "sampled_condition_paths": [["Line 33: (i + z[i] > r)", "Line 28: (i in range(1, n))", "Line 31: (i + z[i] < n and s[z[i]] == s[i + z[i]])", "Line 31: (i + z[i] < n and s[z[i]] == s[i + z[i]])", "Line 31: (i + z[i] < n and s[z[i]] == s[i + z[i]])"], ["Line 31: (i + z[i] < n and s[z[i]] == s[i + z[i]])", "Line 33: (i + z[i] > r)", "Line 28: (i in range(1, n))", "Line 28: (i in range(1, n))", "Line 31: (i + z[i] < n and s[z[i]] == s[i + z[i]])"], ["Line 33: (i + z[i] > r)", "Line 28: (i in range(1, n))", "Line 33: (i + z[i] > r)", "Line 28: (i in range(1, n))", "Line 33: (i + z[i] > r)"], ["Line 28: (i in range(1, n))", "Line 31: (i + z[i] < n and s[z[i]] == s[i + z[i]])", "Line 31: (i + z[i] < n and s[z[i]] == s[i + z[i]])", "Line 31: (i + z[i] < n and s[z[i]] == s[i + z[i]])", "Line 33: (i + z[i] > r)"], ["Line 31: (i + z[i] < n and s[z[i]] == s[i + z[i]])", "Line 31: (i + z[i] < n and s[z[i]] == s[i + z[i]])", "Line 33: (i + z[i] > r)", "Line 28: (i in range(1, n))", "Line 29: (i < r)"]]}
{"task_num": 3030, "task_title": "Find the Grid of Region Average", "sampled_paths": [[]], "sampled_condition_paths": [[]]}
{"task_num": 3043, "task_title": "Find the Length of the Longest Common Prefix", "sampled_paths": [["LOOP #3: Entered for loop at line 41-43\n", "LOOP #1: Entered for loop at line 22-23\n", "LOOP #1: Entered for loop at line 22-23\n", "LOOP #3: Entered for loop at line 41-43\n", "LOOP #1: Entered for loop at line 22-23\n"], ["BRANCH #1: Covered if branch at line 30-31\n", "LOOP #2: Entered for loop at line 29-33\n", "BRANCH #1: Covered if branch at line 30-31\n", "LOOP #2: Entered for loop at line 29-33\n", "BRANCH #1: Covered if branch at line 30-31\n"], ["LOOP #1: Entered for loop at line 22-23\n", "LOOP #2: Entered for loop at line 29-33\n", "LOOP #2: Entered for loop at line 29-33\n", "LOOP #2: Entered for loop at line 29-33\n", "LOOP #2: Entered for loop at line 29-33\n"], ["LOOP #1: Entered for loop at line 22-23\n", "LOOP #3: Entered for loop at line 41-43\n", "LOOP #1: Entered for loop at line 22-23\n", "LOOP #3: Entered for loop at line 41-43\n", "LOOP #1: Entered for loop at line 22-23\n"]], "sampled_condition_paths": [["Line 41: (num in arr1)", "Line 22: (c in word)", "Line 22: (c in word)", "Line 41: (num in arr1)", "Line 22: (c in word)"], ["Line 30: (c not in node.children)", "Line 29: (c in word)", "Line 30: (c not in node.children)", "Line 29: (c in word)", "Line 30: (c not in node.children)"], ["Line 22: (c in word)", "Line 29: (c in word)", "Line 29: (c in word)", "Line 29: (c in word)", "Line 29: (c in word)"], ["Line 22: (c in word)", "Line 41: (num in arr1)", "Line 22: (c in word)", "Line 41: (num in arr1)", "Line 22: (c in word)"]]}
{"task_num": 3044, "task_title": "Most Frequent Prime", "sampled_paths": [["LOOP #4: Entered while loop at line 28-34\n", "LOOP #4: Entered while loop at line 28-34\n", "LOOP #3: Entered for loop at line 24-34\n", "LOOP #4: Entered while loop at line 28-34\n", "LOOP #4: Entered while loop at line 28-34\n"], ["LOOP #4: Entered while loop at line 28-34\n", "LOOP #3: Entered for loop at line 24-34\n", "LOOP #4: Entered while loop at line 28-34\n", "LOOP #4: Entered while loop at line 28-34\n", "BRANCH #1: Covered if branch at line 30-31\n"], ["LOOP #4: Entered while loop at line 28-34\n", "LOOP #3: Entered for loop at line 24-34\n", "LOOP #4: Entered while loop at line 28-34\n", "LOOP #3: Entered for loop at line 24-34\n", "LOOP #4: Entered while loop at line 28-34\n"], ["LOOP #3: Entered for loop at line 24-34\n", "LOOP #4: Entered while loop at line 28-34\n", "LOOP #3: Entered for loop at line 24-34\n", "LOOP #4: Entered while loop at line 28-34\n", "LOOP #3: Entered for loop at line 24-34\n"]], "sampled_condition_paths": [["Line 28: (0 <= x < m and 0 <= y < n)", "Line 28: (0 <= x < m and 0 <= y < n)", "Line 24: (dx, dy in dirs)", "Line 28: (0 <= x < m and 0 <= y < n)", "Line 28: (0 <= x < m and 0 <= y < n)"], ["Line 28: (0 <= x < m and 0 <= y < n)", "Line 24: (dx, dy in dirs)", "Line 28: (0 <= x < m and 0 <= y < n)", "Line 28: (0 <= x < m and 0 <= y < n)", "Line 30: (num > 10 and isPrime(num))"], ["Line 28: (0 <= x < m and 0 <= y < n)", "Line 24: (dx, dy in dirs)", "Line 28: (0 <= x < m and 0 <= y < n)", "Line 24: (dx, dy in dirs)", "Line 28: (0 <= x < m and 0 <= y < n)"], ["Line 24: (dx, dy in dirs)", "Line 28: (0 <= x < m and 0 <= y < n)", "Line 24: (dx, dy in dirs)", "Line 28: (0 <= x < m and 0 <= y < n)", "Line 24: (dx, dy in dirs)"]]}
{"task_num": 3072, "task_title": "Distribute Elements Into Two Arrays II", "sampled_paths": [["LOOP #4: Entered for loop at line 64-66\n", "LOOP #4: Entered for loop at line 64-66\n", "LOOP #4: Entered for loop at line 64-66\n", "LOOP #1: Entered while loop at line 16-19\n", "LOOP #1: Entered while loop at line 16-19\n"], ["LOOP #1: Entered while loop at line 16-19\n", "LOOP #1: Entered while loop at line 16-19\n", "LOOP #3: Entered for loop at line 47-58\n", "LOOP #2: Entered while loop at line 22-24\n", "LOOP #2: Entered while loop at line 22-24\n"], ["LOOP #2: Entered while loop at line 22-24\n", "BRANCH #4: Covered else branch at line 56-57\n", "LOOP #1: Entered while loop at line 16-19\n", "LOOP #3: Entered for loop at line 47-58\n", "LOOP #2: Entered while loop at line 22-24\n"], ["LOOP #4: Entered for loop at line 64-66\n", "LOOP #1: Entered while loop at line 16-19\n", "LOOP #1: Entered while loop at line 16-19\n", "LOOP #1: Entered while loop at line 16-19\n", "LOOP #3: Entered for loop at line 47-58\n"], ["LOOP #3: Entered for loop at line 47-58\n", "LOOP #2: Entered while loop at line 22-24\n", "LOOP #2: Entered while loop at line 22-24\n", "BRANCH #4: Covered else branch at line 56-57\n", "LOOP #1: Entered while loop at line 16-19\n"]], "sampled_condition_paths": [["Line 64: (num in sorted(set(nums)))", "Line 64: (num in sorted(set(nums)))", "Line 64: (num in sorted(set(nums)))", "Line 16: (i < len(self.sums))", "Line 16: (i < len(self.sums))"], ["Line 16: (i < len(self.sums))", "Line 16: (i < len(self.sums))", "Line 47: (i in range(2, len(nums)))", "Line 22: (i > 0)", "Line 22: (i > 0)"], ["Line 22: (i > 0)", "Line 50: NOT (greaterCount1 > greaterCount2)", "Line 52: NOT (greaterCount1 < greaterCount2)", "Line 54: NOT (len(arr1) > len(arr2))", "Line 56: ", "Line 16: (i < len(self.sums))", "Line 47: (i in range(2, len(nums)))", "Line 22: (i > 0)"], ["Line 64: (num in sorted(set(nums)))", "Line 16: (i < len(self.sums))", "Line 16: (i < len(self.sums))", "Line 16: (i < len(self.sums))", "Line 47: (i in range(2, len(nums)))"], ["Line 47: (i in range(2, len(nums)))", "Line 22: (i > 0)", "Line 22: (i > 0)", "Line 50: NOT (greaterCount1 > greaterCount2)", "Line 52: NOT (greaterCount1 < greaterCount2)", "Line 54: NOT (len(arr1) > len(arr2))", "Line 56: ", "Line 16: (i < len(self.sums))"]]}
{"task_num": 3095, "task_title": "Shortest Subarray With OR at Least K I", "sampled_paths": [["LOOP #3: Entered for loop at line 28-32\n", "LOOP #3: Entered for loop at line 28-32\n", "LOOP #3: Entered for loop at line 28-32\n", "LOOP #3: Entered for loop at line 28-32\n", "LOOP #3: Entered for loop at line 28-32\n"], ["LOOP #3: Entered for loop at line 28-32\n", "LOOP #3: Entered for loop at line 28-32\n", "LOOP #1: Entered for loop at line 18-24\n", "LOOP #3: Entered for loop at line 28-32\n", "LOOP #3: Entered for loop at line 28-32\n"], ["LOOP #3: Entered for loop at line 28-32\n", "LOOP #2: Entered while loop at line 20-24\n", "LOOP #4: Entered for loop at line 36-40\n", "LOOP #4: Entered for loop at line 36-40\n", "BRANCH #3: Covered if branch at line 37-40\n"]], "sampled_condition_paths": [["Line 28: (i in range(30))", "Line 28: (i in range(30))", "Line 28: (i in range(30))", "Line 28: (i in range(30))", "Line 28: (i in range(30))"], ["Line 28: (i in range(30))", "Line 28: (i in range(30))", "Line 18: (r, num in enumerate(nums))", "Line 28: (i in range(30))", "Line 28: (i in range(30))"], ["Line 28: (i in range(30))", "Line 20: (ors >= k and l <= r)", "Line 36: (i in range(30))", "Line 36: (i in range(30))", "Line 37: (num >> i & 1)"]]}
{"task_num": 3102, "task_title": "Minimize Manhattan Distances", "sampled_paths": [["BRANCH #2: Covered if branch at line 33-35\n", "BRANCH #3: Covered if branch at line 36-38\n", "BRANCH #4: Covered if branch at line 39-41\n", "BRANCH #5: Covered if branch at line 42-44\n", "LOOP #1: Entered for loop at line 28-45\n"], ["LOOP #1: Entered for loop at line 28-45\n", "BRANCH #6: Covered if branch at line 46-47\n", "LOOP #1: Entered for loop at line 28-45\n", "BRANCH #1: Covered if branch at line 29-30\n", "LOOP #1: Entered for loop at line 28-45\n"], ["BRANCH #4: Covered if branch at line 39-41\n", "LOOP #1: Entered for loop at line 28-45\n", "BRANCH #1: Covered if branch at line 29-30\n", "LOOP #1: Entered for loop at line 28-45\n", "BRANCH #2: Covered if branch at line 33-35\n"], ["BRANCH #4: Covered if branch at line 39-41\n", "BRANCH #5: Covered if branch at line 42-44\n", "LOOP #1: Entered for loop at line 28-45\n", "BRANCH #6: Covered if branch at line 46-47\n", "LOOP #1: Entered for loop at line 28-45\n"]], "sampled_condition_paths": [["Line 33: (summ < minSum)", "Line 36: (summ > maxSum)", "Line 39: (diff < minDiff)", "Line 42: (diff > maxDiff)", "Line 28: (i, (x, y) in enumerate(points))"], ["Line 28: (i, (x, y) in enumerate(points))", "Line 46: (maxSum - minSum >= maxDiff - minDiff)", "Line 28: (i, (x, y) in enumerate(points))", "Line 29: (i == excludedIndex)", "Line 28: (i, (x, y) in enumerate(points))"], ["Line 39: (diff < minDiff)", "Line 28: (i, (x, y) in enumerate(points))", "Line 29: (i == excludedIndex)", "Line 28: (i, (x, y) in enumerate(points))", "Line 33: (summ < minSum)"], ["Line 39: (diff < minDiff)", "Line 42: (diff > maxDiff)", "Line 28: (i, (x, y) in enumerate(points))", "Line 46: (maxSum - minSum >= maxDiff - minDiff)", "Line 28: (i, (x, y) in enumerate(points))"]]}
{"task_num": 3108, "task_title": "Minimum Cost Walk in Weighted Graph", "sampled_paths": [["LOOP #1: Entered for loop at line 53-55\n", "BRANCH #3: Covered elif branch at line 27-28\n", "BRANCH #8: Covered if branch at line 44-45\n", "BRANCH #8: Covered if branch at line 44-45\n", "BRANCH #6: Covered if branch at line 38-39\n"], ["LOOP #1: Entered for loop at line 53-55\n", "BRANCH #8: Covered if branch at line 44-45\n", "BRANCH #1: Covered if branch at line 23-24\n", "LOOP #1: Entered for loop at line 53-55\n", "BRANCH #8: Covered if branch at line 44-45\n"], ["BRANCH #3: Covered elif branch at line 27-28\n", "LOOP #1: Entered for loop at line 53-55\n", "BRANCH #3: Covered elif branch at line 27-28\n", "BRANCH #8: Covered if branch at line 44-45\n", "BRANCH #8: Covered if branch at line 44-45\n"], ["BRANCH #1: Covered if branch at line 23-24\n", "LOOP #1: Entered for loop at line 53-55\n", "BRANCH #8: Covered if branch at line 44-45\n", "BRANCH #1: Covered if branch at line 23-24\n", "BRANCH #8: Covered if branch at line 44-45\n"]], "sampled_condition_paths": [["Line 53: (u, v, w in edges)", "Line 25: NOT (self.rank[i] < self.rank[j])", "Line 27: (self.rank[i] > self.rank[j])", "Line 44: (self.id[u] != u)", "Line 44: (self.id[u] != u)", "Line 38: (i == j)"], ["Line 53: (u, v, w in edges)", "Line 44: (self.id[u] != u)", "Line 23: (i == j)", "Line 53: (u, v, w in edges)", "Line 44: (self.id[u] != u)"], ["Line 25: NOT (self.rank[i] < self.rank[j])", "Line 27: (self.rank[i] > self.rank[j])", "Line 53: (u, v, w in edges)", "Line 25: NOT (self.rank[i] < self.rank[j])", "Line 27: (self.rank[i] > self.rank[j])", "Line 44: (self.id[u] != u)", "Line 44: (self.id[u] != u)"], ["Line 23: (i == j)", "Line 53: (u, v, w in edges)", "Line 44: (self.id[u] != u)", "Line 23: (i == j)", "Line 44: (self.id[u] != u)"]]}
{"task_num": 3112, "task_title": "Minimum Time to Visit Disappearing Nodes", "sampled_paths": [["LOOP #1: Entered for loop at line 15-18\n", "LOOP #2: Entered while loop at line 27-35\n", "LOOP #3: Entered for loop at line 31-35\n", "BRANCH #2: Covered if branch at line 32-34\n", "LOOP #3: Entered for loop at line 31-35\n"], ["LOOP #2: Entered while loop at line 27-35\n", "LOOP #3: Entered for loop at line 31-35\n", "LOOP #4: Entered for loop at line 37-41\n", "BRANCH #3: Covered if branch at line 38-39\n", "LOOP #4: Entered for loop at line 37-41\n"], ["LOOP #4: Entered for loop at line 37-41\n", "BRANCH #3: Covered if branch at line 38-39\n", "LOOP #4: Entered for loop at line 37-41\n", "BRANCH #4: Covered else branch at line 40-41\n", "LOOP #4: Entered for loop at line 37-41\n"], ["LOOP #3: Entered for loop at line 31-35\n", "BRANCH #2: Covered if branch at line 32-34\n", "LOOP #3: Entered for loop at line 31-35\n", "BRANCH #2: Covered if branch at line 32-34\n", "LOOP #2: Entered while loop at line 27-35\n"]], "sampled_condition_paths": [["Line 15: (u, v, w in edges)", "Line 27: (minHeap)", "Line 31: (v, w in graph[u])", "Line 32: (d + w < disappear[v] and d + w < dist[v])", "Line 31: (v, w in graph[u])"], ["Line 27: (minHeap)", "Line 31: (v, w in graph[u])", "Line 37: (d in dist)", "Line 38: (d != math.inf)", "Line 37: (d in dist)"], ["Line 37: (d in dist)", "Line 38: (d != math.inf)", "Line 37: (d in dist)", "Line 38: NOT (d != math.inf)", "Line 40: ", "Line 37: (d in dist)"], ["Line 31: (v, w in graph[u])", "Line 32: (d + w < disappear[v] and d + w < dist[v])", "Line 31: (v, w in graph[u])", "Line 32: (d + w < disappear[v] and d + w < dist[v])", "Line 27: (minHeap)"]]}
{"task_num": 3123, "task_title": "Find Edges in Shortest Paths", "sampled_paths": [["BRANCH #2: Covered if branch at line 34-36\n", "LOOP #2: Entered while loop at line 29-37\n", "LOOP #3: Entered for loop at line 33-37\n", "LOOP #3: Entered for loop at line 33-37\n", "LOOP #3: Entered for loop at line 33-37\n"], ["LOOP #3: Entered for loop at line 33-37\n", "BRANCH #2: Covered if branch at line 34-36\n", "LOOP #2: Entered while loop at line 29-37\n", "LOOP #3: Entered for loop at line 33-37\n", "LOOP #3: Entered for loop at line 33-37\n"], ["LOOP #2: Entered while loop at line 29-37\n", "LOOP #3: Entered for loop at line 33-37\n", "LOOP #3: Entered for loop at line 33-37\n", "LOOP #2: Entered while loop at line 29-37\n", "BRANCH #1: Covered if branch at line 31-32\n"], ["BRANCH #2: Covered if branch at line 34-36\n", "LOOP #3: Entered for loop at line 33-37\n", "BRANCH #2: Covered if branch at line 34-36\n", "LOOP #3: Entered for loop at line 33-37\n", "BRANCH #2: Covered if branch at line 34-36\n"]], "sampled_condition_paths": [["Line 34: (d + w < dist[v])", "Line 29: (minHeap)", "Line 33: (v, w in graph[u])", "Line 33: (v, w in graph[u])", "Line 33: (v, w in graph[u])"], ["Line 33: (v, w in graph[u])", "Line 34: (d + w < dist[v])", "Line 29: (minHeap)", "Line 33: (v, w in graph[u])", "Line 33: (v, w in graph[u])"], ["Line 29: (minHeap)", "Line 33: (v, w in graph[u])", "Line 33: (v, w in graph[u])", "Line 29: (minHeap)", "Line 31: (d > dist[u])"], ["Line 34: (d + w < dist[v])", "Line 33: (v, w in graph[u])", "Line 34: (d + w < dist[v])", "Line 33: (v, w in graph[u])", "Line 34: (d + w < dist[v])"]]}
